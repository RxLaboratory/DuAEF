/**
 * After Effects expression tools
 * @namespace
 */
var DuAEExpression = {};

//caches
//this must be set to true during work on the cache to prevent it from updating
DuAEExpression.suspendCacheUpdates = false;

// the expression cache is an array of DuAEPropertyExpression
DuAEExpression.cache = [];
DuAEExpression.lastCacheUpdateTime = 0;

/**
 * The list of expression IDs, added at the beginning of generated expressions.
 * @enum {string}
 */
DuAEExpression.Id = {
    LINK: "/*== DuAEF: property link ==*/"
}

/**
 * Updates the cache of the expressions used by Duik to speed up batch process of expressions in the whole project.<br />
 * It's automatically run when needed if it's not been updated in a long time (1 mn) or if it's empty
 * @param {bool} [currentComp=false] true: in current compositions, false: in all compositions of the project
 * @param {bool} [selectedComps=false] When currentComp is false, true to replace only in selected compositions
 * @param {bool} [selectedLayers=false] When currentComp is true, whether to replace only on selected layers
 */
DuAEExpression.updateCache = function (currentComp, selectedComps, selectedLayers) {

    if ( DuAEExpression.suspendCacheUpdates ) return;

    currentComp = def(currentComp, false);
    selectedComps = def(selectedComps, false);
    selectedLayers = def(selectedLayers, false);

    //clear cache
    DuAEExpression.cache = [];

    var comps = [];
    if (currentComp) comps = [DuAEProject.getActiveComp()];
    else if (selectedComps) comps = app.project.selection;
    else comps = DuAEProject.getComps();

    for ( var i = 0, num = comps.length; i < num; i++ ) {
        var comp = comps[i];
        if ( !( comp instanceof CompItem ) ) continue;

        var layers = comp.layers;
        if (selectedLayers) layers = comp.selectedLayers;

        new DuList(layers).do(function (layer) {
            DuAEProperty.addToExpressionCache( layer );
        });
    }

    DuAEExpression.lastCacheUpdateTime = new Date().getTime();
}

/**
 * Runs a function on all expressions
 * @param {function} func The function to run, which takes one param, a {@link DuAEPropertyExpression} object.
 * @param {bool} [currentComp=false] true: in current compositions, false: in all compositions of the project
 * @param {bool} [selectedComps=false] When currentComp is false, true to replace only in selected compositions
 * @param {bool} [selectedLayers=false] When currentComp is true, whether to replace only on selected layers
 * @param {boolean} [updateCache=true] When false, the cache won't be updated before running the function. Set this to false if you already have updated the cache to improve performance.
 * @param {boolean} [apply=true] When false, the cache won't be applied back to Ae. Set this to false if you need to run other methods on expressions before applying the result to improve performance.
 */
DuAEExpression.doInExpresssions = function ( func, currentComp, selectedComps, selectedLayers, updateCache, apply )
{
    currentComp = def(currentComp, false);
    selectedComps = def(selectedComps, false);
    selectedLayers = def(selectedLayers, false);
    updateCache = def(updateCache, true);
    apply = def(apply, true);

    if (updateCache) DuAEExpression.updateCache( currentComp, selectedComps, selectedLayers );

    for (var i = 0, num = DuAEExpression.cache.length; i < num; i++) {
        func( DuAEExpression.cache[i] );
    }

    if (apply) DuAEExpression.applyCache( );
}

/**
 * Applies all the expressions stored in the cache to the actual properties in After Effects, if and only if they've been modified.
 */
DuAEExpression.applyCache = function ( ) {
    for (var i = 0, num = DuAEExpression.cache.length; i < num; i++)
    {
        DuAEExpression.cache[i].apply();
    } 
}

/**
 * Converts the expression as a string which can be copy/pasted and included in a script.
 * @param {Property|DuAEProperty|string} prop - The property containing the expression or the expression itself.
 * @param {string} [varName] - A name for the variable
 * @return {string} The stringified expression.
 */
DuAEExpression.scriptifyExpression = function ( prop, varName ) {
    varName = def( varName, '' );

    function line(str)
    {
        return "'" + str.replace( "\r", "" ).replace(/'/g , "\\'") + "'";
    }

    var exp = '';
    if ( jstype( prop ) === 'string' ) exp = prop;
    else {
        if ( prop instanceof DuAEProperty ) prop = prop.getProperty();
        exp = prop.expression;
    }

    var expArray = exp.split( '\n' );
    var expString = "";
    if ( varName != '' ) expString += "var " + varName + " = ";

    expString += "[" + line( expArray[0] );

    for ( var i = 1; i < expArray.length; i++ ) {
        expString += ",\n\t" + line( expArray[i] );
    }
    expString += "\n\t].join('\\n');";

    return expString;
}

/**
 * The expression library<br />
 * Use {@link DuAEExpression.Library.get} and {@link DuAEExpression.Library.getRequirements}<br />
 * to easily include the methods and classes listed here to your expressions.<br />
 * These methods take the name (listed here) of the function/class as arguments.
 * @namespace
 * @memberof DuAEExpression
 */
DuAEExpression.Library = {};

/**
 * Gets functions and their dependencies from the library.
 * @param {string[]} functions The name of the functions to get
 * @return {string} The expression
 */
DuAEExpression.Library.get = function( functions )
{
	var exp = functions;
	new DuList(functions).do(function(functionName)
	{
		var r = DuAEExpression.Library.getRequirements( functionName );
		exp = exp.concat(r);
	});

	DuList.removeDuplicates(exp);

	var expString = '';

	new DuList(exp).do(function(expName)
	{
		expString += DuAEExpression.Library[ expName ].expression + '\n';
	});

	return expString;
}

/**
 * A recursive method to get all the requirements (dependencies) of a function from a library
 * @param {string} functionName The name of the function
 * @return {string[]} The names of the required functions, including the querried one
 */
DuAEExpression.Library.getRequirements = function ( functionName )
{
	var r = DuAEExpression.Library[ functionName ].requirements;
	if (r.length > 0)
	{
		for (var i = 0, iN = r.length; i < iN; i++)
		{
			r = r.concat(DuAEExpression.Library.getRequirements( r[i]) );
		}
	}

	return r;
}