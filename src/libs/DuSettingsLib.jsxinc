/*
DuSettingsLib
Library to manager settings in a JSON file.
Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Constructs a new DuSettings instance
* @class DuSettings
* @classdesc A class to manage settings.
* @param {string}	  [namespace=DuAEF.scriptName]     - A namespace to group your settings.
* @param {File|string}    [file=Folder.myDocuments/namespace/namespace_settings.json]    - The file to store the settings
* @property {string}	  namespace	- A namespace to group your settings.
* @property {File}		file	- The file to store the settings
* @property {Object}	data	- The settings as a js object
*/
function DuSettings(namespace,file)
{
	namespace = def(namespace, DuAEF.scriptName);
	if (DuAEF.DuJS.typeof( namespace ) != 'string') throw "Dusettings( namespace, file ): error\n\nnamespace must be a string";
	if (namespace == "") throw "Dusettings( namespace, file ): error\n\nnamespace can not be an empty string";
	if (typeof file === 'undefined' && app.settings.haveSetting(namespace, "settingsFile"))
	{
		file = new File(app.settings.getSetting(namespace, "settingsFile"));
	}
	else if (typeof file === 'undefined')
	{
		var settingsFolder = new Folder(Folder.myDocuments.absoluteURI + "/" + namespace);
		if (!settingsFolder.exists) settingsFolder.create();
		file = new File(settingsFolder.absoluteURI + "/" + namespace + "_settings.json");
	}
	
	this.namespace = namespace;
	if (file instanceof File) this.file = file;
	else this.file = new File(file);
	this.file.encoding = 'UTF-8';
	
	app.settings.saveSetting( namespace,"settingsFile", this.file.absoluteURI );

	this.data = {};
	this.load();
}

/**
 * loads data from the settings file
 * @memberof DuSettings
 */
DuSettings.prototype.load = function()
{
	//load file
	if (this.file.exists)
	{
		this.data = DuAEF.DuJS.Fs.parseJSON(this.file);
	}
}

/**
 * Saves data to the file
 * @memberof DuSettings
 * @param {string}		name	- The name of the setting
 * @return {boolean} true if the file has been correctly written
 */
DuSettings.prototype.save = function()
{
	if (!DuAEF.DuAE.App.hasFilesAndNetworkAccess) return false;
	return DuAEF.DuJS.Fs.saveJSON(this.data, this.file);
}

/**
 * Sets the file to be used to save the settings
 * @param {File|string} file The file or path to the file
 */
DuSettings.prototype.setFile = function(file)
{
	if (file instanceof File) this.file = file;
	else this.file = new File(file);
	if (file.exists) this.load();
	else this.save();
	app.settings.saveSetting( this.namespace,"settingsFile", this.file.absoluteURI );
}

/**
 * Some settings shared with all DuAEF instances
 * @type {DuSettings}
 */
DuAEF.settings = new DuSettings("DuAEF",DuAEF.DuJS.Fs.duaefData.absoluteURI + "/DuAEF_settings.json");