/**
	* Color related methods
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Color = {};

// Init colors
(function() {
	var aeColor = app.themeColor( 78 );
	aeColor.push(1);
	/**
	* Enum for predefined colors.
	* @readonly
	* @enum {float[]}
	*/
	DuAEF.DuJS.Color.Colors =
	{
		BLACK: [0,0,0,1],
		WHITE: [1,1,1,1],
		OBSIDIAN: [.082,.082,.082,1],
		ABYSS_GREY: [0.109,0.109,0.109,1],
		VERY_DARK_GREY: [0.199,0.199,0.199,1],
		AE_DARK_GREY: aeColor,
		DARK_GREY: [.262,.262,.262,1],
		LIGHT_GREY: [.65,.65,.65,1],
		VERY_LIGHT_GREY: [.85,.85,.85,1],
		RAINBOX_RED: [.925,.094,.094,1],
		ORANGE: [.925,.471,.094,1],
		YELLOW: [.925,.839,.094,1],
		GREEN: [.094,.925,.094,1],
		LIGHT_BLUE: [.471,.839,.925,1],
		LIGHT_PURPLE: [.471,.471,.925,1],
		AFTER_EFFECTS_BLUE: [.439,.722,1,1],
		RAINBOX_PURPLE: [.443,.004,.196,1],
		RANDOM: [-1,-1,-1,-1]
	};
})();


/**
 * Checks if this color is valid ([R,V,B,A] in the range 0.0 ... 1.0)
 * @param {float[]} color - The color to validate
 * @param {boolean} [ignoreAlpha=false] - Will return true even if the array does not have any alpha value
 * @return {boolean} true if the color is valid
 */
DuAEF.DuJS.Color.validateColor = function (color, ignoreAlpha)
{
	ignoreAlpha = def( ignoreAlpha, false, false );
	if ( !DuAEF.DuJS.typeof(color) == 'Array' ) return false;
	var numChannels = color.length;
	if ( numChannels != 4 && !ignoreAlpha ) return false;
	if ( numChannels != 4 && numChannels != 3 ) return false;
	for (var i = 0, numChannels; i < numChannels; i++)
	{
		var c = color[i];
		if (isNaN(c)) return false;
		if (!DuAEF.DuJS.typeof(color) == 'number') return false;
		if (c < 0) color[i] = 0;
		if (c > 1) color[i] = 1;
	}
	return true;
}

/**
	* Generates a random color
	* @memberof DuAEF.DuJS.Color
	* @return {float[]}	The color as an [R,G,B,A] Array with float values between 0.0 and 1.0
*/
DuAEF.DuJS.Color.random = function ()
{
	var color = [0,0,0,1];
	for (var i = 0 ; i < 3 ; i++)
	{
		color[i] = DuAEF.DuJS.Math.random();
		$.sleep(10);
	}
	return color;
}

/**
	* Converts an hexadecimal color to an RVB Array
	* @memberof DuAEF.DuJS.Color
	* @param {string|int[]} hexColor	- The hexadecimal color
	* @param {boolean}	[isString=true] 	- Whether hexColor is a string or an Array of int of base 16
	* @return {float[]}	The color as an [R,G,B,A] Array with float values between 0.0 and 1.0
*/
DuAEF.DuJS.Color.hexToRGB = function (hexColor,isString)
{
		if (isString == undefined) isString = true;
		if (isString)
		{
			if (hexColor.indexOf("#") == 0) hexColor = hexColor.replace("#","");
			var red = parseInt(hexColor.substr(0,2),16)/255.0;
			var green = parseInt(hexColor.substr(2,2),16)/255.0;
			var blue = parseInt(hexColor.substr(4,2),16)/255.0;
			return [red,green,blue,1];
		}
		else
		{
			var r = hexColor >> 16;
			var g = (hexColor & 0x00ff00) >> 8;
			var b = hexColor & 0xff;
			return [r/255,g/255,b/255,1];
		}
	}


/**
	* Converts an RGB color to a hex string
	* @memberof DuAEF.DuJS.Color
	* @param {float[]} rgbColor	- The rgb color
	* @return {string}	The color as an hex string
*/
DuAEF.DuJS.Color.rgbToHex = function (rgbColor)
{
	var red = rgbColor[0]*255;
	var green = rgbColor[1]*255;
	var blue = rgbColor[2]*255;
	var hexR = red.toString(16)
	var hexG = green.toString(16)
	var hexB = blue.toString(16);
	if (hexR.length == 1) hexR = "0" + hexR;
	if (hexG.length == 1) hexG = "0" + hexG;
	if (hexB.length == 1) hexB = "0" + hexB;
	var hex = hexR+hexG+hexB;
	return hex;
}

/**
	* Converts an HSL color to RGB
	* @param {float[]} color - The RGBA color array
	* @return {float[]} the HSLA color array
*/
DuAEF.DuJS.Color.hslToRgb = function (color)
{
    var r, g, b;
	var h = color[0];
	var s = color[1];
	var l = color[2];

    if(s == 0)
	{
        r = g = b = l; // achromatic
    }
	else
	{
        function hue2rgb(p, q, t)
		{
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [r, g, b, color[3]];
}

/**
	* Converts an RGB color to HSL
	* @param {float[]} color - The HSLA color array
	* @return {float[]} the RGBA color array
*/
DuAEF.DuJS.Color.rgbToHsl = function (color)
{
	var r = color[0];
	var g = color[1];
	var b = color[2];

    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min)
	{
        h = s = 0; // achromatic
    }
	else
	{
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max)
		{
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l, color[3]];
}

/**
 * Converts an 8bpc color array to a 32bpc float color array
 * @param {int[]} color - The RGB(A) color array in 8bpc (0-255 range)
 * @return {float[]} the RGBA color array
 */
DuAEF.DuJS.Color.eightBpcToFloat = function (color)
{
	var floatColor = [];
	for (var i = 0, numChannels = color.length; i < numChannels; i++)
	{
		floatColor.push( color[ i ] / 255 );
	}
	return floatColor;
}
