/**
	* Constructs a Bone
	* @class Bone
	* @classdesc A Bone.
	* @param {ShapeLayer} layer - The layer of the bone
	* @property {ShapeLayer} layer - The Shape layer of the bone
	* @property {PropertyGroup} effect - The effect on the bone
*/
function Bone(layer)
{
	this.layer = layer;
	var effect = this.layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.BONE);
	this.effect = effect;
}

/**
	* Sets a new display size for the bone
	* @memberof Bone
	* @param {int} [size] - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
*/
Bone.prototype.setSize = function (size)
{
	if (this.layer == null) return;
	if (size == undefined)
	{
		var comp = this.layer.containingComp;
		size = comp.width/2 + comp.height/2;
		if (DuAEF.Duik.Bone.sizeHint == DuAEF.Duik.Sizes.SMALL) size = Math.floor(size*100/1500);
		else if (DuAEF.Duik.Bone.sizeHint == DuAEF.Duik.Sizes.MEDIUM) size = Math.floor(size*150/1500);
		else if (DuAEF.Duik.Bone.sizeHint == DuAEF.Duik.Sizes.LARGE) size = Math.floor(size*200/1500);
		else if (DuAEF.Duik.Bone.sizeHint == DuAEF.Duik.Sizes.CUSTOM) size = DuAEF.Duik.Bone.size;
	}

	this.effect(2).setValue(size);
}

/**
	* Sets a new display color for the bone
	* @memberof Bone
	* @param {float[]} color - The new color
*/
Bone.prototype.setColor = function (color)
{
	if (color == undefined) color = DuAEF.Duik.Bone.color;
	if (color == DuAEF.DuJS.Color.Colors.RANDOM) color = DuAEF.DuJS.Color.random();

	this.effect(1).setValue(color);
}

/**
 * "Bakes" the appearance of the Bone,<br />
 * in order to improve performance and simplify the use of the rig when animating.
 * @memberof Bone
 */
Bone.prototype.bakeAppearence = function ()
{
	var effect = this.layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.BONE);
	if (!effect) return;

	var iconGroup = this.layer("ADBE Root Vectors Group").property("Icon");

	if (iconGroup)
	{
		//reset the line of tangents
		var iconContent = iconGroup.property("ADBE Vectors Group");
		var line = iconContent.property("ADBE Vector Shape - Group");
		if (line)
		{
			line.property('ADBE Vector Shape').expression = '';
		}
		//remove all expressions
		DuAEF.DuAE.Property.removeExpressions(iconGroup);
	}

	effect.remove();
}

/**
	* Bones
	* @namespace
	* @memberof DuAEF.Duik
*/
DuAEF.Duik.Bone = {};

/**
	* Size hint of bones
	* @type {int}
	* @default DuAEF.Duik.Sizes.SMALL
*/
DuAEF.Duik.Bone.sizeHint = DuAEF.Duik.Sizes.SMALL;
/**
	* The default size for new bones if boneSizeHint is DuAEF.Duik.Sizes.CUSTOM
	* @type {int}
	* @default 100
*/
DuAEF.Duik.Bone.size = 100;
/**
	* The default color for new bones
	* @type {float[]}
	* @default DuAEF.DuJS.Color.Colors.RAINBOX_RED
*/
DuAEF.Duik.Bone.color = DuAEF.DuJS.Color.Colors.RAINBOX_RED;

/**
 * The shapes/type/icon of the bones
 * @enum {int}
 * @readonly
*/
DuAEF.Duik.Bone.BoneTypes =
{
	PIN: 1,
	VERTEX: 2,
	TANGENT: 3,
	BEND_PIN: 4,
	ADVANCED_PIN: 5,
	STANDARD: 6
}

/**
	* Creates a stand alone bone in the comp
	* @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp()] - The containing composition
	* @param {float}	[size] - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
	* @param {DuAEF.Duik.Bone.BoneTypes} [type=DuAEF.Duik.Bone.BoneTypes.PIN] - The type
	* @return {Bone} The bone
*/
DuAEF.Duik.Bone.createBone = function(comp,size,type)
{
	comp = def(comp, DuAEF.DuAE.Project.getActiveComp());
	if (!comp) return;
	type = def(type, DuAEF.Duik.Bone.BoneTypes.PIN);
	
	//create
	var bone = comp.layers.addShape();
	DuAEF.Duik.setDuikMarker(bone,"Bone",DuAEF.Duik.LayerTypes.BONE);
	//add effect
	var effect = DuAEF.DuAE.Layer.addPseudoEffect(bone,DuAEF.Duik.PseudoEffects.BONE,DuAEF.Duik.PseudoEffectsMatchNames.BONE,'Bone');

	function createIcon()
	{
		var iconGroup = bone("ADBE Root Vectors Group").addProperty("ADBE Vector Group");
		iconGroup.name = 'Icon';
		iconContent = iconGroup.property("ADBE Vectors Group");

		if (type == DuAEF.Duik.Bone.BoneTypes.PIN)
		{
			var shape1 = iconContent.addProperty("ADBE Vector Shape - Group");
			var handleShape = new Shape();
			handleShape.vertices = [[24.6726379394531, -34.5], [34.6699981689453, -24.9618682861328], [26.9935607910156, -18.9175109863281], [25.2696228027344, -9.10385131835938], [9.27384948730469, -24.3648681640625], [18.9956817626953, -26.5480346679688]];
			handleShape.inTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			handleShape.outTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			handleShape.closed = true;
			shape1('ADBE Vector Shape').setValue(handleShape);
			var shape2 = iconContent.addProperty("ADBE Vector Shape - Group");
			var needleShape = new Shape();
			needleShape.vertices = [[13.7023773193359, -16], [5.47381591796875, -7.77142333984375], [0.75, 0], [8.06428527832031, -5.4857177734375], [16.2928619384766, -13.7142791748047]];
			needleShape.inTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			needleShape.outTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			needleShape.closed = true;
			shape2('ADBE Vector Shape').setValue(needleShape);
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1).value';
		}
		else if (type == DuAEF.Duik.Bone.BoneTypes.VERTEX)
		{
			var rect = iconContent.addProperty("ADBE Vector Shape - Rect");
			rect("ADBE Vector Rect Size").setValue([30,30]);
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1).value';

			bone.transform.scale.expression = '[value[0],value[0]];';
			bone.label = 11;
		}
		else if (type == DuAEF.Duik.Bone.BoneTypes.TANGENT)
		{
			var circle = iconContent.addProperty("ADBE Vector Shape - Ellipse");
			circle("ADBE Vector Ellipse Size").expression = '[20,20] * effect("Bone")(2).value/100';

			var line = iconContent.addProperty("ADBE Vector Shape - Group");
			line('ADBE Vector Shape').expression = "if (active && hasParent) createPath([[0,0], -transform.position], [[0,0],[0,0]], [[0,0],[0,0]], false); else value;";
			var pathStroke = iconContent.addProperty("ADBE Vector Graphic - Stroke");
			pathStroke.property("Color").expression = 'effect("Bone")(1)-[0.2,0.2,0.2,0]';
			pathStroke.property("Stroke Width").setValue(3);
			pathStroke.property('Stroke Width').expression = '3 * effect("Bone")(2).value/100';
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1)-[0.2,0.2,0.2,0]';

			bone.label = 14;
		}
		else if (type == DuAEF.Duik.Bone.BoneTypes.STANDARD)
		{
			var shape1 = iconContent.addProperty("ADBE Vector Shape - Group");
			var shape = new Shape();
			shape.vertices = [[0.2703857421875, -10.5538482666016], [11.4765472412109, 0.65220642089844], [0.2703857421875, 11.8582611083984], [-10.9355621337891, 0.65220642089844]];
			shape.inTangents = [[-6.17909240722656, 0], [0, -6.17901611328125], [6.1790771484375, 0], [0, 6.17901611328125]];
			shape.outTangents = [[6.1790771484375, 0], [0, 6.17901611328125], [-6.17909240722656, 0], [0, -6.17901611328125]];
			shape.closed = true;
			shape1('ADBE Vector Shape').setValue(shape);
			var shape2 = iconContent.addProperty("ADBE Vector Shape - Group");
			shape = new Shape();
			shape.vertices = [[0.2703857421875, -15.5193634033203], [-15.9010772705078, 0.65220642089844], [0.2703857421875, 16.8237762451172], [16.4420623779297, 0.65220642089844], [0.2703857421875, -15.5193634033203]];
			shape.inTangents = [[0, 0], [0, -8.93150329589844], [-8.93147277832031, 0], [0, 8.93121337890625], [8.93145751953125, 0]];
			shape.outTangents = [[-8.93121337890625, 0], [0, 8.93150329589844], [8.93145751953125, 0], [0, -8.93119812011719], [0, 0]];
			shape.closed = true;
			shape2('ADBE Vector Shape').setValue(shape);
			var shape3 = iconContent.addProperty("ADBE Vector Shape - Group");
			shape = new Shape();
			shape.vertices = [[28.7600555419922, -2.48275756835938], [28.7600555419922, -27.2133636474609], [2.48275756835938, -27.2133636474609], [2.48275756835938, -36], [-2.48275756835938, -36], [-2.48275756835938, -27.2133636474609], [-28.2195281982422, -27.2133636474609], [-28.2195281982422, -2.48275756835938], [-36, -2.48275756835938], [-36, 2.48275756835938], [-28.2195281982422, 2.48275756835938], [-28.2195281982422, 29.7664337158203], [-2.48275756835938, 29.7664337158203], [-2.48275756835938, 36], [2.48275756835938, 36], [2.48275756835938, 29.7664337158203], [28.7600555419922, 29.7664337158203], [28.7600555419922, 2.48275756835938], [36, 2.48275756835938], [36, -2.48275756835938]];
 			shape.inTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
 			shape.outTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			shape.closed = true;
			shape3('ADBE Vector Shape').setValue(shape);
			var shape4 = iconContent.addProperty("ADBE Vector Shape - Group");
			shape = new Shape();
			shape.vertices = [[23.7945251464844, -2.48275756835938], [20.2498931884766, -2.48275756835938], [20.2498931884766, 2.48275756835938], [23.7945251464844, 2.48275756835938], [23.7945251464844, 24.8009185791016], [2.48275756835938, 24.8009185791016], [2.48275756835938, 20.25], [-2.48275756835938, 20.25], [-2.48275756835938, 24.8009185791016], [-23.2539978027344, 24.8009185791016], [-23.2539978027344, 2.48275756835938], [-20.2501220703125, 2.48275756835938], [-20.2501220703125, -2.48275756835938], [-23.2539978027344, -2.48275756835938], [-23.2539978027344, -22.2478485107422], [-2.48275756835938, -22.2478485107422], [-2.48275756835938, -20.25], [2.48275756835938, -20.25], [2.48275756835938, -22.2478485107422], [23.7945251464844, -22.2478485107422]];
			shape.inTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			shape.outTangents = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
			shape.closed = true;
			shape4('ADBE Vector Shape').setValue(shape);
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1).value';
		}
		else if (type == DuAEF.Duik.Bone.BoneTypes.BEND_PIN)
		{
			var shape1 = iconContent.addProperty("ADBE Vector Shape - Group");
			var shape = new Shape();
			shape.vertices = [[24.6918487548828, -32.3074645996094], [27.4668579101563, -34.735595703125], [27.6161193847656, -36.9832763671875], [25.3684844970703, -37.1325988769531], [16.9230041503906, -29.7416839599609], [21.1616668701172, -29.7416839599609], [28.3293762207031, -22.573974609375], [21.1616668701172, -15.4062652587891], [13.9939727783203, -22.573974609375], [12.4011383056641, -24.1667938232422], [10.8083190917969, -22.573974609375], [13.0908355712891, -16.1052703857422], [5.19584655761719, -8.21017456054688], [0.09928894042969, 0.17431640625], [7.99076843261719, -5.744140625], [15.9123687744141, -13.6656799316406], [21.1616668701172, -12.2206268310547], [31.5150299072266, -22.573974609375]];
			shape.inTangents = [[3.97663879394531, 1.44660949707031], [0, 0], [0.57929992675781, 0.661865234375], [0.66340637207031, -0.5802001953125], [0, 0], [0, 0], [0, -3.9525146484375], [3.95243835449219, 0], [0, 3.95249938964844], [0.87956237792969, 0], [0, -0.879638671875], [-1.42462158203125, -1.77384948730469], [0, 0], [0, 0], [0, 0], [0, 0], [-1.9171142578125, 0], [0, 5.70864868164063]];
			shape.outTangents = [[0, 0], [0.66181945800781, -0.57942199707031], [-0.57931518554688, -0.661865234375], [0, 0], [0, 0], [3.95243835449219, 0], [0, 3.95249938964844], [-3.95242309570313, 0], [0, -0.879638671875], [-0.87954711914063, 0], [0, 2.44679260253906], [0, 0], [0, 0], [0, 0], [0, 0], [1.54153442382813, 0.91191101074219], [5.70867919921875, 0], [0, -4.46971130371094]];
			shape.closed = true;
			shape1('ADBE Vector Shape').setValue(shape);
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1).value';
		}
		else if (type == DuAEF.Duik.Bone.BoneTypes.ADVANCED_PIN)
		{
			var shape1 = iconContent.addProperty("ADBE Vector Shape - Group");
			var shape = new Shape();
			shape.vertices = [[36.9113311767578, -21.8011779785156], [22.4264221191406, -36.2860717773438], [26.1573944091797, -38.9977874755859], [29.1459503173828, -41.6127471923828], [29.3066864013672, -44.0333862304688], [26.8860931396484, -44.1941986083984], [20.2904205322266, -38.4219360351563], [17.5042877197266, -36.3568572998047], [34.4856109619141, -19.3755035400391], [34.4856109619141, -12.0968322753906], [27.2068786621094, -12.0968322753906], [10.2255554199219, -29.0781707763672], [10.2255554199219, -36.3568572998047], [7.79981994628906, -38.7825164794922], [7.79981994628906, -26.6525115966797], [15.5674438476563, -18.8851013183594], [6.01890563964844, -9.3365478515625], [0.53018188476563, -0.306884765625], [9.02890014648438, -6.68075561523438], [18.4002380371094, -16.0521545410156], [24.7813110351563, -9.67117309570313], [30.8462371826172, -7.16258239746094], [36.9113311767578, -9.67117309570313]];
			shape.inTangents = [[3.34449768066406, 3.34451293945313], [0, 0], [0, 0], [0, 0], [0.62388610839844, 0.71278381347656], [0.71446228027344, -0.62484741210938], [0, 0], [0, 0], [0, 0], [2.00682067871094, -2.00686645507813], [2.00682067871094, 2.00686645507813], [0, 0], [-2.0068359375, 2.00688171386719], [0, 0], [-3.344482421875, -3.34449768066406], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-2.19621276855469, 0], [-1.67231750488281, 1.67234802246094]];
			shape.outTangents = [[0, 0], [0, 0], [0, 0], [0.71273803710938, -0.62400817871094], [-0.6239013671875, -0.71278381347656], [0, 0], [0, 0], [0, 0], [2.0068359375, 2.00686645507813], [-2.0068359375, 2.00686645507813], [0, 0], [-2.0068359375, -2.00688171386719], [0, 0], [-3.344482421875, 3.34449768066406], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1.67182922363281, 1.67268371582031], [2.19622802734375, 0], [3.34449768066406, -3.34449768066406]];
			shape.closed = true;
			shape1('ADBE Vector Shape').setValue(shape);
			var fill = iconContent.addProperty("ADBE Vector Graphic - Fill");
			fill("ADBE Vector Fill Color").expression = 'effect("Bone")(1).value';
		}


		if (type != DuAEF.Duik.Bone.BoneTypes.TANGENT) iconGroup.transform.scale.expression = '[effect("Bone")(2).value,effect("Bone")(2).value]';
	}

	function createAnchor()
	{
		var anchorGroup = bone("ADBE Root Vectors Group").addProperty("ADBE Vector Group");
		anchorGroup.name = 'Anchor';
		var anchorContent = anchorGroup.property("ADBE Vectors Group");

		var centerCircle = anchorContent.addProperty("ADBE Vector Shape - Ellipse");
		centerCircle("ADBE Vector Ellipse Size").setValue([2,2]);
		var rect = anchorContent.addProperty("ADBE Vector Shape - Rect");
		rect("ADBE Vector Rect Size").setValue([12,12]);
		var stroke = anchorContent.addProperty("ADBE Vector Graphic - Stroke");
		stroke("ADBE Vector Stroke Color").setValue([0,0,0,1]);
	}

	if (type == DuAEF.Duik.Bone.BoneTypes.VERTEX) createAnchor();
	createIcon();
	if (type == DuAEF.Duik.Bone.BoneTypes.PIN || type == DuAEF.Duik.Bone.BoneTypes.BEND_PIN || type == DuAEF.Duik.Bone.BoneTypes.ADVANCED_PIN || type == DuAEF.Duik.Bone.BoneTypes.STANDARD) createAnchor();

	bone.guideLayer = true;

	//group
	DuAEF.Dugr.addLayerToGroup(bone,"Bones");

	bone.quality = LayerQuality.DRAFT;

	bone = new Bone(bone);
	bone.setSize();
	bone.setColor();
	return bone;
}


/**
 * Gets Bones in the comp or the selection.
 * @memberof DuAEF.Duik.Bone
 * @param {CompItem}	comp	- The composition where to get the bones
 * @param {String} name - A name filter
 * @param {boolean} [selectedOnly=false] - Selected layers only
 * @return {Bone|null}	The bones.
 */
DuAEF.Duik.Bone.getBoneByName = function (comp,name,selectedOnly)
{
	if (selectedOnly == undefined) selectedOnly = false;

	var layers = [];
	if (selectedOnly) layers = comp.selectedLayers;
	else layers = comp.layers;

	if (layers.length == 0) return null;

	var it = new Iterator(layers);

	it.do( function (layer)
	{
		if (DuAEF.Duik.isLayerType(layer,DuAEF.Duik.LayerTypes.BONE))
		{
			if (name == layer.name) return new Bone(layer);
		}
	});

	return null;
}

//low-level undocumented function
//creates an effect to control a shape vertex and tangents
DuAEF.Duik.Bone.createShapeControl = function (l,name, fixVertex, fixIn, fixOut)
{
	if (typeof fixVertex === 'undefined') fixVertex = false;
	if (typeof fixIn === 'undefined') fixIn = false;
	if (typeof fixOut === 'undefined') fixOut = false;

	var vertexExp = '//Duik.bone\n' +
		'var l = null;\n' +
		'try {l = thisProperty.propertyGroup()(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexLayer + ')} catch (e) {};\n' +
		'var result = value;\n' +
		'if (l != null) {\n' +
		'result = l.toWorld(l.anchorPoint);\n';
	if (!(l instanceof ShapeLayer)) vertexExp += 'result = fromWorld(result);\n';
	vertexExp +='}\n' +
		'result;';

	var inExp = '//Duik.bone\n' +
		'var l = null;\n' +
		'var fx = thisProperty.propertyGroup();\n' +
		'try {l = fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentLayer + ')} catch (e) {};\n' +
		'var result = value + fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ');\n' +
		'if (l != null) {\n' +
		'result = l.toWorld(l.anchorPoint);\n';
	if (!(l instanceof ShapeLayer)) inExp += 'result = fromWorld(result);\n';
	inExp +='}\n' +
		'result;';

	var outExp = '//Duik.bone\n' +
		'var l = null;\n' +
		'var fx = thisProperty.propertyGroup();\n' +
		'try {l = fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentLayer + ')} catch (e) {};\n' +
		'var result = value + fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ');\n' +
		'if (l != null) {\n' +
		'result = l.toWorld(l.anchorPoint);\n';
	if (!(l instanceof ShapeLayer)) outExp += 'result = fromWorld(result);\n';
	outExp +='}\n' +
		'result;';

	//check if an effect already exists
	var effect = null;

	for (var i = 1; i <= l('ADBE Effect Parade').numProperties ; i++)
	{
		var fx = l('ADBE Effect Parade').property(i);
		if (fx.matchName == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.matchName && fx.name == name)
		{
			effect = fx;
			if (fixVertex) effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint).expression = vertexExp;
			if (fixIn) effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint).expression = inExp;
			if (fixOut) effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint).expression = outExp;
			break;
		}
	}
	if (effect == null)
	{
		effect = DuAEF.Duik.PseudoEffects.SHAPE_LINKER.apply(l);
		//expressions
		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint).expression = vertexExp;

		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint).expression = inExp;

		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint).expression = outExp;

		effect.name = name;
	}
	return effect;
}

//low-level undocumented function
//Creates or gets the existing effect to link a property to a bone.
DuAEF.Duik.Bone.createBoneLinker = function (layer, name)
{
	//check if an effect already exists
	var effect = null;

	for (var i = 1; i <= layer('ADBE Effect Parade').numProperties ; i++)
	{
		var fx = layer('ADBE Effect Parade').property(i);
		if (fx.matchName == DuAEF.Duik.PseudoEffects.BONE_LINKER.matchName && fx.name == name)
		{
			effect = fx;
			break;
		}
	}
	if (effect == null)
	{
		effect = DuAEF.Duik.PseudoEffects.BONE_LINKER.apply(layer);
		effect.name = name;
	}

	return effect;
}

/**
	* Links the shape to bones<br />
	* Works with After Effects CC2018 (15.0) and newer only
	* @param {Property|PropertyInfo} prop - The property
	* @param {float}	[size] - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
	* @param {bool} [tangents=true] - True to create bones for the tangents if prop is a Shape
	* @param {bool} [createBones=true] - True to create bones, false to only create a controller effect
	* @return {Bone[]} The bones created.
*/
DuAEF.Duik.Bone.rigShape = function (prop,size,tangents,createBones)
{
	var bones = [];

	if (typeof createBones === 'undefined') createBones = true;
	if (typeof tangents === 'undefined') tangents = true;

	if (DuAEF.DuAE.App.version.version < 15) return bones;

	if (!Object.isValid(prop)) return bones;

	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}

	try { prop.matchName; } catch (e) {return bones;}

	if (prop.propertyValueType != PropertyValueType.SHAPE)
	{
		return bones;
	}

	var layer = propInfo.layer;
	var comp = layer.containingComp;

	var pathPath = DuAEF.DuAE.Property.getExpressionLink(prop,true);
	var pathPoints = prop.value.vertices;
	var pathInTangents = prop.value.inTangents;
	var pathOutTangents = prop.value.outTangents;

	var verticesCoordinates = DuAEF.DuAE.Property.Bezier.verticesToComp(prop);

	//For each path point
	for (var i = 0; i < pathPoints.length; i++)
	{
		var nullName = 'B | ' + layer.name + " | " + prop.parentProperty.name + " - " + i;

		//add effect
		var effectName = 'B | ' + prop.parentProperty.name + " - " + i;
		var effect = DuAEF.Duik.Bone.createShapeControl(layer,effectName);
		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint).setValue([verticesCoordinates[i][0],verticesCoordinates[i][1]]);
		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint).setValue(pathOutTangents[i]);
		effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint).setValue(pathInTangents[i]);

		if (createBones)
		{

			var newBone = DuAEF.Duik.Bone.getBoneByName(comp,nullName);

			// Get names of nulls that don't exist yet and create them
			if(newBone === null)
			{
				//Create nulls
				newBone = DuAEF.Duik.Bone.createBone(comp,size,DuAEF.Duik.Bone.BoneTypes.VERTEX);
				newBone.layer.name = nullName;
			}

			effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexLayer).setValue(newBone.layer.index);
			bones.push(newBone);
			// Set position using layer space transforms, then remove expressions
			newBone.layer.position.setValue(verticesCoordinates[i]);

			if (tangents)
			{
				var nullNameIn = 'B | ' + layer.name + " | " + prop.parentProperty.name + " | In - " + i;
				var nullNameOut = 'B | ' + layer.name + " | " + prop.parentProperty.name + " | Out - " + i;

				var newBoneIn = DuAEF.Duik.Bone.getBoneByName(comp,nullNameIn);
				var newBoneOut = DuAEF.Duik.Bone.getBoneByName(comp,nullNameOut);

				if (newBoneOut === null)
				{
					var newBoneOut = DuAEF.Duik.Bone.createBone(comp,size,DuAEF.Duik.Bone.BoneTypes.TANGENT);
					newBoneOut.layer.parent = newBone.layer;
					newBoneOut.layer.name = nullNameOut;
					newBoneOut.layer.position.setValue(pathOutTangents[i]);
				}

				if (newBoneIn === null)
				{
					var newBoneIn = DuAEF.Duik.Bone.createBone(comp,size,DuAEF.Duik.Bone.BoneTypes.TANGENT);
					newBoneIn.layer.parent = newBone.layer;
					newBoneIn.layer.name = nullNameIn;
					newBone.layer.moveBefore(newBoneIn.layer);
					newBoneIn.layer.position.setValue(pathInTangents[i]);
				}

				effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentLayer).setValue(newBoneIn.layer.index);
				effect(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentLayer).setValue(newBoneOut.layer.index);

				bones.push(newBoneOut);
			}
		}
	}

	var exp = "";
	if (layer instanceof ShapeLayer) exp = [DuAEF.Duik.expressionIds.SHAPE_LINKER,
		'var origPath = thisProperty;',
		'var origPoints = origPath.points();',
		'var origInTang = origPath.inTangents();',
		'var origOutTang = origPath.outTangents();',
		'var closed = origPath.isClosed();',
		'var fxName = "B | " + origPath.propertyGroup().name;',
		'var numPoints = 0;',
		DuAEF.DuExpression.get(['Matrix','isLayer','getGroupTransformMatrix']),
		'var matrix = getGroupTransformMatrix( thisProperty ).inverse();',
		'',
		'for (var i = 1, num = thisLayer("Effects").numProperties ; i <= num; i++)',
		'{',
		'    var fx = effect(i);',
		'    if (fx.name.indexOf(fxName) == 0)',
		'    {',
		'        origPoints[numPoints] = matrix.applyToPoint( fromWorld(fx( ' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ' )) );',
		'        origInTang[numPoints] = fx( ' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint + ' )-fx( ' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ' );',
		'        origOutTang[numPoints] = fx( ' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint + ' )-fx( ' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ' );',
		'        numPoints++;',
		'    }',
		'}',
		'createPath(origPoints,origInTang,origOutTang,closed);'
		].join('\n');

	else exp = '//Duik.shapeLinker\n' +
		'var origPath = thisProperty;\n' +
		'var origPoints = origPath.points();\n' +
		'var origInTang = origPath.inTangents();\n' +
		'var origOutTang = origPath.outTangents();\n' +
		'var closed = origPath.isClosed();\n' +
		'var fxName = "B | " + origPath.propertyGroup().name;\n' +
		'var numPoints = 0;\n' +
		'for (var i = 1, num = thisLayer("Effects").numProperties ; i <= num; i++)\n' +
		'{\n' +
		'var fx = effect(i);\n' +
		'if (fx.name.indexOf(fxName) == 0)\n' +
		'{\n' +
		'origPoints[numPoints] = fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint + ');\n' +
		'origInTang[numPoints] = fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint + ')-fx(1);\n' +
		'origOutTang[numPoints] = fx(' + DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint + ')-fx(1);\n' +
		'numPoints++;\n' +
		'}\n' +
		'}\n' +
		'createPath(origPoints,origInTang,origOutTang,closed);';

	prop.expression = exp;

	return bones;
}

/**
 * Creates a bone for a vertex or a tangent of a shape, using the corresponding effect set by Duik (DuAEF.Duik.PseudoEffects.SHAPE_LINKER).
 * @param {Property} prop - The property of the DuAEF.Duik.PseudoEffects.SHAPE_LINKER
 * @param {float} size - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
 * @return {Bone} The new bone.
*/
DuAEF.Duik.Bone.addShapeBone = function (prop, size)
{
	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}

	var layer = propInfo.layer;
	var comp = propInfo.comp;

	var parentProp = prop.parentProperty;

	//create bone
	var bone;
	if (prop.propertyIndex == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint || prop.propertyIndex == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint)
	{
		bone = DuAEF.Duik.Bone.createBone(comp, size, DuAEF.Duik.Bone.BoneTypes.TANGENT);
	}
	else
	{
		bone = DuAEF.Duik.Bone.createBone(comp, size, DuAEF.Duik.Bone.BoneTypes.VERTEX);
	}

	//position
	if (layer instanceof ShapeLayer) bone.layer.transform.position.setValue( prop.valueAtTime(0, false) );
	else bone.layer.transform.position.setValue( DuAEF.DuAE.Layer.getWorldPos( layer, prop.valueAtTime(0, false) ) );

	var baseName = DuAEF.Duik.generateName('B',' | ' + layer.name + ' | ' + DuAEF.Duik.removeDuikPrefix( parentProp.name ));

	if (prop.propertyIndex == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint)
	{
		parentProp(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexLayer).setValue(bone.layer.index);
		DuAEF.Duik.Bone.createShapeControl(layer, parentProp.name, true);
		bone.layer.name = baseName;
	}
	else if (prop.propertyIndex == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint)
	{
		parentProp(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentLayer).setValue(bone.layer.index);
		DuAEF.Duik.Bone.createShapeControl(layer, parentProp.name, false, true);
		bone.layer.name = baseName + " | In";
	}
	else if (prop.propertyIndex == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint)
	{
		parentProp(DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentLayer).setValue(bone.layer.index);
		DuAEF.Duik.Bone.createShapeControl(layer, parentProp.name, false, false, true);
		bone.layer.name = baseName + " | Out";
	}

	return bone;
}

/**
 * Adds a bone on a puppet pin
 * @param {PropertyGroup} prop - The puppet pin
 * @param {float} size - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
 * @return {Bone} The new bone.
*/
DuAEF.Duik.Bone.addPinBone = function(prop, size)
{
	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}
	if (typeof prop === 'undefined') return null;

	var layer = propInfo.layer;
	var comp = propInfo.comp;

	//check pin type
	var type = DuAEF.Duik.Bone.BoneTypes.PIN;
	if (prop.position)
	{
		if (!prop.position.canSetExpression) type = DuAEF.Duik.Bone.BoneTypes.BEND_PIN;
		else if (prop.property('ADBE FreePin3 PosPin Rotation')) { if (prop.property('ADBE FreePin3 PosPin Rotation').canSetExpression) type = DuAEF.Duik.Bone.BoneTypes.ADVANCED_PIN; }
	}

	//create bone
	bone = DuAEF.Duik.Bone.createBone(comp, size, type);
	bone.layer.moveBefore(layer);
	//rename bone
	var name = "B | " + layer.name;
	if (prop.parentProperty != undefined)  name += " | " + prop.name;
	if (name.length > 80 && prop.parentProperty != undefined) name = "B | " + prop.name;
	bone.layer.name = DuAEF.DuAE.Comp.newUniqueLayerName(name, comp, false);

	//link properties 
	var effect = DuAEF.Duik.Bone.linkPositionToBone(prop.position, bone.layer, false);
	//fix prop
	prop = propInfo.getProperty();

	if (type == DuAEF.Duik.Bone.BoneTypes.ADVANCED_PIN || type == DuAEF.Duik.Bone.BoneTypes.BEND_PIN)
	{
		prop.property('ADBE FreePin3 PosPin Rotation').expression = '//Duik.bone\n' +
			'var l = null;\n' +
			'try {l = effect("' + effect.name + '")(1)} catch (e) {};\n' +
			'var result = value;\n' +
			'if (l != null) {\n' +
			'result = result + l.transform.rotation.value;\n' +
			'while(l.hasParent)\n' +
			'{\n' +
			'l = l.parent;\n' +
			'result = result + l.transform.rotation.value;\n' +
			'}\n' +
			'}\n' +
			'result;';
		prop.property('ADBE FreePin3 PosPin Scale').expression = '//Duik.bone\n' +
			'var l = null;\n' +
			'function getAverageScale(layer)\n' +
			'{\n' +
			'var s = layer.transform.scale.value;\n' +
			'return (s[0]+s[1])/200;\n' +
			'}\n' +
			'try {l = effect("' + effect.name + '")(1)} catch (e) {};\n' +
			'var result = value;\n' +
			'if (l != null) {\n' +
			'result = result * getAverageScale(l);\n' +
			'while(l.hasParent)\n' +
			'{\n' +
			'l = l.parent;\n' +
			'result = result * getAverageScale(l);\n' +
			'}\n' +
			'}\n' +
			'result;';
	}

	return bone;
}

/**
 * Creates a bone for a multi-dimensionnal property.
 * @param {Property} prop - The property
 * @param {float} size - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
 * @return {Bone} The new bone.
*/
DuAEF.Duik.Bone.addPositionBone = function (prop, size)
{
	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}

	var layer = propInfo.layer;
	var comp = propInfo.comp;

	var parentProp = prop.parentProperty;

	//create bone
	bone = DuAEF.Duik.Bone.createBone(comp, size, DuAEF.Duik.Bone.BoneTypes.STANDARD);
	bone.layer.moveBefore(layer);
	//rename bone
	var name = "B | " + layer.name;
	if (prop.parentProperty != undefined)  name += " | " + prop.parentProperty.name;
	if (name.length > 80 && prop.parentProperty != undefined) name = "B | " + prop.parentProperty.name;
	bone.layer.name = DuAEF.DuAE.Comp.newUniqueLayerName(name, comp, false);

	//link the property to the bone 
	DuAEF.Duik.Bone.linkPositionToBone(prop, bone.layer, false);

	return bone;
}

/**
	* Links the property to a bone. This will automatically detect the type of the property to create the corresponding bones.
	* @param {Property|PropertyInfo} prop - The property
	* @param {float}	[size] - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
	* @param {bool} [tangents=true] - True to create bones for the tangents if prop is a Shape
	* @return {Bone[]} The bones created.
*/
DuAEF.Duik.Bone.addBone = function (prop,size,tangents)
{
	var bones = [];

	if (typeof tangents === 'undefined') tangents = true;

	if (!Object.isValid(prop)) return bones;

	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}

	//Check the type of the property to create the bone 

	if (prop.matchName == 'ADBE FreePin3 PosPin Position') return bones; 
	if (prop.matchName == 'ADBE FreePin3 PosPin Rotation') return bones; 
	if (prop.matchName == 'ADBE FreePin3 PosPin Scale') return bones; 

	//Puppet Pin
	if (prop.matchName == 'ADBE FreePin3 PosPin Atom') if (DuAEF.DuAE.Property.PuppetTool.isRiggable(prop))
	{
		var bone = DuAEF.Duik.Bone.addPinBone(prop,size);
		if (bone != null) bones.push(bone);
		return bones;
	}

	//Shape
	if (prop.propertyValueType == PropertyValueType.SHAPE)
	{
		if ( DuAEF.DuAE.App.version.version < 15) return bones;
		return DuAEF.Duik.Bone.rigShape(prop,size,tangents,true);
	}

	//If not multi-dimensionnal, ignore
	if (prop.propertyValueType != PropertyValueType.TwoD_SPATIAL && prop.propertyValueType != PropertyValueType.ThreeD_SPATIAL && prop.propertyValueType != PropertyValueType.ThreeD  && prop.propertyValueType != PropertyValueType.TwoD)
	{
		return bones;
	}

	//Shape controller Effect
	var parentProp = prop.parentProperty;
	if (parentProp.matchName == DuAEF.Duik.PseudoEffects.SHAPE_LINKER.matchName)
	{
		var bone = DuAEF.Duik.Bone.addShapeBone(prop, size);
		bones.push(bone);
		return bones;
	}

	//Any other multi-dimensionnal property 
	var bone = DuAEF.Duik.Bone.addPositionBone(prop, size);
	bones.push(bone);
	return bones;
}

/**
	* Links the spatial child properties to bones
	* @param {PropertyGroup|PropertyInfo} propertyGroup - The property
	* @param {float}	[size] - The bone size, a percentage. By default, it will adjust automatically depending on comp size and DuAEF.Duik.Bone.sizeHint
	* @param {bool} [tangents=true] - True to create bones for the tangents if prop is a Shape
	* @return {Bone[]} The bones created.
*/
DuAEF.Duik.Bone.addBones = function (propertyGroup, size, tangents)
{
	var propInfo;

	if (propertyGroup instanceof PropertyInfo)
	{
		propInfo = propertyGroup;
		propertyGroup = propInfo.getProperty();
	}
	else propInfo = new PropertyInfo(propertyGroup);

	var bones = [];

	if (propertyGroup.matchName == 'ADBE FreePin3 PosPin Atom') return DuAEF.Duik.Bone.addPinBone(prop,size);
	if (propertyGroup.matchName == 'ADBE FreePin3 PosPin Position') return bones; 
	if (propertyGroup.matchName == 'ADBE FreePin3 PosPin Rotation') return bones; 
	if (propertyGroup.matchName == 'ADBE FreePin3 PosPin Scale') return bones; 

	if (propertyGroup.propertyType == PropertyType.PROPERTY)
	{
		bones.push(DuAEF.Duik.Bone.addBone(propertyGroup,size,tangents));
	}
	else
	{
		for (var i = 1, num = propertyGroup.numProperties; i <= num; i++)
		{
			if (Object.isValid(propertyGroup))
			{
				
				var prop = propertyGroup.property(i);
				bones = bones.concat(DuAEF.Duik.Bone.addBones(prop,size,tangents));
			}
			propertyGroup = propInfo.getProperty();
		}
	}
	
	return bones;
}

/**
 * Gets Bones in the comp or the selection.
 * @memberof DuAEF.Duik.Bone
 * @param {CompItem}	[comp]	- The composition where to get the bones. The active comp if not provided
 * @param {boolean} [selectedOnly=false] - Selected layers only
 * @return {Bone[]}	The bones.
 */
DuAEF.Duik.Bone.getBones = function (comp,selectedOnly)
{
	if (typeof comp === 'undefined') comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return [];
	if (typeof selectedOnly === 'undefined') selectedOnly = false;

	var bones = [];
	//get layers
	var boneLayers = DuAEF.Duik.getLayers(DuAEF.Duik.LayerTypes.BONE,selectedOnly,comp);
	if (boneLayers.length == 0) return bones;
	//convert layers to Controller
	var it = new Iterator(boneLayers);
	it.do(function(layer){
		bones.push(new Bone(layer));
	})
	return bones;
}

/**
	* Links a spatial property to a layer
	* @param {Property|PropertyInfo} prop - The property to link
	* @param {Layer} boneLayer - The parent layer
	* @param {bool} [keepOffset=true] - True to not move the parent layer to the position of the property
	* @return {PropertyGroup} The effect created to link the bone.
*/
DuAEF.Duik.Bone.linkPositionToBone = function (prop, boneLayer, keepOffset)
{
	if (!Object.isValid(prop)) return;
	if (typeof keepOffset === 'undefined') keepOffset = true;

	var propInfo;
	if (prop instanceof PropertyInfo)
	{
		propInfo = prop;
		prop = propInfo.getProperty();
	}
	else
	{
		propInfo = new PropertyInfo(prop);
	}

	if (prop.propertyValueType != PropertyValueType.TwoD_SPATIAL && prop.propertyValueType != PropertyValueType.ThreeD_SPATIAL && prop.propertyValueType != PropertyValueType.ThreeD  && prop.propertyValueType != PropertyValueType.TwoD)
	{
		return;
	}

	var layer = propInfo.layer;
	var comp = propInfo.comp;

	//add effect
	var effectName = 'B | ' + prop.parentProperty.name + ' - ' + prop.propertyIndex;
	var effect = DuAEF.Duik.Bone.createBoneLinker(layer,effectName);

	//fix property
	prop = propInfo.getProperty();

	var originalPos = DuAEF.DuAE.Layer.getWorldPos(boneLayer);

	//move the layer to the prop
	if (!keepOffset) DuAEF.DuAE.Layer.moveLayerToProperty(boneLayer, prop);


	effect(DuAEF.Duik.PseudoEffects.BONE_LINKER.boneLayer).setValue(boneLayer.index);

	//build expression
	var posExp = '';
	if (layer instanceof ShapeLayer)
	{
		posExp = '//Duik.bone\n' +
			'var l = null;\n' +
			'try {l = effect("' + effect.name + '")(1)} catch (e) {};\n' +
			'var result = value;\n' +
			'if (l != null) {\n' +
			'result = l.toWorld(l.anchorPoint);\n';

		if (keepOffset) posExp += 'result = result - ' + originalPos.toSource() + ';\n';

		posExp += '}\n' +
			'result;';
	}
	else
	{
		posExp = '//Duik.bone\n' +
			'var l = null;\n' +
			'try {l = effect("' + effect.name + '")(1)} catch (e) {};\n' +
			'var result = value;\n' +
			'if (l != null) {\n' +
			'result = l.toWorld(l.anchorPoint);\n';

		if (keepOffset) posExp += 'result = result - ' + originalPos.toSource() + ';\n';

		posExp += 'result = fromWorld(result);\n' +
			'}\n' +
			'result;';
	}

	if (prop.canSetExpression) prop.expression = posExp;

	return effect;
}
