/**
 * Duduf ik Tools
 * @author Nicolas Dufresne, Kevin Masson and contributors
 * @copyright 2017,2018 Nicolas Dufresne, Rainbox Productions<br />
 * {@link https://rainboxprod.coop}
 * @namespace
 * @memberof DuAEF
 * @license GPL-3.0 <br />
 * DuAEF is free software: you can redistribute it and/or modify<br />
 * it under the terms of the GNU General Public License as published by<br />
 * the Free Software Foundation, either version 3 of the License, or<br />
 * (at your option) any later version.<br />
 *<br />
 * DuAEF is distributed in the hope that it will be useful,<br />
 * but WITHOUT ANY WARRANTY; without even the implied warranty of<br />
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br />
 * GNU General Public License for more details.<br />
 *<br />
 * You should have received a copy of the GNU General Public License<br />
 * along with DuAEF. If not, see {@link http://www.gnu.org/licenses/}.
 */
DuAEF.Duik = {};

// low-level undocumented method
// Loads pseudo effects and presets
// just before entering runtime
DuAEF.Duik.postInit = function ()
{
    //Load pseudo effect files
    {
        //kleaner
        #include "../pseudoEffects/duik_kleaner.ffx.jsxinc"
        duik_kleaner = new PseudoEffect( duik_kleaner );
        //interpolator
        #include "../pseudoEffects/duik_interpolator.ffx.jsxinc"
        duik_interpolator = new PseudoEffect( duik_interpolator );
        //structures
        #include "../pseudoEffects/duik_structure.ffx.jsxinc"
        duik_structure = new PseudoEffect( duik_structure );
        //list
        #include "../pseudoEffects/duik_1d_list.ffx.jsxinc"
        duik_1d_list = new PseudoEffect( duik_1d_list, 'Pseudo/DUIK 1d list', "List" )
		#include "../pseudoEffects/duik_2d_list.ffx.jsxinc"
        duik_2d_list = new PseudoEffect( duik_2d_list, 'Pseudo/DUIK 2d list', "List" );
		#include "../pseudoEffects/duik_3d_list.ffx.jsxinc"
        duik_3d_list = new PseudoEffect( duik_3d_list, 'Pseudo/DUIK 3d list', "List" );
        //wiggle
        #include "../pseudoEffects/duik_1d_wiggle.ffx.jsxinc"
        duik_1d_wiggle = new PseudoEffect( duik_1d_wiggle, 'Pseudo/DUIK 1d wiggle', "Wiggle" );
		#include "../pseudoEffects/duik_1d_multiwiggle.ffx.jsxinc"
        duik_1d_multiwiggle = new PseudoEffect( duik_1d_multiwiggle, 'Pseudo/DUIK 1d multiwiggle', "Wiggle" );
		#include "../pseudoEffects/duik_2d_wiggle.ffx.jsxinc"
        duik_2d_wiggle = new PseudoEffect( duik_2d_wiggle, 'Pseudo/DUIK 2d wiggle', "Wiggle" );
		#include "../pseudoEffects/duik_3d_wiggle.ffx.jsxinc"
        duik_3d_wiggle = new PseudoEffect( duik_3d_wiggle, 'Pseudo/DUIK 3d wiggle', "Wiggle" );
        //swing
        #include "../pseudoEffects/duik_1d_swing.ffx.jsxinc"
        duik_1d_swing = DuAEF.DuBinary.toFile( duik_1d_swing );
		#include "../pseudoEffects/duik_2d_swing.ffx.jsxinc"
        duik_2d_swing = DuAEF.DuBinary.toFile( duik_2d_swing );
		#include "../pseudoEffects/duik_3d_swing.ffx.jsxinc"
        duik_3d_swing = DuAEF.DuBinary.toFile( duik_3d_swing );
		#include "../pseudoEffects/duik_spatial_swing.ffx.jsxinc"
        duik_spatial_swing = DuAEF.DuBinary.toFile( duik_spatial_swing );
        //Wheel
        #include "../pseudoEffects/duik_wheel.ffx.jsxinc"
        duik_wheel = new PseudoEffect( duik_wheel );
        //Effector
        #include "../pseudoEffects/duik_effector.ffx.jsxinc"
        duik_effector = new PseudoEffect( duik_effector, 'Pseudo/DUIK effector', "Effector" );
		#include "../pseudoEffects/duik_map_effector.ffx.jsxinc"
        duik_map_effector = new PseudoEffect( duik_map_effector );
        //Spring
        #include "../pseudoEffects/duik_1d_spring.ffx.jsxinc"
        duik_1d_spring = DuAEF.DuBinary.toFile( duik_1d_spring );
		#include "../pseudoEffects/duik_multid_spring.ffx.jsxinc"
        duik_multid_spring = DuAEF.DuBinary.toFile( duik_multid_spring );
		#include "../pseudoEffects/duik_spatial_spring.ffx.jsxinc"
        duik_spatial_spring = DuAEF.DuBinary.toFile( duik_spatial_spring );
        //Blink
        #include "../pseudoEffects/duik_1d_blink.ffx.jsxinc"
        duik_1d_blink = DuAEF.DuBinary.toFile( duik_1d_blink );
		#include "../pseudoEffects/duik_2d_blink.ffx.jsxinc"
        duik_2d_blink = DuAEF.DuBinary.toFile( duik_2d_blink );
		#include "../pseudoEffects/duik_3d_blink.ffx.jsxinc"
        duik_3d_blink = DuAEF.DuBinary.toFile( duik_3d_blink );
		#include "../pseudoEffects/duik_color_blink.ffx.jsxinc"
        duik_color_blink = DuAEF.DuBinary.toFile( duik_color_blink );
        //Loop
        #include "../pseudoEffects/duik_looper.ffx.jsxinc"
        duik_looper = new PseudoEffect( duik_looper, 'Pseudo/DUIK looper', "Looper" );
        //Paint Rig
        #include "../pseudoEffects/duik_paint_rig.ffx.jsxinc"
        duik_paint_rig = DuAEF.DuBinary.toFile( duik_paint_rig );
        //Motion Trail
        #include "../pseudoEffects/duik_motion_trail.ffx.jsxinc"
        duik_motion_trail = new PseudoEffect( duik_motion_trail );
        //X-Sheet
        #include "../pseudoEffects/duik_x_sheet.ffx.jsxinc"
        duik_x_sheet = DuAEF.DuBinary.toFile( duik_x_sheet );
        //Controller
        #include "../pseudoEffects/duik_controller.ffx.jsxinc"
        duik_controller = new PseudoEffect( duik_controller );
		#include "../pseudoEffects/duik_ctrl_slider.ffx.jsxinc"
        duik_ctrl_slider = new PseudoEffect( duik_ctrl_slider );
		#include "../pseudoEffects/duik_ctrl_2dslider.ffx.jsxinc"
        duik_ctrl_2dslider = new PseudoEffect( duik_ctrl_2dslider );
		#include "../pseudoEffects/duik_ctrl_angle.ffx.jsxinc"
        duik_ctrl_angle = new PseudoEffect( duik_ctrl_angle );
        //constraints
        #include "../pseudoEffects/duik_orientation.ffx.jsxinc"
        duik_orientation = new PseudoEffect( duik_orientation );
		#include "../pseudoEffects/duik_position.ffx.jsxinc"
        duik_position = new PseudoEffect( duik_position );
		#include "../pseudoEffects/duik_path.ffx.jsxinc"
        duik_path = new PseudoEffect( duik_path );
		#include "../pseudoEffects/duik_parent.ffx.jsxinc"
        duik_parent = new PseudoEffect( duik_parent );
		#include "../pseudoEffects/duik_attachment.ffx.jsxinc"
        duik_attachment = DuAEF.DuBinary.toFile( duik_attachment );
		#include "../pseudoEffects/duik_attachment_options.ffx.jsxinc"
        duik_attachment_options = DuAEF.DuBinary.toFile( duik_attachment_options );
        //bones
        #include "../pseudoEffects/duik_bone.ffx.jsxinc"
        duik_bone = DuAEF.DuBinary.toFile( duik_bone );
		#include "../pseudoEffects/duik_bone_linker.ffx.jsxinc"
        duik_bone_linker = new PseudoEffect( duik_bone_linker, "Pseudo/DUIK bone linker", "Bone" );
		#include "../pseudoEffects/duik_shape_linker.ffx.jsxinc"
        duik_shape_linker = new PseudoEffect( duik_shape_linker, 'Pseudo/DUIK shape linker', "Bone" );
        //connector
        #include "../pseudoEffects/duik_1d_connector.ffx.jsxinc"
        duik_1d_connector = new PseudoEffect( duik_1d_connector, 'Pseudo/DUIK 1d connector', "Connector" );
		#include "../pseudoEffects/duik_2d_connector.ffx.jsxinc"
        duik_2d_connector = new PseudoEffect( duik_2d_connector, 'Pseudo/DUIK 2d connector', "Connector" );
		#include "../pseudoEffects/duik_3d_connector.ffx.jsxinc"
        duik_3d_connector = new PseudoEffect( duik_3d_connector, 'Pseudo/DUIK 3d connector', "Connector" );
		#include "../pseudoEffects/duik_color_connector.ffx.jsxinc"
        duik_color_connector = new PseudoEffect( duik_color_connector, 'Pseudo/DUIK color connector', "Connector" );
		#include "../pseudoEffects/duik_quick_connector.ffx.jsxinc"
        duik_quick_connector = new PseudoEffect( duik_quick_connector, 'Pseudo/DUIK quick connector', "Connector" );
        //expose transform
        #include "../pseudoEffects/duik_expose_transform.ffx.jsxinc"
        duik_expose_transform = new PseudoEffect( duik_expose_transform );
        //ik
        #include "../pseudoEffects/duik_1layer_ik.ffx.jsxinc"
        duik_1layer_ik = new PseudoEffect( duik_1layer_ik, 'Pseudo/DUIK 1layer ik', "IK" );
		#include "../pseudoEffects/duik_2layer_ik.ffx.jsxinc"
        duik_2layer_ik = new PseudoEffect( duik_2layer_ik, 'Pseudo/DUIK 2layer ik', "IK" );
		#include "../pseudoEffects/duik_3layer_ik.ffx.jsxinc"
        duik_3layer_ik = new PseudoEffect( duik_3layer_ik, 'Pseudo/DUIK 3layer ik', "IK" );
		#include "../pseudoEffects/duik_bezier_ik.ffx.jsxinc"
        duik_bezier_ik = DuAEF.DuBinary.toFile( duik_bezier_ik );
		#include "../pseudoEffects/duik_bezier_ik_curve.ffx.jsxinc"
        duik_bezier_ik_curve = new PseudoEffect( duik_bezier_ik_curve, 'Pseudo/DUIK bezier ik curve', "Bezier IK" );
		#include "../pseudoEffects/duik_bezier_ik_layer.ffx.jsxinc"
        duik_bezier_ik_layer = DuAEF.DuBinary.toFile( duik_bezier_ik_layer );
		#include "../pseudoEffects/duik_ik.ffx.jsxinc"
        duik_ik = DuAEF.DuBinary.toFile( duik_ik );
		#include "../pseudoEffects/duik_fk_overlap.ffx.jsxinc"
        duik_fk_overlap = DuAEF.DuBinary.toFile( duik_fk_overlap );
        //cameras
        #include "../pseudoEffects/duik_2d_camera.ffx.jsxinc"
        duik_2d_camera = new PseudoEffect( duik_2d_camera, 'Pseudo/DUIK 2d camera', "2D Camera" );
        //autorig
        #include "../pseudoEffects/duik_foot_roll.ffx.jsxinc"
        duik_foot_roll = new PseudoEffect( duik_foot_roll, 'Pseudo/DUIK foot roll', "Foot roll" );
		#include "../pseudoEffects/duik_digi_foot_roll.ffx.jsxinc"
        duik_digi_foot_roll = DuAEF.DuBinary.toFile( duik_digi_foot_roll );
		#include "../pseudoEffects/duik_shoulder.ffx.jsxinc"
        duik_shoulder = DuAEF.DuBinary.toFile( duik_shoulder );
		#include "../pseudoEffects/duik_side.ffx.jsxinc"
        duik_side = DuAEF.DuBinary.toFile( duik_side );
        //walk cycle
        #include "../pseudoEffects/duik_rigged_walk_cycle_2.ffx.jsxinc"
        duik_rigged_walk_cycle_2 = DuAEF.DuBinary.toFile( duik_rigged_walk_cycle_2 );
        //blender
        #include "../pseudoEffects/duik_blender.ffx.jsxinc"
        duik_blender = new PseudoEffect( duik_blender, 'Pseudo/DUIK blender', "Animation Blender" );
        //separate dimensions
        #include "../pseudoEffects/duik_2dimensions.ffx.jsxinc"
        duik_2dimensions = new PseudoEffect( duik_2dimensions, 'Pseudo/DUIK 2dimensions', "Point" );
		#include "../pseudoEffects/duik_2dimensions_scale.ffx.jsxinc"
        duik_2dimensions_scale = new PseudoEffect( duik_2dimensions_scale, 'Pseudo/DUIK 2dimensions scale', "Scale" );
		#include "../pseudoEffects/duik_2dimensions_angle.ffx.jsxinc"
        duik_2dimensions_angle = new PseudoEffect( duik_2dimensions_angle, 'Pseudo/DUIK 2dimensions angle', "Angle" );
		#include "../pseudoEffects/duik_3dimensions.ffx.jsxinc"
        duik_3dimensions = new PseudoEffect( duik_3dimensions, 'Pseudo/DUIK 3dimensions', "Point" );
		#include "../pseudoEffects/duik_3dimensions_scale.ffx.jsxinc"
        duik_3dimensions_scale = new PseudoEffect( duik_3dimensions_scale, 'Pseudo/DUIK 3dimensions scale', "Scale" );
		#include "../pseudoEffects/duik_3dimensions_angle.ffx.jsxinc"
        duik_3dimensions_angle = new PseudoEffect( duik_3dimensions_angle, 'Pseudo/DUIK 3dimensions angle', "Angle" );
		#include "../pseudoEffects/duik_color.ffx.jsxinc"
        duik_color = new PseudoEffect( duik_color, 'Pseudo/Duik color', "Color" );
        //limbs pseudo effects
        #include "../pseudoEffects/duik_limbs_eyes_rigged.ffx.jsxinc"
        duik_limbs_eyes_rigged = DuAEF.DuBinary.toFile( duik_limbs_eyes_rigged );
		#include "../pseudoEffects/duik_limbs_fingers.ffx.jsxinc"
        duik_limbs_fingers = DuAEF.DuBinary.toFile( duik_limbs_fingers );
		#include "../pseudoEffects/duik_limbs_hand_rigged.ffx.jsxinc"
        duik_limbs_hand_rigged = DuAEF.DuBinary.toFile( duik_limbs_hand_rigged );
		#include "../pseudoEffects/duik_limbs_head.ffx.jsxinc"
        duik_limbs_head = DuAEF.DuBinary.toFile( duik_limbs_head );
    }

    /**
     * The pseudo effects contain all needed property indices from the corresponding effect in After Effects,<br />
     * as attributes named after their display name in Ae.
     * @example
     * alert(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckBox); // 2
     * alert(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperAngle); // 10
     * @enum {PseudoEffect}
     * @readonly
     */
    DuAEF.Duik.PseudoEffects = {
        //kleaner
        KLEANER: duik_kleaner,
        //interpolator
        INTERPOLATOR: duik_interpolator,
        //walk ycle
        WALK_CYCLE: duik_rigged_walk_cycle_2,
        //autorig
        SIDE: duik_side,
        FOOT_ROLL: duik_foot_roll,
        DIGI_FOOT_ROLL: duik_digi_foot_roll,
        SHOULDER: duik_shoulder,
        //camera
        TWOD_CAMERA: duik_2d_camera,
        FRAME: duframe,
        //ik
        ONELAYER_IK: duik_1layer_ik,
        TWOLAYER_IK: duik_2layer_ik,
        THREELAYER_IK: duik_3layer_ik,
        BEZIER_IK: duik_bezier_ik,
        BEZIER_IK_CURVE: duik_bezier_ik_curve,
        BEZIER_IK_LAYER: duik_bezier_ik_layer,
        IK: duik_ik,
        FK_OVERLAP: duik_fk_overlap,
        //connector
        ONED_CONNECTOR: duik_1d_connector,
        TWOD_CONNECTOR: duik_2d_connector,
        THREED_CONNECTOR: duik_3d_connector,
        COLOR_CONNECTOR: duik_color_connector,
        QUICK_CONNECTOR: duik_quick_connector,
        //expose transform
        EXPOSE_TRANSFORM: duik_expose_transform,
        //bones
        BONE: duik_bone,
        BONE_LINKER: duik_bone_linker,
        SHAPE_LINKER: duik_shape_linker,
        //constraints
        ATTACHMENT_OPTIONS: duik_attachment_options,
        ATTACHMENT: duik_attachment,
        PARENT: duik_parent,
        PATH: duik_path,
        POSITION: duik_position,
        ORIENTATION: duik_orientation,
        //Controller
        CONTROLLER: duik_controller,
        CONTROLLER_SLIDER: duik_ctrl_slider,
        CONTROLLER_DOUBLE_SLIDER: duik_ctrl_2dslider,
        CONTROLLER_ANGLE: duik_ctrl_angle,
        //X-Sheet
        X_SHEET: duik_x_sheet,
        //Motion trail
        MOTION_TRAIL: duik_motion_trail,
        //Paint Rig
        PAINT_RIG: duik_paint_rig,
        //Blink
        COLOR_BLINK: duik_color_blink,
        ONED_BLINK: duik_1d_blink,
        TWOD_BLINK: duik_2d_blink,
        THREED_BLINK: duik_3d_blink,
        //Spring
        ONED_SPRING: duik_1d_spring,
        MULTID_SPRING: duik_multid_spring,
        SPATIAL_SPRING: duik_spatial_spring,
        //Effector
        EFFECTOR: duik_effector,
        MAP_EFFECTOR: duik_map_effector,
        //Wheel
        WHEEL: duik_wheel,
        //Swing
        ONED_SWING: duik_1d_swing,
        SPATIAL_SWING: duik_spatial_swing,
        TWOD_SWING: duik_2d_swing,
        THREED_SWING: duik_3d_swing,
        //wiggle
        ONED_WIGGLE: duik_1d_wiggle,
        ONED_MULTIWIGGLE: duik_1d_multiwiggle,
        TWOD_WIGGLE: duik_2d_wiggle,
        THREED_WIGGLE: duik_3d_wiggle,
        //looper
        LOOPER: duik_looper,
        //list
        ONED_LIST: duik_1d_list,
        TWOD_LIST: duik_2d_list,
        THREED_LIST: duik_3d_list,
        //structures
        STRUCTURE: duik_structure,
        //blender
        BLENDER: duik_blender,
        //separate dimensions
        TWO_DIMENSIONS: duik_2dimensions,
        TWO_DIMENSIONS_SCALE: duik_2dimensions_scale,
        TWO_DIMENSIONS_ANGLE: duik_2dimensions_angle,
        THREE_DIMENSIONS: duik_3dimensions,
        THREE_DIMENSIONS_SCALE: duik_3dimensions_scale,
        THREE_DIMENSIONS_ANGLE: duik_3dimensions_angle,
        COLOR: duik_color,
        //limbs
        EYES: duik_limbs_eyes_rigged,
        FINGERS: duik_limbs_fingers,
        HAND: duik_limbs_hand_rigged,
        HEAD: duik_limbs_head
    };

    //Pseudo Effects INDICES

    //separate dimensions
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS.xSlider = 1;
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS.ySlider = 2;
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS_SCALE.xSlider = 1;
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS_SCALE.ySlider = 2;
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS_ANGLE.xSlider = 1;
    DuAEF.Duik.PseudoEffects.TWO_DIMENSIONS_ANGLE.ySlider = 2;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS.xSlider = 1;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS.ySlider = 2;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS.zSlider = 3;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_SCALE.xSlider = 1;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_SCALE.ySlider = 2;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_SCALE.zSlider = 3;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_ANGLE.xSlider = 1;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_ANGLE.ySlider = 2;
    DuAEF.Duik.PseudoEffects.THREE_DIMENSIONS_ANGLE.zSlider = 3;
    DuAEF.Duik.PseudoEffects.COLOR.xSlider = 2;
    DuAEF.Duik.PseudoEffects.COLOR.ySlider = 3;
    DuAEF.Duik.PseudoEffects.COLOR.zSlider = 4;
    DuAEF.Duik.PseudoEffects.COLOR.channelsPopup = 1;

    //cameras
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.horizontalPanSlider = 1;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.verticalPanSlider = 2;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.zoomSlider = 3;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.truckSlider = 4;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.tiltAngle = 5;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.typePopup = 11;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.generalAmplitudeSlider = 13;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.generalFrequencySlider = 14;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.shakeAmplitudeSlider = 17;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.shakeFrequencySlider = 18;
    DuAEF.Duik.PseudoEffects.TWOD_CAMERA.randomSeedSlider = 21;

    //wiggle
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.amplitudeSlider = 1;
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.frequencySlider = 2;
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.loopSlider = 3;
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.complexitySlider = 5;
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.multiplierSlider = 6;
    DuAEF.Duik.PseudoEffects.ONED_WIGGLE.randomSeedSlider = 7;

    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.amplitudeSlider = 1;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.frequencySlider = 2;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.loopSlider = 3;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.linkDimensionsCheckbox = 4;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.complexitySlider = 6;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.multiplierSlider = 7;
    DuAEF.Duik.PseudoEffects.ONED_MULTIWIGGLE.randomSeedSlider = 8;

    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.xAmplitudeSlider = 2;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.xFrequencySlider = 3;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.yAmplitudeSlider = 6;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.yFrequencySlider = 7;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.loopSlider = 9;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.complexitySlider = 11;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.multiplierSlider = 12;
    DuAEF.Duik.PseudoEffects.TWOD_WIGGLE.randomSeedSlider = 13;

    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.xAmplitudeSlider = 2;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.xFrequencySlider = 3;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.yAmplitudeSlider = 6;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.yFrequencySlider = 7;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.zAmplitudeSlider = 10;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.zFrequencySlider = 11;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.loopSlider = 13;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.complexitySlider = 15;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.multiplierSlider = 16;
    DuAEF.Duik.PseudoEffects.THREED_WIGGLE.randomSeedSlider = 17;
    //1-layer IK
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox = 1;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.weightSlider = 2;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle = 3;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.parentCheckbox = 5;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.rotationLimitCheckbox = 6;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.layerPopup = 9;
    DuAEF.Duik.PseudoEffects.ONELAYER_IK.drawGuidesCheckbox = 12;
    //2-layer IK
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox = 1;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckbox = 2;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.followThroughCheckbox = 4;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.fkAngle = 6;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.flexibilitySlider = 7;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.resistanceSlider = 8;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperAngle = 11;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerAngle = 12;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalAngle = 13;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.parentRotationCheckbox = 15;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.autoStretchCheckbox = 18;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.stretchSlider = 19;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.autoShrinkSlider = 20;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.fullRotationLimitAngle = 23;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLayer = 27;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLayer = 28;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalLayer = 29;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperStretchSlider = 32;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperScaleSlider = 33;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerStretchSlider = 34;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerScaleSlider = 35;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalPositionPoint = 36;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalWorldPositionPoint = 37;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLengthSlider = 40;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLengthSlider = 41;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikLengthSlider = 42;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.straightCheckbox = 44;
    DuAEF.Duik.PseudoEffects.TWOLAYER_IK.drawGuidesCheckbox = 47;
    //3-layer IK
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.ikCheckbox = 1;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.reverseCheckbox = 2;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.followThroughCheckbox = 4;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.fkAngle = 6;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.flexibilitySlider = 7;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.resistanceSlider = 8;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.upperAngle = 11;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.middleAngle = 12;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.lowerAngle = 13;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.goalAngle = 14;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.parentRotationCheckbox = 16;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.autoStretchCheckbox = 19;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.stretchSlider = 20;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.autoShrinkSlider = 21;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.fullRotationLimitAngle = 24;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.upperLayer = 28;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.middleLayer = 29;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.lowerLayer = 30;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.goalLayer = 31;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.upperStretchSlider = 34;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.middleStretchSlider = 35;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.lowerStretchSlider = 36;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.stretchScaleSlider = 37;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.goalPositionPoint = 38;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.goalWorldPositionPoint = 39;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.upperLengthSlider = 42;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.middleLengthSlider = 43;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.lowerLengthSlider = 44;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.ikLengthSlider = 45;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.straightCheckbox = 47;
    DuAEF.Duik.PseudoEffects.THREELAYER_IK.drawGuidesCheckbox = 50;
    //Bezier IK
    DuAEF.Duik.PseudoEffects.BEZIER_IK_CURVE.drawGuidesCheckbox = 1;
    DuAEF.Duik.PseudoEffects.BEZIER_IK_CURVE.showHandlesCheckbox = 2;
    DuAEF.Duik.PseudoEffects.BEZIER_IK_CURVE.rootLayer = 4;
    DuAEF.Duik.PseudoEffects.BEZIER_IK_CURVE.curveLayer = 5;
    DuAEF.Duik.PseudoEffects.BEZIER_IK_CURVE.endLayer = 6;
    //Foot roll
    DuAEF.Duik.PseudoEffects.FOOT_ROLL.toesAngle = 1;
    DuAEF.Duik.PseudoEffects.FOOT_ROLL.tipToeAngle = 2;
    DuAEF.Duik.PseudoEffects.FOOT_ROLL.heelAngle = 3;
    DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle = 4;
    //Looper
    DuAEF.Duik.PseudoEffects.LOOPER.inCheckbox = 2;
    DuAEF.Duik.PseudoEffects.LOOPER.inTypePopup = 3;
    DuAEF.Duik.PseudoEffects.LOOPER.inNumKeyframesSlider = 4;
    DuAEF.Duik.PseudoEffects.LOOPER.outCheckbox = 7;
    DuAEF.Duik.PseudoEffects.LOOPER.outTypePopup = 8;
    DuAEF.Duik.PseudoEffects.LOOPER.outNumKeyframesSlider = 9;
    //Bone Linker
    DuAEF.Duik.PseudoEffects.BONE_LINKER.boneLayer = 1;
    DuAEF.Duik.PseudoEffects.BONE_LINKER.boneColor = 2;
    //Shape Linker
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexPoint = 1;
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentPoint = 3;
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentPoint = 4;
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.vertexLayer = 7;
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.inTangentLayer = 8;
    DuAEF.Duik.PseudoEffects.SHAPE_LINKER.outTangentLayer = 9;
    //Effector
    DuAEF.Duik.PseudoEffects.EFFECTOR.innerLimitSlider = 1;
    DuAEF.Duik.PseudoEffects.EFFECTOR.outerLimitSlider = 2;
    DuAEF.Duik.PseudoEffects.EFFECTOR.modePopup = 3;
    DuAEF.Duik.PseudoEffects.EFFECTOR.typePopup = 5;
    DuAEF.Duik.PseudoEffects.EFFECTOR.reverseCheckbox = 6;
    //Blender
    DuAEF.Duik.PseudoEffects.BLENDER.loopCheckbox = 1;
    DuAEF.Duik.PseudoEffects.BLENDER.blendingCheckbox = 3;
    DuAEF.Duik.PseudoEffects.BLENDER.durationSlider = 4;
    DuAEF.Duik.PseudoEffects.BLENDER.interpolationPopup = 5;
    //Connector
    DuAEF.Duik.PseudoEffects.ONED_CONNECTOR.connexionModePopup = 1;
    DuAEF.Duik.PseudoEffects.ONED_CONNECTOR.minimumSlider = 2;
    DuAEF.Duik.PseudoEffects.ONED_CONNECTOR.maximumSlider = 3;
    DuAEF.Duik.PseudoEffects.TWOD_CONNECTOR.connexionModePopup = 1;
    DuAEF.Duik.PseudoEffects.TWOD_CONNECTOR.minimumSlider = 2;
    DuAEF.Duik.PseudoEffects.TWOD_CONNECTOR.maximumSlider = 3;
    DuAEF.Duik.PseudoEffects.TWOD_CONNECTOR.axisPopup = 4;
    DuAEF.Duik.PseudoEffects.THREED_CONNECTOR.connexionModePopup = 1;
    DuAEF.Duik.PseudoEffects.THREED_CONNECTOR.minimumSlider = 2;
    DuAEF.Duik.PseudoEffects.THREED_CONNECTOR.maximumSlider = 3;
    DuAEF.Duik.PseudoEffects.THREED_CONNECTOR.axisPopup = 4;
    DuAEF.Duik.PseudoEffects.COLOR_CONNECTOR.connexionModePopup = 1;
    DuAEF.Duik.PseudoEffects.COLOR_CONNECTOR.minimumSlider = 2;
    DuAEF.Duik.PseudoEffects.COLOR_CONNECTOR.maximumSlider = 3;
    DuAEF.Duik.PseudoEffects.COLOR_CONNECTOR.axisPopup = 4;
    DuAEF.Duik.PseudoEffects.QUICK_CONNECTOR.connectorSlider = 1;

    /**
     * The pseudo effects match names
     * @enum {string}
     * @readonly
     */
    DuAEF.Duik.PseudoEffectsMatchNames = {
        //walk cycle
        WALK_CYCLE: "Pseudo/DUIK walk cycle 2",
        //autorig
        SIDE: "Pseudo/DUIK side",
        DIGI_FOOT_ROLL: "Pseudo/DUIK digi foot roll",
        SHOULDER: "Pseudo/DUIK shoulder",
        //ik
        BEZIER_IK: "Pseudo/DUIK bezier ik",
        BEZIER_IK_LAYER: "Pseudo/DUIK bezier ik layer",
        IK: "Pseudo/DUIK ik",
        FK_OVERLAP: "Pseudo/DUIK fk overlap",
        //bones
        BONE: "Pseudo/DUIK bone",
        //constraints
        ATTACHMENT_OPTIONS: "Pseudo/DUIK attachment options",
        ATTACHMENT: "Pseudo/DUIK attachment",
        //X-Sheet
        X_SHEET: "Pseudo/DUIK x sheet",
        //Paint Rig
        PAINT_RIG: "Pseudo/DUIK paint rig",
        //Blink
        COLOR_BLINK: "Pseudo/DUIK color blink",
        ONED_BLINK: "Pseudo/DUIK 1d blink",
        TWOD_BLINK: "Pseudo/DUIK 2d blink",
        THREED_BLINK: "Pseudo/DUIK 3d blink",
        //Spring
        ONED_SPRING: "Pseudo/DUIK 1d spring",
        MULTID_SPRING: "Pseudo/DUIK multid spring",
        SPATIAL_SPRING: "Pseudo/DUIK spatial spring",
        //Wheel
        WHEEL: "Pseudo/DUIK wheel",
        //Swing
        ONED_SWING: "Pseudo/DUIK 1d swing",
        SPATIAL_SWING: "Pseudo/DUIK spatial swing",
        TWOD_SWING: "Pseudo/DUIK 2d swing",
        THREED_SWING: "Pseudo/DUIK 3d swing"
    };

    //Load preset files
    {
        //camera
        #include "../pseudoEffects/duframe.ffx.jsxinc"
        duframe = DuAEF.DuBinary.toFile( duframe );
    }

    /**
     * The presets used by Duik.
     * @enum {File}
     * @readonly
     */
    DuAEF.Duik.Presets = {
        FRAME: duframe
    }

    if ( DuAEF.Duik.Structure ) DuAEF.Duik.Structure.postInit();
    if ( DuAEF.Duik.Controller ) DuAEF.Duik.Controller.postInit();
}

/**
 * The different types of layers created by Duik
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.LayerTypes = {
    MOTION_TRAIL: 'motionTrail',
    STRUCTURE: 'structure',
    X_SHEET: 'xSheet',
    CEL: 'cel',
    EFFECTOR: 'effector',
    CONTROLLER: 'controller',
    TWOD_CAMERA_LAYER: '2dCameraLayer',
    ZERO: 'zero',
    BONE: 'bone',
    NULL: 'null',
    LOCATOR: 'locator',
	CONNECTOR: 'connector'
}

//undocumented low-level enum used by Duik
DuAEF.Duik.MarkerParameters = {
    AUTORIG_ELEMENT: "autorigElementType",
    AUTORIG_ANIMAL_TYPE: "autorigAnimalType",
    AUTORIG_ELEMENT_NUMBER: "autorigElementNumber",
    AUTORIG_LIMB: 'autorigLimb',
    AUTORIG_ID: 'autorigId',
    STRUCTURE_ID: 'structureId',
    CONTROLLER_ID: 'controllerId',
    CONTROLLER_TYPE: 'controllerType',
    SIDE: 'side',
    LINKEDTOCOMP: 'linkedToComp',
    LINKEDTOLAYER: 'linkedToLayer',
    LINKED_THROUGH_MP: 'linkedThroughMP'
}

/**
 * Predefined sizes
 * @enum {int}
 * @readonly
 */
DuAEF.Duik.Sizes = {
    SMALL: 0,
    MEDIUM: 1,
    LARGE: 2,
    CUSTOM: 3
}

//undocumented low-level enum used by Duik
//the ids of the expressions
DuAEF.Duik.expressionIds = {
    LINK: '//Duik.link',
    KLEANER: '//Duik.kleaner',
    PARENT: '//Duik.parentConstraint',
    POSITION: '//Duik.positionConstraint',
    ORIENTATION: '//Duik.orientationConstraint',
    PATH: '//Duik.pathConstraint',
    STRUCTURE: '//Duik.structure',
    MOTION_TRAIL: '//Duik.motionTrail',
    AUTORIG_HEAD: '//Duik.autorig.head',
    IK_GOAL: '//Duik.goal',
    SHAPE_LINKER: '//Duik.shapeLinker',
    BLINK: '//Duik.blink',
    LOCATOR: '//Duik.locator',
    CAMERA_2D: '//Duik.twoDCamera',
    INTERPOLATOR: '//Duik.interpolator'
}

//undocumented low-level function used by Duik
//checks the type of an expression 
DuAEF.Duik.getExpressionId = function ( expression ) {
    return expression.split('\n')[0].replace('\r','');
}

//undocumented low-level function used by Duik
//checks the type of an expression 
DuAEF.Duik.isExpressionId = function ( expression, id ) {
    return DuAEF.Duik.getExpressionId(expression) == id;
}

/**
 * Sets a new marker on the first frame of the layer, specifying the "Duik type" of the layer.<br />
 * These markers are used by Duik and Dugr to recognise and manipulate the layers, or to store hidden data.
 * @param {Layer} layer - The layer to set the marker on.
 * @param {string} displayName - The name to display on the marker (the comment of the marker)
 * @param {DuAEF.Duik.LayerTypes} layerType - The type
 */
DuAEF.Duik.setDuikMarker = function( layer, displayName, layerType )
{
    if ( layerType == undefined ) layerType = displayName.toLowerCase();
    var marker = layer.property( 'ADBE Marker' ).valueAtTime( 0, true );
    marker.comment = displayName;
    var params = marker.getParameters();
    params.duik = layerType;
    marker.setParameters( params );
    layer.property( 'ADBE Marker' ).setValueAtTime( 0, marker );
}

//undocumented low-level function used by Duik
DuAEF.Duik.getDuikMarker = function( layer )
{
    if ( !layer ) return null;
    var markerProp = layer.property( 'ADBE Marker' );
    for ( var i = 1, num = markerProp.numKeys; i <= num; i++ )
    {
        var marker = markerProp.keyValue( i );
        var params = marker.getParameters();
        if ( params.duik ) return marker;
    }
    return null;
}

//undocumented low-level function used by Duik
DuAEF.Duik.getDuikMarkerParameters = function( layer )
{
    var marker = DuAEF.Duik.getDuikMarker( layer );
    if ( !marker ) return null;
    return marker.getParameters();
}

//undocumented low-level function used by Duik
DuAEF.Duik.setDuikMarkerParameter = function( layer, name, key )
{
    if (layer instanceof Controller) layer = layer.layer;
    var markerProp = layer.property( 'ADBE Marker' );
    for ( var i = 1, num = markerProp.numKeys; i <= num; i++ )
    {
        var marker = markerProp.keyValue( i );
        var params = marker.getParameters();
        if ( params.duik )
        {
            params[ name ] = key;
            marker.setParameters( params );
            layer.property( 'ADBE Marker' ).setValueAtTime( markerProp.keyTime( i ), marker );
        }
    }
}

/**
 * Gets layers previously created by Duik
 * @memberof DuAEF.Duik
 * @param {DuAEF.Duik.LayerTypes} [layerType] - The type of the layer.
 * @param {boolean} [selectedOnly=false] - Wether to search only in the layer selection
 * @param {CompItem} [comp] - The composition
 * @return {Layer[]}	The Structure or null if there is no active composition
 */
DuAEF.Duik.getLayers = function( layerType, selectedOnly, comp )
{
    if ( layerType == undefined ) layerType = '';
    if ( comp == undefined ) comp = DuAEF.DuAE.Project.getActiveComp();
    if ( selectedOnly == undefined ) selectedOnly = false;

    var layers = comp.layers;
    if ( selectedOnly ) layers = comp.selectedLayers;

    if ( layers.length == 0 ) return [];

    var it = new Iterator( layers );
    var found = [];
    it.do( function( layer )
    {
        var params = DuAEF.Duik.getDuikMarkerParameters( layer );
        if ( !params ) return;
        if ( layerType == '' || params.duik == layerType ) found.push( layer );
    } );

    return found;
}

/**
 * Gets the first layer of a kind previously created by Duik
 * @memberof DuAEF.Duik
 * @param {DuAEF.Duik.LayerTypes} layerType - The type of the layer.
 * @param {boolean} [selectedOnly=false] - Wether to search only in the layer selection
 * @param {CompItem} [comp] - The composition
 * @return {Layer|null}	The Structure or null if there is no active composition
 */
DuAEF.Duik.getLayer = function( layerType, selectedOnly, comp )
{
    if ( typeof comp === 'undefined' ) comp = DuAEF.DuAE.Project.getActiveComp();
    if ( typeof selectedOnly === 'undefined' ) selectedOnly = false;

    var layers = comp.layers;
    if ( selectedOnly ) layers = comp.selectedLayers;

    if ( layers.length == 0 ) return null;

    var it = new Iterator( layers );
    while ( layer = it.next() )
    {
        var params = DuAEF.Duik.getDuikMarkerParameters( layer );
        if ( !params ) continue;
        if ( params.duik == layerType ) return layer;
    }
    return null;
}

//low-level undocumented function
DuAEF.Duik.getLayerType = function( layer )
{
    var params = DuAEF.Duik.getDuikMarkerParameters( layer );
    if ( !params ) return '';
    return params.duik;
}

/**
 * Checks if the layer is one of the types created by duik.
 * @param {Layer} layer - The layer to check
 * @param {DuAEF.Duik.LayerTypes} layerType - The type of layer
 * @return {boolean}
 */
DuAEF.Duik.isLayerType = function( layer, layerType )
{
    return DuAEF.Duik.getLayerType( layer ) == layerType;
}

//low-level undocumented function
DuAEF.Duik.removeDuikPrefix = function( name )
{
    var newName = name;
    if ( newName.indexOf( ' | ' ) >= 0 ) newName = name.slice( name.indexOf( ' | ' ) + 3 );
    if ( newName.indexOf( '_' ) == 1 || newName.indexOf( ' ' ) == 1 ) newName = newName.substring( 2 );
    return newName;
}

//low-level undocumented function
DuAEF.Duik.generateName = function( prefix, name )
{
    var newName = DuAEF.Duik.removeDuikPrefix( name );
    if ( prefix != '' ) newName = prefix + ' | ' + newName;
    return newName;
}

#include DuikAnimationLib.jsxinc

#include DuikAutomationLib.jsxinc

#include DuikAutorigLib.jsxinc

#include DuikBoneLib.jsxinc

#include DuikCameraLib.jsxinc

#include DuikControllerLib.jsxinc

#include DuikRiggingLib.jsxinc

#include DuikStructuresLib.jsxinc
