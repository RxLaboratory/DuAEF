/**
 * Application related methods
 * @namespace
 * @memberof DuAEF.DuAE
 */
DuAEF.DuAE.App = {};

/**
 * Informations about the version of after effects.
 * @type {DuVersion}
 * @readonly
 */
DuAEF.DuAE.App.version = new DuVersion( app.version );

/**
 * Has scripting file and network authorization
 * @readonly
 * @type {boolean}
 */
DuAEF.DuAE.App.hasFilesAndNetworkAccess = app.preferences.getPrefAsLong( "Main Pref Section", "Pref_SCRIPTING_FILE_NETWORK_SECURITY" ) == 1;

/**
 * Asks the user to check the file and network security pref if not already set.
 * Opens the general prefrences of After Effects.
 * @memberof DuAEF.DuAE.App
 * @param {boolean}	[showAlert=true]	- Wether to display an alert before opening the preferences
 * @param {string}	[message=The Duduf After Effects scripting framework needs to be allowed to write files\nPlease, check the box called 'Allow Scripts to write files...' in the general preferences of After Effects.]	- The message to display in the alert.
 * @return {boolean}	Wether the preference has been set
 */
DuAEF.DuAE.App.askFilesAndNetworkAccess = function ( showAlert, message ) {
    if ( showAlert == undefined ) alert = true;
    if ( message == undefined ) message = "The Duduf After Effects framework needs to be allowed to write files\nPlease, check the box called 'Allow Scripts to write files...' in the general preferences of After Effects.";
    if ( !DuAEF.DuAE.App.hasFilesAndNetworkAccess ) {
        if ( showAlert ) alert( message );
        if ( DuAEF.DuAE.App.version.version < 16.1 ) app.executeCommand( 2359 );
        else app.executeCommand( 3131 );
        DuAEF.DuAE.App.hasFilesAndNetworkAccess = app.preferences.getPrefAsLong( "Main Pref Section", "Pref_SCRIPTING_FILE_NETWORK_SECURITY" ) == 1;
    }
    return DuAEF.DuAE.App.hasFilesAndNetworkAccess;
}

/**
 * Gets the public name of a version of After Effects (like CC2015.3 for version 13.8)
 * @param {float}	[versionAsFloat]	- The version as a float. If not provided, will default to the current version of the running instance of After Effects.
 * @return {string}	The version name.
 */
DuAEF.DuAE.App.getAEVersionName = function ( versionAsFloat ) {
    if ( versionAsFloat == undefined ) versionAsFloat = DuAEF.DuAE.App.version.version;
    if ( versionAsFloat < 8 ) return "" + versionAsFloat;
    if ( versionAsFloat >= 8 && versionAsFloat < 9 ) return "CS3";
    if ( versionAsFloat >= 9 && versionAsFloat < 10 ) return "CS4";
    if ( versionAsFloat >= 10 && versionAsFloat < 10.5 ) return "CS5";
    if ( versionAsFloat >= 10.5 && versionAsFloat < 11 ) return "CS5.5";
    if ( versionAsFloat >= 11 && versionAsFloat < 12 ) return "CS6";
    if ( versionAsFloat >= 12 && versionAsFloat < 13 ) return "CC";
    if ( versionAsFloat >= 13 && versionAsFloat < 13.1 ) return "CC2014";
    if ( versionAsFloat >= 13.1 && versionAsFloat < 13.2 ) return "CC2014.1";
    if ( versionAsFloat >= 13.2 && versionAsFloat < 13.5 ) return "CC2014.2";
    if ( versionAsFloat >= 13.5 && versionAsFloat < 13.6 ) return "CC2015";
    if ( versionAsFloat >= 13.6 && versionAsFloat < 13.7 ) return "CC2015.1";
    if ( versionAsFloat >= 13.7 && versionAsFloat < 13.8 ) return "CC2015.2";
    if ( versionAsFloat >= 13.8 && versionAsFloat < 14 ) return "CC2015.3";
    if ( versionAsFloat >= 14 && versionAsFloat < 15 ) return "CC2017";
    if ( versionAsFloat >= 15 && versionAsFloat < 16 ) return "CC2018";
    if ( versionAsFloat >= 16 && versionAsFloat < 17 ) return "CC2019";
    if ( versionAsFloat >= 17 && versionAsFloat < 18 ) return "2020";
    return "Unknown";
}

/**
 * Gets the version of After Effects from its public name (like 13.8 for CC2015.3)
 * @param {float}	[versionAsFloat]	- The version name.
 * @return {DuVersion}	The version.
 */
DuAEF.DuAE.App.getAEVersion = function ( versionName ) {
    if (versionName == "CS3") return new DuVersion( "8.0" );
    if (versionName == "CS4") return new DuVersion( "9.0" );
    if (versionName == "CS5") return new DuVersion( "10.0" );
    if (versionName == "CS5.5") return new DuVersion( "10.5" );
    if (versionName == "CS6") return new DuVersion( "11.0" );
    if (versionName == "CC") return new DuVersion( "12.0" );
    if (versionName == "CC2014") return new DuVersion( "13.0" );
    if (versionName == "CC2014.1") return new DuVersion( "13.1" );
    if (versionName == "CC2014.2") return new DuVersion( "13.2" );
    if (versionName == "CC2015") return new DuVersion( "13.5" );
    if (versionName == "CC2015.1") return new DuVersion( "13.6" );
    if (versionName == "CC2015.2") return new DuVersion( "13.7" );
    if (versionName == "CC2015.3") return new DuVersion( "13.8" );
    if (versionName == "CC2017") return new DuVersion( "14.0" );
    if (versionName == "CC2018") return new DuVersion( "15.0" );
    if (versionName == "CC2019") return new DuVersion( "16.0" );
    if (versionName == "CC2020") return new DuVersion( "17.0" );
    return new DuVersion(versionName);
}

/**
 * Checks if the current version is higher than a given one
 * @param {string} versionName The minimum version
 * @return {boolean} True if the current version is higher (strict, will be false if they're equal)
 */
DuAEF.DuAE.App.isVersionHigherThan = function (versionName)
{
    return DuAEF.DuAE.App.version.isHigherThan( DuAEF.DuAE.App.getAEVersion( versionName ) );
}

/**
 * Gets the aerender binary
 * @return {File|null} The aerender binary, or null if not found
 */
DuAEF.DuAE.App.getAeRender = function()
{
    var packageFolder = Folder.appPackage;
    var aeRenderPath = packageFolder.absoluteURI + "/aerender";
    if (DuAEF.win) aeRenderPath += ".exe"
    var aeRenderFile = new File(aeRenderPath)
    if (aeRenderFile.exists) return aeRenderFile;
    else return null;
}

//low-level undocumented flag.
//true if an undo group has been opened and has not been closed yet.
DuAEF.DuAE.App.openedUndoGroup = false;

//low-level undocumented flag.
//the name of the currently opened undo group
DuAEF.DuAE.App.undoGroupName = '';

/**
 * Begins an undoGroup.<br />
 * Automatically prepend the group name with the script name.<br />
 * Using this method is safer than the native one, as DuAEF will try to avoid opening several undo groups at once.<br />
 * The group name is translatable.
 * @param {string} groupName - The name of the Undo Group.
 * @param {boolean} [autoClose=true] - By default, DuAEF will close any previously opened undogroup (which has a different name) to prevent any error.<br />
 * Set this to <code>false</code> in order to ignore this new group beginning and keep the previously opened one.
 */
DuAEF.DuAE.App.beginUndoGroup = function ( groupName, autoClose ) {
    groupName = def( groupName, "" );
    autoClose = def( autoClose, true );

    if ( groupName != "" ) {
        DuAEF.DuScriptUI.uiStrings.push( groupName );
        groupName = tr( groupName );
    }

    if ( DuAEF.DuAE.App.openedUndoGroup ) {
        if ( autoClose && DuAEF.DuAE.App.undoGroupName != groupName ) DuAEF.DuAE.App.endUndoGroup();
        else return;
    }
    app.beginUndoGroup( DuAEF.scriptName + ' | ' + groupName );

    DuAEF.DuAE.App.undoGroupName = groupName;

    DuAEF.DuAE.App.openedUndoGroup = true;
}

/**
 * Ends an undoGroup.<br />
 * Using this method is safer than the native one, as DuAEF will try to avoid opening several undo groups at once.
 * @param {string} [groupName] - The name of the Undo Group to end. Use this if you used  {@link DuAEF.DuAE.App.beginUndoGroup} with the 'autoClose' argument set to false before.
 */
DuAEF.DuAE.App.endUndoGroup = function (groupName) {
    groupName = def(groupName, "");
    if (groupName != "" && DuAEF.DuAE.App.undoGroupName != groupName) return;
    app.endUndoGroup();
    DuAEF.DuAE.App.openedUndoGroup = false;
}

/**
 * Runs app.executeCommand in a safer way, taking care of undogroups.
 * @param {int|string} commandID - The ID of the command as given by app.findMenuCommandID(), or if it is a string, the name of the command.
 */
DuAEF.DuAE.App.executeCommand = function ( commandID ) {
    if ( commandID === "" ) return;
    if ( DuAEF.DuJS.typeof( commandID ) == 'string' ) commandID = app.findMenuCommandId( commandID );
    //the command will mess undo groups up if there already is one opened.
    openedUndoGroup = DuAEF.DuAE.App.openedUndoGroup;
    DuAEF.DuAE.App.endUndoGroup();
    app.executeCommand( commandID );
    if ( openedUndoGroup ) DuAEF.DuAE.App.beginUndoGroup( DuAEF.DuAE.App.undoGroupName );
}

/**
 * Opens a ScriptUI Panel if it is installed, or displays an alert otherwise.
 * @param {string} panelScriptName - The Script name of the panel "script.jsx"
 */
DuAEF.DuAE.App.openScriptUIPanel = function ( panelScriptName ) {
    if ( panelScriptName == "" ) return;
    var scriptUIFile = new File( Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/' + panelScriptName );
    if ( !scriptUIFile.exists ) {
        scriptUIFile = new File( Folder.userData.absoluteURI + '/Adobe/After Effects/' + DuAEF.DuAE.App.version.versionString + '/Scripts/ScriptUI Panels/' + panelScriptName );
    }
    if ( !scriptUIFile.exists ) {
        alert( "The panel " + panelScriptName + " is not installed." );
        return;
    }
    DuAEF.DuAE.App.executeCommand( panelScriptName );
}

/**
 * Cuts the selection (runs the cut menu command)
 */
DuAEF.DuAE.App.cut = function () {
    DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.CUT );
}

/**
 * Copies the selection (runs the copy menu command)
 */
DuAEF.DuAE.App.copy = function () {
    DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.COPY );
}

/**
 * Duplcates the selection (runs the duplicate menu command)
 */
DuAEF.DuAE.App.duplicate = function () {
    DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.DUPLICATE );
}

/**
 * Copies the selection with property links (runs the copy menu command)<br />
 * Only on versions of After Effects greater than 11.0 (CS6)<br />
 * On CS6 and below, a standard copy will be done.
 */
DuAEF.DuAE.App.copyWithPropertyLinks = function () {
    if ( DuAEF.DuAE.App.version >= 12.0 ) DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.COPY_WITH_PROPERTY_LINKS );
    else DuAEF.DuAE.App.copy();
}

/**
 * Pastes the selection (runs the paste menu command)
 */
DuAEF.DuAE.App.paste = function () {
    DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.PASTE );
}

/**
 * Undoes (runs the undo command)
 */
DuAEF.DuAE.App.undo = function () {
    DuAEF.DuAE.App.executeCommand( DuAEF.DuAE.menuCommandID.UNDO );
}

/**
 * Checks if the Folder is an Auto-Save folder
 * @param {Folder|string} folder The folder or path to check
 * @return {boolean} true if the folder is an auto-save folder 
 */
DuAEF.DuAE.App.isAutoSaveFolder = function ( folder ) {
    if (DuAEF.DuJS.typeof(folder).toLowerCase() == 'string' ) folder = new Folder(folder);
    if (!(folder instanceof Folder)) {
        DuAEF.Debug.throwTypeError( folder, 'folder', 'Folder/string', 'DuAEF.DuAE.App.isAutoSaveFolder( folder )');
        return false;
    }

    var folderName = folder.fsName.toLowerCase();
    if (DuAEF.win) folderName = folderName.split('\\').pop();
    else folderName = folderName.split('/').pop();
    
    var aaeString = 'adobe after effects';
    var autosaveString = localize("$$$/AE/MenuID/0307/AutoSave=Auto-Save").toLowerCase();

    return folderName.indexOf( aaeString ) >= 0 && folderName.indexOf( autosaveString ) >= 0;
}