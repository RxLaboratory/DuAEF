/**
 * After Effects project methods
 * @namespace
 * @memberof DuAEF.DuAE
 */
DuAEF.DuAE.Project = {};

//undocumented flags
DuAEF.DuAE.Project.progressMode = false;
DuAEF.DuAE.Project.activeComp = null;
DuAEF.DuAE.Project.progressComp = null;
DuAEF.DuAE.Project.viewerMaximized = false;

// ========== DEPRECATED =============

/**
 * Updates the cache of the expressions used by Duik to speed up batch process of expressions in the whole project.<br />
 * It's automatically run when needed if it's not been updated in a long time (1 mn) or if it's empty
 * @function
 * @param {bool} [currentComp=false] true: in current compositions, false: in all compositions of the project
 * @param {bool} [selectedComps=false] When currentComp is false, true to replace only in selected compositions
 * @param {bool} [selectedLayers=false] When currentComp is true, wether to replace only on selected layers
 * @deprecated since v0.7.0; Use {@link DuAEF.DuAE.Expression.updateCache DuAEF.DuAE.Expression.updateCache(true, false, selectedLayers)}.
 */
DuAEF.DuAE.Project.updateExpressionCache = DuAEF.DuAE.Expression.updateCache;

// ========== ========== =============

/**
 * Sets the project in "waiting mode" to speed up things.
 * @param {bool} [inProgress=true] - True to set progress mode, false to stop it.
 */
DuAEF.DuAE.Project.setProgressMode = function ( inProgress ) {
    inProgress = def (inProgress, true);
    if ( !inProgress && !DuAEF.DuAE.Project.progressMode ) return;

    if ( inProgress ) {

        //if not already in progress, create temp comp etc
        if (!DuAEF.DuAE.Project.progressMode || !Object.isValid(DuAEF.DuAE.Project.progressComp))
        {
            //store the current comp
            DuAEF.DuAE.Project.activeComp = DuAEF.DuAE.Project.getActiveComp();

            if ( app.activeViewer != null ) DuAEF.DuAE.Project.viewerMaximized = app.activeViewer.maximized;

            //create a temp comp, open it
            DuAEF.DuAE.Project.progressComp = app.project.items.addComp( "MAGIC IS HAPPENING...", 500, 500, 1, 1, 1 );

            var tempL = DuAEF.DuAE.Project.progressComp.layers.addShape();
            tempL.applyPreset( DuAEF.DuAE.Presets.MAGIC );
            tempL.selected = false;
        }

        //open and maximize the temp comp
        DuAEF.DuAE.Project.progressComp.openInViewer();
        if ( app.activeViewer != null ) app.activeViewer.maximized = true;

        DuAEF.DuAE.Project.progressMode = true;
    } else {
        //remove temp comp
        if ( DuAEF.DuAE.Project.progressComp != null ) DuAEF.DuAE.Project.progressComp.remove();
        //re-activate previous comp
        if ( DuAEF.DuAE.Project.activeComp != null ) DuAEF.DuAE.Project.activeComp.openInViewer();
        if ( app.activeViewer != null ) app.activeViewer.maximized = DuAEF.DuAE.Project.viewerMaximized;

        DuAEF.DuAE.Project.progressMode = false;
    }

}

/**
 * Gets all compositions in the project (or only the root of the project, ignoring subfolders)
 * @param {boolean} [rootOnly=false] Set to true to get only comps from the root of the project
 * @return {CompItem[]} The compositions
 */
DuAEF.DuAE.Project.getComps = function ( rootOnly ) {
    rootOnly = def( rootOnly, false );
    var comps = [];
    var it = new Iterator( app.project.items );
    it.do( function ( comp ) {
        if ( comp instanceof CompItem ) {
            if ( rootOnly && comp.parentFolder != app.project.rootFolder ) return;
            comps.push( comp );
        }
    } );
    return comps;
}

/**
 * Gets the After Effects current composition
 * @return {CompItem|null} The current composition or null if there's no current comp
 */
DuAEF.DuAE.Project.getActiveComp = function () {
    if ( DuAEF.DuAE.Project.progressMode ) return DuAEF.DuAE.Project.activeComp;
    //activate the viewer first to try to get the opened composition
    if( app.activeViewer != null)
    {
        if ( app.activeViewer.type == ViewerType.VIEWER_COMPOSITION ) app.activeViewer.setActive();
    }
    var comp = app.project.activeItem;
    if ( !comp ) return null;
    if ( !( comp instanceof CompItem ) ) return null;
    return comp;
}

/**
 * Retrieves an item by its Item ID
 * @return {Item|null} The item
 */
DuAEF.DuAE.Project.getItemById = function ( id ) {

    var it = new Iterator( app.project.items );
    while ( item = it.next() ) {
        if ( item.id == id ) return item;
    }
    return null;
}

/**
 * Retrieves the first item with the given name
 * @return {Item|null} The item
 */
DuAEF.DuAE.Project.getItemByName = function ( name ) {
    var it = new Iterator( app.project.items );
    while ( item = it.next() ) {
        if ( item.name == name ) return item;
    }
    return null;
}

/**
 * Generates a new unique name for a composition
 * @param {string} newName - The wanted new name
 * @param {CompItem} comp  - The comp
 * @param {boolean} [increment=true] - true to automatically increment the new name if it already ends with a digit
 * @return {string}	The unique name, with a new number at the end if needed.
 */
DuAEF.DuAE.Project.newUniqueCompName = function ( newName, increment ) {
    if ( typeof increment == 'undefined' ) increment = true;
    var compNames = [];
    var it = new Iterator( app.project.items );
    it.do( function ( comp ) {
        if ( comp instanceof CompItem ) compNames.push( comp.name );
    } );
    return DuAEF.DuJS.String.generateUnique( newName, compNames, increment );
}

/**
 * Checks if all comps have a different name.
 * @return {Object} The list of names used several times. Check the length attribute to know how many duplicates were found, loop through the keys to get the names. Eech key is an array containing the list of comps with that name.
 * @example
 * var dupes = DuAEF.DuAE.Project.checkCompNames();
 * if (dupes.length != 0) {
 * for (name in dupes)
 * {
 *     if (dupes.hasOwnProperty(name)) alert(dupes[name]); //dupes[name] is an array of Layer
 * }
 * } */
DuAEF.DuAE.Project.checkCompNames = function () {
    var duplicatedNames = {};
    duplicatedNames.length  = 0;
    var compNames = {};
    var items = app.project.items;
    for (var i = 1, n = items.length; i <= n; i++)
    {
        var comp = items[i];
        if ( comp instanceof CompItem )
        {
            var name = comp.name;
            if (duplicatedNames.hasOwnProperty(name))
            {
                duplicatedNames[name].push(comp);
                continue;
            }
            if ( compNames.hasOwnProperty(name) ) 
            {
                duplicatedNames[name] = [compNames[name], comp];
                duplicatedNames.length++;
                continue;
            }
            compNames[name] = comp;
        }
    }
    return duplicatedNames;
}

/**
 * Gets the size of the current project file
 * @return {int} the size in Bytes. -1 if it has not been saved yet.
 */
DuAEF.DuAE.Project.getSize = function() {
    var file = app.project.file;
    if (!(file instanceof File)) return -1;
    if (!file.exists) return -1;
    else return file.length;
}

/**
 * The Expressions Engine setting in the Project Settings dialog box, as a string.
 * @return {string} One of: "extendscript", "javascript-1.0"
 */
DuAEF.DuAE.Project.expressionEngine = function ()
{
    var engine = app.project.expressionEngine;
    if (!engine) engine = "extendscript";
    return engine;
}

/**
 * Makes sure all compositions in the project have unique names, renaming them if needed.
 * @param {Array|ItemCollection} [comps] A list of comps, all of them by default
 */
DuAEF.DuAE.Project.setUniqueCompNames = function ( comps ) {
    comps = def( comps, DuAEF.DuAE.Project.getComps() );
    var it = new Iterator( comps );
    it.do( function ( comp ) {
        //temporarily set another name to correctly generate a new unique name 
        var oldName = comp.name;
        comp.name = '***Duik-temp-name-xxx***';
        comp.name = DuAEF.DuAE.Project.newUniqueCompName( oldName );
        app.project.autoFixExpressions(oldName, comp.name);
    } );
}

/**
 * Reduces the project using the selected compositions, the same way the native command does it, but being able to keep comps used only by expressions. If there's no comp selected, will use all comps at the root of the project.
 * @param {boolean} [keepExpressionOnly=true] Set to false to ignore comps used only by expressions (same as the native command)
 */
DuAEF.DuAE.Project.reduceSelected = function ( keepExpressionOnly ) {
    var comps = [];
    for (var i = 0, num = app.project.selection.length; i < num; i++) {
        var item = app.project.selection[i];
        if (item instanceof CompItem) comps.push(item);
    }
    DuAEF.DuAE.Project.reduce( comps, keepExpressionOnly );
}

/**
 * Reduces the project, the same way the native command does it, but being able to keep comps used only by expressions.
 * @param {CompItem|CompItem[]} [comps] The name or the id of the comp(s) to keep. If omitted, it will use all comps at the root of the project (the ones not in a subfolder).
 * @param {boolean} [keepExpressionOnly=true] Set to false to ignore comps used only by expressions (same as the native command)
 */
DuAEF.DuAE.Project.reduce = function ( comps, keepExpressionOnly ) {
    keepExpressionOnly = def( keepExpressionOnly, true );
    comps = def( comps, DuAEF.DuAE.Project.getComps( true ) );
    if ( comps instanceof CompItem ) comps = [ comps ];
    if ( comps.length == 0 ) return;

    //consolidate footage
    app.project.consolidateFootage();

    //update cache before running
    DuAEF.DuAE.Project.updateExpressionCache();

    for ( i = app.project.numItems; i > 0; i-- ) {
        var item = app.project.item( i );
        //if it's one of the comp, ignore
        if ( DuAEF.DuJS.Array.indexOf( comps, item, DuAEF.DuAE.Item.compareItems ) >= 0 ) continue;
        //if AVItem
        if ( item instanceof CompItem || item instanceof FootageItem ) {
            var usedIn = DuAEF.DuAE.Item.usedIn( item, true, keepExpressionOnly );

            if ( usedIn.length == 0 ) {
                item.remove();
                continue;
            }

            var remove = true;

            for ( j = 0, num = usedIn.length; j < num; j++ ) {
                //if there's one of the comp to keep, do not remove
                if ( DuAEF.DuJS.Array.indexOf( comps, usedIn[ j ], DuAEF.DuAE.Item.compareItems ) >= 0 ) {
                    remove = false;
                    break;
                }
            }

            if ( remove ) item.remove();
        }
        //remove folder if  empty 
        else if ( item.numItems == 0 ) item.remove();
    }
}

/**
 * Collects all dependencies in a folder
 * @param {Folder} [destination] The folder where to save the files. The project files will be collected in a subfolder called "project name.aep.archive" or "project name.aep.zip". If not provided, will use the current folder.
 * @param {boolean} [overwrite=false] Wether to overwrite existing footage in the destination.
 * @param {boolean} [zip=false] Set to true to automatically zip the archive.
 * @param {boolean} [createProjectFolder=true] Wether to create a folder for this project or use the destination as is.
 */
DuAEF.DuAE.Project.collectFiles = function ( destination, overwrite, zip, createProjectFolder ) {
    var projectFile = app.project.file;

    var result = {};
    result.missingFootages = [];
    
    destination = def ( destination, projectFile.parent );
    overwrite = def (overwrite, false);
    zip = def (zip, false);
    createProjectFolder = def (createProjectFolder, true);

    //create folder for the project
    var projectName = DuAEF.DuJS.Fs.getBasename( projectFile.name );
    var projectFolderPath = destination.absoluteURI;
    if (createProjectFolder) {
        projectFolderPath += '/' + projectName + ".archive";
    }
    var projectFolder = new Folder( projectFolderPath );
	var footageFolder = new Folder( projectFolder.absoluteURI + "/(Footage)/" );
	projectFolder.create();
	footageFolder.create();

    //create report file
    var missingFootageString = "=== MISSING FOOTAGE ===\n\n";

    var currentFootageFolder = footageFolder;
    currentFootageFolder.id = -1;

	//for each item, copy and re-link
	for (var i = 1, num = app.project.numItems; i <= num; i++ ) {
        var item = app.project.item(i);

        //check if we're still in the right folder
        if (item.parentFolder.id != currentFootageFolder.id) {
            if (item.parentFolder == app.project.rootFolder )
            {
                currentFootageFolder = footageFolder;  
            }
            else
            {
                currentFootageFolder = currentFootageFolder.parent;
            }
            currentFootageFolder.id = item.parentFolder.id;
        }

        if ( item instanceof CompItem ) continue;
        if ( item instanceof FolderItem ) {
            currentFootageFolder = new Folder( currentFootageFolder.absoluteURI + "/" + item.name);
            currentFootageFolder.create();
            currentFootageFolder.id = item.id;
            continue;
        }

        //if no source file
        if (item.file == null) continue;
        //if missing source
        if (item.footageMissing) {
            missingFootageString += item.name + " @ " + item.file.fsName + "\n";
            result.missingFootages.push(item.file.fsName);
            continue;
        }

        //if this is not an image sequence
        if (!DuAEF.DuAE.Item.isImageSequence(item)) {
            var newPath = currentFootageFolder.absoluteURI + "/" + item.file.name;
            var newFile = new File( newPath );
            //copy
            if ( (newFile.exists && overwrite) || !newFile.exists) item.file.copy( newPath );
            //re-link
            item.replace(new File( newPath ));
        }
        else {
            //get files and create a folder
            var sequenceFolder = item.file.parent;
            var frameSequence = sequenceFolder.getFiles();
            var sequenceFolderTarget = new Folder(currentFootageFolder.absoluteURI + "/" + sequenceFolder.name + "/");
            sequenceFolderTarget.create();
            var newPath = sequenceFolderTarget.absoluteURI + "/" + item.file.name;
            var newFile = new File(newPath);

            //copy frames
            if ( (newFile.exists && overwrite) || !newFile.exists) {
                for (var j = 0, numFrames = frameSequence.length; j < numFrames; j++ ) {
                    var frame = frameSequence[j];
                    if ( frame instanceof Folder ) continue;
                    frame.copy( sequenceFolderTarget.absoluteURI + "/" + frame.name );
                }
            }
            
            //re-link
            item.replaceWithSequence(newFile, true);
        }

	}

	//sauvegarder le projet
    var newProjectFileName = DuAEF.DuJS.Fs.newUniqueFileName(app.project.file.name , projectFolder);
	app.project.save(new File(projectFolder.absoluteURI + "/" + newProjectFileName));

    //write report
    var reportFile = new File(projectFolder.absoluteURI + "/" + app.project.file.name + "_report.txt");
    var report = app.project.file.name + "\n\n";
    report += missingFootageString;
    DuAEF.DuJS.Fs.writeTextFile( reportFile, report );

    //ZIP
    if (zip) {
        app.project.close( CloseOptions.DO_NOT_SAVE_CHANGES );
        app.open( projectFile );
        var zipFile = DuAEF.Zip.compressFolderContent( projectFolder, projectName + ".zip", true );
    }
}

/**
 * Replaces text in Expressions
 * @param {string} oldString - The string to replace
 * @param {string} newString - The new string
 * @param {boolean} [caseSensitive=true] - Wether the search has to be case sensitive
 */
DuAEF.DuAE.Project.replaceInExpressions = function ( oldString, newString, caseSensitive ) {
    caseSensitive = def (caseSensitive, true);

    var re = new RegExp( DuAEF.DuJS.RegExp.escapeRegExp(oldString), caseSensitive ? 'g' : 'gi');

    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, newString );
        return e;
    });
}

/**
 * Replace all <code>thisComp</code> occurences by <code>comp("name")</code>.
 * @param {bool} [selectedComps=false] true to replace only in selected compositions
 */
DuAEF.DuAE.Project.removeThisCompInExpressions = function( selectedComps )
{
    selectedComps = def(selectedComps, false);
    
    var re = new RegExp("(^|" + DuAEF.DuJS.RegExp.javascriptSymbols + ")thisComp(?!" + DuAEF.DuJS.RegExp.javascriptVarChars + ")",'gm')

    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, '$1comp("' + e.comp.name + '")' );
    }, false, selectedComps);
}


/**
 * Replace all <code>comp("name")</code> occurences by <code>thisComp</code>.
 * @param {bool} [selectedComps=false] true to replace only in selected compositions
 */
DuAEF.DuAE.Project.removeCompInExpressions = function( selectedComps )
{
    selectedComps = def(selectedComps, false);
    
    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        var name = e.comp.name;
        var re = new RegExp("(^|" + DuAEF.DuJS.RegExp.javascriptSymbols + ")comp\\s*\\(\\s*[\"']" + DuAEF.DuJS.RegExp.escapeRegExp(name) + "[\"']\\s*\\)", 'gm');
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, '$1thisComp' );
    }, false, selectedComps);
}

/**
 * Gets the unused footages.
 * @return {FootageItem[]} The list of unused items.
 */
DuAEF.DuAE.Project.getUnusedFootages = function ()
{
    var unused = [];
    for (var i = 1, n = app.project.numItems; i <= n; i++)
    {
        var item = app.project.item(i);
        if (item instanceof FootageItem)
        {
            if (item.usedIn.length == 0) unused.push(item);
        }
    }
    return unused;
}

/**
 * Gets a folder with its name. If name is "Project Root" or empty, returns the root of the project.
 * @param {string} folderName The name of the folder
 * @return {FolderItem|null} The folder or null if not found.
 */
DuAEF.DuAE.Project.getFolderItem = function(folderName)
{
    folderName = def(folderName, "");
    if (folderName == "") return app.project.rootFolder;
    if (DuAEF.DuJS.String.trim(folderName) == "") return app.project.rootFolder;
    if ( folderName.toLowerCase() == tr("Project Root").toLowerCase() ) return app.project.rootFolder;

    for (var i = 1, n = app.project.numItems; i <= n; i++)
    {
        var item = app.project.item(i);
        if (item instanceof FolderItem)
        {
            if (item.name == folderName) return item;
        }
    }

    return null;
}

/**
 * Checks recursively (except for root folder) if an item is in a specific folder
 * @param {Item} item The item to check
 * @param {FolderItem} folder The folder
 * @return {boolean}
 */
DuAEF.DuAE.Project.isInFolder = function (item, folder)
{
    var pFolder = item.parentFolder;
    if (pFolder.id == app.project.rootFolder.id && pFolder.id == folder.id) return true;
    while (pFolder && pFolder.id != app.project.rootFolder.id)
    {
        if (pFolder.id == folder.id) return true;
        pFolder = pFolder.parentFolder;
    }
    return false;
}

/**
 * Gets the unused compositions, except the ones in the given folder.
 * @param {FolderItem} [folder] The folder to exclude.
 * @return {CompItem[]} The unused compositions
 */
DuAEF.DuAE.Project.getUnusedComps = function (folder)
{
    var comps = []
    folder = def(folder, null);
    for (var i = 1, n = app.project.numItems; i <= n; i++ )
    {
        var item = app.project.item(i);
        if (item instanceof CompItem)
        {
            if ( item.usedIn.length == 0 )
            {
                if (folder && folder.id == app.project.rootFolder.id && item.parentFolder == folder.id) continue;
                if (folder && DuAEF.DuAE.Project.isInFolder(item, folder)) continue;
                comps.push(item);
            }
        }
    }
    return comps;
}

/**
 * Gets all the precompositions located at the root of the project.
 * @return {CompItem[]}
 */
DuAEF.DuAE.Project.getPrecompsAtRoot = function()
{
    var precomps = [];
    for (var i = 1, n = app.project.numItems; i <= n; i++ )
    {
        var item = app.project.item(i);
        if (item instanceof CompItem)
        {
            if (item.parentFolder.id == app.project.rootFolder.id && item.usedIn.length != 0) precomps.push(item);
        }
    }
    return precomps;
}