/**
 * After Effects composition methods
 * @namespace
 * @memberof DuAEF.DuAE
 */
DuAEF.DuAE.Comp = {};

// ========== DEPRECATED =============


/**
 * Updates the cache of the expressions used by Duik to speed up batch process of expressions in the whole project.<br />
 * It's automatically run when needed if it's not been updated in a long time (1 mn) or if it's empty
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp()] The comp with expressions to cache
 * @param {boolean} [selectedLayers=false] Set to true to cache only selected layers.
 * @deprecated since v0.7.0; Use {@link DuAEF.DuAE.Expression.updateCache DuAEF.DuAE.Expression.updateCache(true, false, selectedLayers)}.
 */
DuAEF.DuAE.Comp.updateExpressionCache = function (comp, selectedLayers) { DuAEF.DuAE.Expression.updateCache(true, false, selectedLayers) };

// ========== ========== =============

/**
 * Replaces text in Expressions
 * @param {string} oldString - The string to replace
 * @param {string} newString - The new string
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp()] The comp with expressions to cache. WARNING: Since v0.7.0 this param is ignored.
 * @param {boolean} [caseSensitive=true] - Wether the search has to be case sensitive
 * @param {boolean} [selectedLayers=false] Set to true to cache only selected layers.
 */
DuAEF.DuAE.Comp.replaceInExpressions = function ( oldString, newString, comp, caseSensitive, selectedLayers ) {
    comp = DuAEF.DuAE.Project.getActiveComp();
    if (!comp) return;
    caseSensitive = def (caseSensitive, true);
    selectedLayers = def (selectedLayers, false);

    var re = new RegExp( DuAEF.DuJS.RegExp.escapeRegExp(oldString), caseSensitive ? 'g' : 'gi');

    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, newString );
        return e;
    }, true, false, selectedLayers);
}

/**
 * Replace all <code>thisComp</code> occurences by <code>comp("name")</code>.
 * @param {bool} [selectedLayers=false] true to replace only in selected layers
 */
DuAEF.DuAE.Comp.removeThisCompInExpressions = function( selectedLayers )
{
    selectedLayers = def(selectedLayers, false);
    
    var re = new RegExp("(^|" + DuAEF.DuJS.RegExp.javascriptSymbols + ")thisComp(?!" + DuAEF.DuJS.RegExp.javascriptVarChars + ")",'gm')

    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, '$1comp("' + e.comp.name + '")' );
    }, true, false, selectedLayers);
}

/**
 * Replace all <code>comp("name")</code> occurences by <code>thisComp</code>.
 * @param {bool} [selectedComps=false] true to replace only in selected compositions
 */
DuAEF.DuAE.Comp.removeCompInExpressions = function( selectedLayers )
{
    selectedLayers = def(selectedLayers, false);
    
    DuAEF.DuAE.Expression.doInExpresssions(function(e) {
        var name = e.comp.name;
        var re = new RegExp("(^|" + DuAEF.DuJS.RegExp.javascriptSymbols + ")comp\\s*\\(\\s*[\"']" + DuAEF.DuJS.RegExp.escapeRegExp(name) + "[\"']\\s*\\)", 'gm');
        e.changed = re.test( e.expression );
        if (e.changed) e.expression = e.expression.replace( re, '$1thisComp' );
    }, true, false, selectedLayers);
}

/**
 * Makes sure the composition has a unique name, renaming it if needed.
 * @param {CompItem} comp - The composition
 * @return {string} The new name.
 */
DuAEF.DuAE.Comp.setUniqueCompName = function ( comp ) {
    if ( !( comp instanceof CompItem ) ) throw "Cannot set a unique composition name, this is not a composition.";
    //temporarily rename the comp to check for its name
    var newName = comp.name;
    comp.name = '***Duik-temp-name-xxx***';
    comp.name = DuAEF.DuAE.Project.newUniqueCompName( newName, false );
    app.project.autoFixExpressions( newName, comp.name );
    return comp.name;
}

/**
 * Makes sure all layers in the comp have unique names, renaming them if needed.
 * @param {Array|LayerCollection} [layers=comp.layers] - The layers
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp] - The composition
 */
DuAEF.DuAE.Comp.setUniqueLayerNames = function ( layers, comp ) {
    comp = def( comp, DuAEF.DuAE.Project.getActiveComp() );
    if (!comp) return;
    layers = def(layers, comp.layers);
    var it = new Iterator( layers );
    it.do( function ( layer ) {
        var locked = layer.locked;
        layer.locked = false;
        //temporarily set another name to correctly generate a new unique name 
        var oldName = layer.name;
        layer.name = '***Duik-temp-name-xxx***';
        layer.name = DuAEF.DuAE.Comp.newUniqueLayerName( oldName, comp );
        app.project.autoFixExpressions(oldName, layer.name);
        layer.locked = locked;
    } );
}

/**
 * Gets the After Effects selected properties in the current comp
 * @param {PropertyType|PropertyValueType|string|function}	 [filter]	- A filter to get only a certain type, or value type, or property name or matchName.<br />
 * A function which take one PropertyBase as argument can be used to filter the properties: the Property will be returned if the function returns true.
 * @param {boolean}	[strict=false]	- If a string filter is provided, wether to search for the exact name/matchName or if it contains the filter.
 * @param {boolean}	[caseSensitive=true]	- If a string filter is provided, and not strict is false, does the search have to be case sensitive?
 * @return {PropertyInfo[]} The selected properties, an empty Array if nothing active or selected
 */
DuAEF.DuAE.Comp.getSelectedProps = function ( filter, strict, caseSensitive ) {
    var props = [];
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return props;

    //if no filter, get all using AE native API
    if ( typeof filter === 'undefined' ) {
        var layers = comp.selectedLayers;
        var itLayers = new Iterator( layers );
        itLayers.do( function ( layer ) {
            props = props.concat( layer.selectedProperties );
        } );
    } else {
        var layers = comp.selectedLayers;
        if ( layers.length === 0 ) return props;

        for ( var i = 0; i < layers.length; i++ ) {
            props = props.concat( DuAEF.DuAE.Layer.getSelectedProps( layers[ i ], filter, strict, caseSensitive ) );
        }
    }

    return DuAEF.DuAE.getPropertyInfos( props );
}

/**
 * Gets the selected layers in the current comp
 * @return {Layer[]} The selected layers
 */
DuAEF.DuAE.Comp.getSelectedLayers = function () {
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return [];
    return comp.selectedLayers;
}

/**
 * Runs a function on all the selected layers
 * @param {function} method - The function to run on the layers, which takes a layer as its only argument.
 * @param {string} [undoGroupName] - The name of the undoGroup created before the execution. If not provided, there will not be any undoGroup created.
 */
DuAEF.DuAE.Comp.doSelectedLayers = function ( method, undoGroupName ) {
    //get layers
    var layers = DuAEF.DuAE.Comp.unselectLayers();

    // run
    DuAEF.DuAE.Layer.doLayers( layers, method, undoGroupName );

    //reselect
    DuAEF.DuAE.Comp.selectLayers( layers );
}

/**
 * Runs a function on all the layers
 * @param {function} method - The function to run on the layers, which takes a layer as its only argument.
 * @param {string} [undoGroupName] - The name of the undoGroup created before the execution. If not provided, there will not be any undoGroup created.
 * @param {CompItem} [comp] - The comp containing the layers. Will use the current comp if not provided.
 */
DuAEF.DuAE.Comp.doLayers = function ( method, undoGroupName, comp ) {
    if ( typeof comp === 'undefined' ) {
        comp = DuAEF.DuAE.Project.getActiveComp();
    }
    if ( !( comp instanceof CompItem ) ) return;

    //get layers
    var layers = comp.layers;
    if ( layers.length == 0 ) return;

    // run
    DuAEF.DuAE.Layer.doLayers( layers, method, undoGroupName );
}

/**
 * Gets the After Effects animated (with keyframes) properties in the current comp
 * @param {PropertyType|PropertyValueType|string|function}	 [filter]	- A filter to get only a certain type, or value type, or property name or matchName.<br />
 * A function which take one PropertyBase as argument can be used to filter the properties: the Property will be returned if the function returns true.
 * @param {boolean}	[strict=false]	- If a string filter is provided, wether to search for the exact name/matchName or if it contains the filter.
 * @param {boolean}	[caseSensitive=true]	- If a string filter is provided, and not strict is false, does the search have to be case sensitive?
 * @param {boolean}	[selectedLayersOnly=false]	- True to get the properties on the selected layers only
 * @param {CompItem}	[comp=DuAEF.DuAE.Project.getActiveComp]	- The composition
 * @return {PropertyInfo[]} The selected properties, an empty Array if nothing active or selected
 */
DuAEF.DuAE.Comp.getAnimatedProps = function ( filter, strict, caseSensitive, selectedLayersOnly, comp ) {
    var props = [];
    if ( typeof comp === 'undefined' ) comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return props;

    selectedLayersOnly = def( selectedLayersOnly, false);


    var layers;
    if ( selectedLayersOnly ) layers = comp.selectedLayers;
    else layers = comp.layers;

    var it = new Iterator( layers );
    it.do( function ( layer ) {
        props = props.concat( DuAEF.DuAE.Property.getAnimatedProps( layer, filter, strict, caseSensitive ) );
    } );

    return props;
}

/**
 * Deselects all properties in the current composition
 */
DuAEF.DuAE.Comp.unselectProperties = function () {
    var comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return props;
    var props = comp.selectedProperties;
    for ( var i = 0; i < props.length; i++ ) {
        props[ i ].selected = false;
    }
}

/**
 * Deselects all layers in a composition
 * @param {CompItem} [comp=app.project.activeItem] - The composition
 * @return {Layer[]} The previously selected layers.<br />
 * A custom attribute, Layer.props is added on each layer object which is an array of all previously selected properties as PropertyInfo objects
 */
DuAEF.DuAE.Comp.unselectLayers = function ( comp ) {
    if ( typeof comp === 'undefined' ) comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return [];

    var layers = [];

    if ( !comp ) return layers;
    if ( !( comp instanceof CompItem ) ) return layers;

    layers = [];

    while ( comp.selectedLayers.length > 0 ) {
        var layer = comp.selectedLayers[ 0 ];
        layer.props = DuAEF.DuAE.getPropertyInfos( layer.selectedProperties );
        layer.selected = false;
        layers.push( layer );
    }

    return layers;
}

/**
 * Selects the layers
 * @param {Layer[]} layers - The layers
 */
DuAEF.DuAE.Comp.selectLayers = function ( layers ) {
    new Iterator( layers ).do( function ( layer ) {
        if ( layer == undefined ) return;
        if ( layer == null ) return;
        layer.selected = true;
    } );
}

/**
 * Generates a new unique name for a layer
 * @param {string} newName	- The wanted new name
 * @param {CompItem} [comp] 	- The comp
 * @param {boolean} [increment=true] - true to automatically increment the new name if it already ends with a digit
 * @return {string}	The unique name, with a new number at the end if needed.
 */
DuAEF.DuAE.Comp.newUniqueLayerName = function ( newName, comp, increment ) {
    increment = def(increment, true);
    comp = def(comp, DuAEF.DuAE.Project.getActiveComp() );
    var layerNames = [];
    for ( var i = 1; i <= comp.layers.length; i++ ) {
        layerNames.push( comp.layer( i ).name );
    }
    return DuAEF.DuJS.String.generateUnique( newName, layerNames, increment );
}

/**
 * Generates a new unique name for a marker for this comp
 * @param {string} newName	- The wanted new name
 * @param {CompItem} comp 	- The comp
 * @param {boolean} [increment=true] - true to automatically increment the new name if it already ends with a digit
 * @return {string}	The unique name, with a new number at the end if needed.
 */
DuAEF.DuAE.Comp.newUniqueMarkerName = function ( newName, comp, increment ) {
    if ( increment == undefined ) increment = true;
    var markerNames = [];
    for ( var i = 1, num = comp.markerProperty.numKeys; i <= num; i++ ) {
        markerNames.push( comp.markerProperty.keyValue( i ).comment );
    }
    return DuAEF.DuJS.String.generateUnique( newName, markerNames, increment );
}

/**
 * Creates a new Adjustment layer
 * @param {CompItem} comp 	- The comp
 * @return {AVLayer}	The layer.
 */
DuAEF.DuAE.Comp.addAdjustmentLayer = function ( comp ) {
    if ( comp == undefined ) return null;
    var layer = comp.layers.addSolid( [ 1, 1, 1 ], DuAEF.DuAE.Comp.newUniqueLayerName( "Adjustment Layer", comp ), comp.width, comp.height, comp.pixelAspect, comp.duration );
    layer.adjustmentLayer = true;
    return layer;
}

/**
 * Links all orphan layers in the comp to a layer
 * @param {Layer} layer - The parent layer
 * @param {bool} [includeLockedLayers=false] - True to parent layers even if they are locked
 */
DuAEF.DuAE.Comp.parentAllOrphans = function ( layer, includeLockedLayers ) {
    if ( typeof includeLockedLayers === "undefined" ) includeLockedLayers = false;
    var comp = layer.containingComp;
    for ( var i = 1, num = comp.numLayers; i <= num; i++ ) {
        if ( i == layer.index ) continue;
        var l = comp.layer( i );
        if ( DuAEF.DuAE.Layer.getRelation( l, layer ) < 0 ) continue;
        var locked = l.locked;
        if ( locked && includeLockedLayers ) l.locked = false;
        if ( !locked && l.parent == null ) l.parent = layer;
        if ( locked && includeLockedLayers ) l.locked = locked;
    }
}

/**
 * Gets all precomps and parent comps of the composition
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp()] - The composition
 * @param {bool} [recursive=false] - True to search to more than one level of precomposition
 * @return {CompItem[]} The related compositons
 */
DuAEF.DuAE.Comp.getRelatives = function ( comp, recursive ) {
    if ( typeof recursive === 'undefined' ) recursive = false;
    if ( typeof comp === 'undefined' ) comp = DuAEF.DuAE.Project.getActiveComp();
    if ( !comp ) return [];
    //get precomps
    var precomps = DuAEF.DuAE.Comp.getPrecomps( comp, recursive );
    //get parent
    var parentComps = [];
    if ( recursive ) {
        parentComps = DuAEF.DuAE.Comp.getParentComps( comp );
    } else {
        parentComps = comp.usedIn;
    }

    return precomps.concat( parentComps );
}

/**
 * Gets all the precomposition found in the comp.
 * @param {CompItem} comp - The composition
 * @param {bool} [recursive=false] - True to get nested compositions
 * @return {CompItem[]} The precompositions
 */
DuAEF.DuAE.Comp.getPrecomps = function ( comp, recursive ) {
    if ( typeof recursive === 'undefined' ) recursive = true;
    var precomps = [];
    var it = new Iterator( comp.layers );
    it.do( function ( layer ) {
        var precomp = layer.source;
        if ( precomp instanceof CompItem ) {
            precomps.push( precomp );
            if ( recursive ) precomps = precomps.concat( DuAEF.DuAE.Comp.getPrecomps( precomp ) );
        }
    } );
    //remove duplicates
    DuAEF.DuJS.Array.removeDuplicates( precomps );
    return precomps;
}

/**
 * Recursively gets all compositions where this item is used
 * @param {AVItem} item - The item
 * @return {CompItem[]} The compositions
 */
DuAEF.DuAE.Comp.getParentComps = function ( item ) {
    var parentComps = item.usedIn;
    new Iterator( parentComps ).do( function ( parentComp ) {
        parentComps = parentComps.concat( DuAEF.DuAE.Comp.getParentComps( parentComp ) );
    } );
    DuAEF.DuJS.Array.removeDuplicates( parentComps );
    return parentComps;
}

/**
 * Gets all the layers with audio in the composition
 * @param {CompItem}	 comp	The composition where the audio will be searched
 * @param {bool}	[audioActiveOnly=false]	 If true, does not get muted layers.
 * @return {AVLayer[]} An array of AVLayer containing the audio layers
 */
DuAEF.DuAE.Comp.getAudioLayers = function ( comp, audioActiveOnly ) {
    if ( typeof audioActiveOnly === 'undefined' ) audioActiveOnly = false;
    var layers = comp.layers;
    var audioLayers = [];
    var it = new Iterator( layers );
    it.do( function ( layer ) {
        if ( layer.hasAudio ) {
            if ( audioActiveOnly && layer.audioEnabled || !audioActiveOnly ) {
                audioLayers.push( layer );
            }
        }
    } );

    return audioLayers;
}

/**
 * Gets the total number of master properties used on precompositions in the comp.
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp] The composition to check
 * @return {int} The number of master properties
 */
DuAEF.DuAE.Comp.numMasterProperties = function(comp) {
    if (DuAEF.DuAE.App.version.version < 15.1) return 0;
    comp = def(comp, DuAEF.DuAE.Project.getActiveComp());
    if (!comp) return 0;
    var numMP = 0;
    for (var i = 1, n = comp.numLayers; i <= n; i++)
    {
        var l = comp.layer(i);
        if (!l.source) continue;
        if (l.source instanceof CompItem)
        {
            numMP += l('ADBE Layer Overrides').numProperties;
        }
    }
    return numMP;
}

/**
 * Checks if all layers have a different name.
 * @param {CompItem} [comp=DuAEF.DuAE.Project.getActiveComp] The comp to check
 * @return {Object} The list of names used several times. Check the length attribute to know how many duplicates were found, loop through the keys to get the names. Eech key is an array containing the list of layers with that name.
 * @example
 * var dupes = DuAEF.DuAE.Comp.checkLayerNames();
 * if (dupes.length != 0) {
 * for (name in dupes)
 * {
 *     if (dupes.hasOwnProperty(name)) alert(dupes[name]); //dupes[name] is an array of Layer
 * }
 * }
 */
DuAEF.DuAE.Comp.checkLayerNames = function (comp) {
    comp = def(comp, DuAEF.DuAE.Project.getActiveComp());
    var duplicatedNames = {};
    duplicatedNames.length  = 0;
    if (!comp) return duplicatedNames;
    var layerNames = {};
    var layers = app.project.items;
    for (var i = 1, n = comp.numLayers; i <= n; i++)
    {
        var layer = comp.layer(i);
        var name = layer.name;

        if (duplicatedNames.hasOwnProperty(name))
        {
            duplicatedNames[name].push(layer);
            continue;
        }
        
        if ( layerNames.hasOwnProperty(name) ) 
        {
            duplicatedNames[name] = [layerNames[name], layer];
            duplicatedNames.length++;
            continue;
        }
        layerNames[name] = layer;
    }
    return duplicatedNames;
}