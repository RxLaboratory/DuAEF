/*
OCALib
Library for interchange with Krita
Copyright (c) 2017-2018 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

__Contributors:__

	Nicolas Dufresne - Lead developer
	Kevin Masson - Developer

__Thanks to:__

	Dan Ebberts - Writing the first IK Expressions
	Eric Epstein - making the IK's work with 3D Layers
	Kevin Schires – Including images in the script
	Matias Poggini – Bezier IK feature
	Eric Epstein - Making the IK's work with 3D Layers
	Assia Chioukh and Quentin Saint-Georges – User Guides composition
	Motion Cafe – Ideas and feedback
	Fous d’anim – Ideas and feedback
	All 258 Duik 15 indiegogo backers for making this libDuik possible!


This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @class
 * @name OCA
 * @classdesc An Open Cel Animation document<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.OCA.load} to create an OCA object.
 * @property {string} ocaVersion - The version of OCA used to export this document
 * @property {string} name - The name of this project
 * @property {int} width - The width, in pixels
 * @property {int} height - The height, in pixels
 * @property {int} frameCount - The duration, in frames
 * @property {float} frameRate - The frame rate, in frames per second
 * @property {float} pixelAspect - The pixel aspect ratio
 * @property {OCALayer[]} layers - The layers
 * @property {int} startTime - The frame number at which the animation starts
 * @property {int} endTime - The frame number at which the animation ends
 * @property {DuAEF.OCA.colorDepths} colorDepth - Bits per channel used in the document
 * @property {float[]} backgroundColor - The background color
 * @property {string} originApp - The application name from which the document was exported.
 * @property {string} originAppVersion - The version of the origin application.
 * @property {Folder} folder - The folder containing the oca files.
 * @property {string} path - The URI to the folder containing the oca files.
 */

/**
 * @class
 * @name OCALayer
 * @classdesc An OCA Layer<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.OCA.load} to create an OCA object containing the layers.
 * @property {string} name - The layer name
 * @property {OCAFrame[]} frames - The keyframes of the animation for this layer.
 * @property {OCALayer[]} childLayers - The child layers if this layer is a group.
 * @property {DuAEF.OCA.layerTypes} type - The type of the layer. See the Layer Types section below
 * @property {string} fileType -  The type of the files used for the frames. The file extension, without the initial dot.
 * @property {DuAEF.OCA.BlendingModes} blendingMode - The blending mode of the layer
 * @property {bool} inheritAlpha - The inherit alpaha option (preserve transparency)
 * @property {bool} animated - Whether this layer is a single frame or not.
 * @property {int[]} position - The coordinates of the center of the layer, in pixels [X,Y] in the document coordinates. 
 * @property {int} width - The width, in pixels.
 * @property {int} height - The height, in pixels.
 * @property {int} label - A label for the layer.
 * @property {float} opacity - The opacity, in the range 0.0-1.0
 * @property {bool} visible - True if the layer is visible
 * @property {bool} reference - Whether the layer is a guide or reference, and should not be rendered.
 * @property {bool} passThrough - Whether the layer is in pass through mode. Only for grouplayer.
 */

 /**
 * @class
 * @name OCAFrame
 * @classdesc An OCA Frame<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.OCA.load} to create an OCA object containing the layers.
 * @property {string} name - The layer name
 * @property {string} fileName - The path and name of the file of the frame. It is the absolute path from the root of the OCA folder.
 * @property {int} frameNumber - The frame in the document at which the frames starts to be visible
 * @property {float} opacity - The opacity, in the range 0.0-1.0
 * @property {int[]} position - The coordinates of the center of the layer, in pixels [X,Y] in the document coordinates.
 * @property {int} width - The width, in pixels.
 * @property {int} height - The height, in pixels.
 * @property {int} duration - The duration of the frame, in frames.
 */

/**
 * Open Cel Animation interchange tools
 * @namespace
 * @memberof DuAEF
 */
DuAEF.OCA = {};

/**
    * Associative array to convert color depths modes from OCA to After Effects
    */
DuAEF.OCA.colorDepths = {
    'U8': 8,
    'U16': 16,
    'F16': 16,
    'F32': 32
}


/**
    * The different layer types
    * @readonly
    * @enum {string}
    */
DuAEF.OCA.layerTypes = {
    PAINT: 'paintlayer',
    VECTOR: 'vectorlayer',
    GROUP: 'grouplayer'
}

/**
 * Associative array to convert blending modes from OCA to After Effects
 */
DuAEF.OCA.BlendingModes = {
    'normal': BlendingMode.NORMAL,
    'darken': BlendingMode.DARKEN,
    'burn': BlendingMode.COLOR_BURN,
    'color': BlendingMode.COLOR,
    'dodge': BlendingMode.CLASSIC_COLOR_DODGE,
    'divide': BlendingMode.DIVIDE,
    'overlay': BlendingMode.OVERLAY,
    'luminosity': BlendingMode.LUMINOSITY,
    'soft_light_svg': BlendingMode.SOFT_LIGHT,
    'multiply': BlendingMode.MULTIPLY,
    'saturation': BlendingMode.SATURATION,
    'erase': BlendingMode.SILHOUETE_ALPHA ,
    'lighten': BlendingMode.LIGHTEN,
    'screen': BlendingMode.SCREEN,
    'inverse_subtract': BlendingMode.LINEAR_BURN,
    'subtract': BlendingMode.SUBTRACT,
    'darker_color': BlendingMode.DARKER_COLOR,
    'easy_burn': BlendingMode.MULTIPLY, //Approximation
    'fog_darken': BlendingMode.DARKEN,
    'gamma_dark': BlendingMode.VIVID_LIGHT, //Approximation
    'linear_burn': BlendingMode.LINEAR_BURN,
    'shade': BlendingMode.LINEAR_BURN, //Approximation
    'and': BlendingMode.LINEAR_BURN, //Approximation
    'or': BlendingMode.ADD, //Approximation
    'dissolve': BlendingMode.DISSOLVE,
    'increase_luminosity': BlendingMode.ADD, //Approximation
    'increase_saturation': BlendingMode.OVERLAY, //Approximation
    'hue': BlendingMode.HUE,
    'alpha_darken': BlendingMode.LUMINESCENT_PREMUL,
    'stencil_alpha': BlendingMode.STENCIL_ALPHA,
    'hard_overlay': BlendingMode.VIVID_LIGHT, //Approximation
    'hard_mix': BlendingMode.HARD_MIX, //Approximation
    'hard_mix_photoshop': BlendingMode.CLASSIC_COLOR_BURN, //Approximation
    'parallel': BlendingMode.DARKEN,
    'geometric_mean': BlendingMode.MULTIPLY,
    'additive_subtractive': BlendingMode.DIFFERENCE, //Approximation
    'difference': BlendingMode.DIFFERENCE,
    'exclusion': BlendingMode.EXCLUSION,
    'equivalence': BlendingMode.DIFFERENCE,
    'freeze_reflect': BlendingMode.OVERLAY,
    'heat_glow': BlendingMode.HARD_LIGHT, //Approximation
    'color_hsi': BlendingMode.COLOR, //Approximation
    'intensity': BlendingMode.LUMINOSITY, //Approximation
    'saturation_hsi': BlendingMode.SATURATION, //Approximation
    'hue_hsi': BlendingMode.HUE, //Approximation
    'lighter_color': BlendingMode.LIGHTER_COLOR,
    'flat_light': BlendingMode.VIVID_LIGHT, //Approximation
    'fog_lighten': BlendingMode.LIGHTEN, //Approximation
    'linear_light': BlendingMode.LINEAR_LIGHT,
    'luminosity_sai': BlendingMode.ADD,
    'soft_light': BlendingMode.SOFT_LIGHT,
    'hard_light': BlendingMode.HARD_LIGHT,
    'pin_light': BlendingMode.PIN_LIGHT,
    'vivid_light': BlendingMode.COLOR_BURN, //Approximation
    'soft_light_ifs': BlendingMode.SOFT_LIGHT,
    'soft_light_pegtop_delphi': BlendingMode.SOFT_LIGHT, //Approximation
    'super_light': BlendingMode.PIN_LIGHT, //Approximation
    'linear_dodge': BlendingMode.LINEAR_DODGE,
    'add': BlendingMode.ADD
};

/**
    * The errors when importing oca
    * @readonly
    * @enum {int}
    */
DuAEF.OCA.Errors = {
    INVALID: -2,
    NO_LAYER: -1,
    OK: 1
}


/**
 * Loads an OCA document from a json file
 * @memberof DuAEF.OCA
 * @param {File|string} file - The .json file or its path
 * @return {OCA|null} The OCA document or null if the file could not be parsed or opened
 */
DuAEF.OCA.load = function ( file )
{
    if ( typeof file === 'undefined' ) throw "You must provide the json file.";
    if ( typeof file === 'string' ) file = new File( file );
    if ( !( file instanceof File ) ) throw "file must be a File or a string path.";
    if ( !file.exists ) throw "file does not exist.";

    var data = DuAEF.DuJS.Fs.parseJSON( file );

    //add containing folder
	data.folder = file.parent;
	data.path = data.folder.absoluteURI;

	return data;
}

DuAEF.OCA.importLayer = function (oca, ocaLayer, folder, comp)
{
    // if it's not animated and not a group, just add the frame
    if (!ocaLayer.animated && ocaLayer.type != DuAEF.OCA.layerTypes.GROUP)
    {
        if (ocaLayer.frames.length == 0) return;
        var ocaFrame = ocaLayer.frames[0];
        var frameFile = new File(oca.path + '/' + ocaFrame.fileName);
        var frameItem = app.project.importFile( new ImportOptions( frameFile ) );
        frameItem.parentFolder = folder;
        frameItem.selected = false;
        //create layer
        var l = comp.layers.add( frameItem, ocaFrame.duration );
        l.startTime = ocaFrame.frameNumber / oca.frameRate;
        l.transform.opacity.setValue(ocaFrame.opacity * 100);
        l.transform.position.setValue(ocaFrame.position);
        l.preserveTransparency = ocaLayer.inheritAlpha
        l.enabled = ocaLayer.visible;
        l.guideLayer = ocaLayer.reference;
        if (DuAEF.OCA.BlendingModes[ocaLayer.blendingMode]) l.blendingMode = DuAEF.OCA.BlendingModes[ocaLayer.blendingMode];
        if (ocaLayer.label >= 0) l.label = ocaLayer.label + 1; //Ae labels start at 1, OCA at 0
        return;
    }

    //Create comp
    var layerComp = folder.items.addComp( ocaLayer.name, ocaLayer.width, ocaLayer.height, 1, comp.duration, 1/comp.frameDuration);
    //add to comp
    var preCompLayer = comp.layers.add(layerComp);
    if (DuAEF.OCA.BlendingModes[ocaLayer.blendingMode]) preCompLayer.blendingMode = DuAEF.OCA.BlendingModes[ocaLayer.blendingMode];
    preCompLayer.transform.position.setValue(ocaLayer.position);
    preCompLayer.transform.opacity.setValue(ocaLayer.opacity * 100);
    preCompLayer.enabled = ocaLayer.visible;
    preCompLayer.guideLayer = ocaLayer.reference;
    preCompLayer.collapseTransformation = ocaLayer.passThrough;
    preCompLayer.preserveTransparency = ocaLayer.inheritAlpha

    if (ocaLayer.label >= 0) preCompLayer.label = ocaLayer.label + 1; //Ae labels start at 1, OCA at 0

    if (ocaLayer.type == DuAEF.OCA.layerTypes.GROUP)
    {
        //folder
        var groupFolder = folder.items.addFolder(ocaLayer.name + ' | Group');
        // sublayers
        for (var i = 0, nL = ocaLayer.childLayers.length; i < nL; i++)
        {
            DuAEF.OCA.importLayer(oca, ocaLayer.childLayers[i], groupFolder, layerComp);
        }
    }
    else if (ocaLayer.type == DuAEF.OCA.layerTypes.PAINT)
    {
        // create folder
        var framesFolder = folder.items.addFolder(ocaLayer.name + " | Frames");
        // The expo Effect
        var expoEffect = preCompLayer.property( 'ADBE Effect Parade' ).addProperty( 'ADBE Slider Control' );
        expoEffect.name = "OCAnimation exposure";
        //import frames
        var importedFrames = [];
        for (var j = 0, nF = ocaLayer.frames.length; j < nF; j++)
        {

            var ocaFrame = ocaLayer.frames[j];

            if (ocaFrame.fileName == '') continue;

            var frameFile = new File(oca.path + '/' + ocaFrame.fileName);

            if (!frameFile.exists) continue;
            
            //check if already imported
            var importedFrame = null;
            for ( var k = 0, nIF = importedFrames.length; k < nIF; k++ )
            {
                if ( importedFrames[ k ].mainSource.file.absoluteURI == frameFile.absoluteURI )
                {
                    importedFrame = importedFrames[ k ];
                    break;
                }
            }

            //if not found, import
            if ( !importedFrame )
            {
                importedFrame = app.project.importFile( new ImportOptions( frameFile ) );
                importedFrame.parentFolder = framesFolder;
                importedFrame.selected = false;
                importedFrames.push( importedFrame );
            }

            //create layer
            var l = layerComp.layers.add( importedFrame, ocaFrame.duration / oca.frameRate );
            l.startTime = ocaFrame.frameNumber / oca.frameRate;
            l.transform.opacity.setValue(ocaFrame.opacity * 100);
            l.transform.position.setValue(ocaFrame.position);
            if (ocaLayer.label >= 0) l.label = ocaLayer.label + 1; //Ae labels start at 1, OCA at 0
            preCompLayer.property('ADBE Marker').setValueAtTime(l.startTime, new MarkerValue( '' ));
            expoEffect( 1 ).setValueAtTime( l.startTime, l.startTime );
            DuAEF.DuAE.Property.setKeyInterpolation( expoEffect( 1 ), expoEffect( 1 ).numKeys, KeyframeInterpolationType.HOLD );
        }
    }
}

/**
 * Imports an OCA file with all layers and animation
 * @memberof DuAEF.OCA
 * @param {File} file - The .json or .oca file
 * @return {DuAEF.OCA.Errors} Error
 */
DuAEF.OCA.import = function (file)
{
    var oca = DuAEF.OCA.load( file);
    if (!oca) return DuAEF.OCA.Errors.INVALID;

    var ocaLayers = oca.layers;
    var numLayers = ocaLayers.length;
    if (numLayers == 0) return DuAEF.OCA.Errors.NO_LAYER

    //create folder item
    var ocaFolder = app.project.items.addFolder(oca.name);

    //set project params
    if (DuAEF.OCA.colorDepths[oca.colorDepth] > app.project.bitsPerChannel)
    {
        app.project.bitsPerChannel = DuAEF.OCA.colorDepths[oca.colorDepth];
    }

    //add comp
    var duration = (oca.endTime - oca.startTime) / oca.frameRate;
    var ocaComp =  app.project.items.addComp( oca.name, oca.width, oca.height, 1, duration, oca.frameRate);
    
    oca.backgroundColor.pop();
    ocaComp.bgColor = oca.backgroundColor;

    //import layers
    for (var i = 0, nL = numLayers; i < nL; i++)
    {
        var ocaLayer = oca.layers[i];

        DuAEF.OCA.importLayer(oca, ocaLayer, ocaFolder, ocaComp);
    }

    ocaComp.openInViewer();
}