
/**
 * @class
 * @name Selector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} image - The path to the current image (or a PNG as a string representation)
 * @property {Image} icon - The Image currently displayed
 * @property {StaticText} label - The current text
 * @property {DuButton[]} items  - The buttons
 * @property {int} index  - The current index
 * @property {string} text  - The current text
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 * @property {Selector~onRefresh} onRefresh  - The function to execute when the refresh button is clicked.<br />
 * You can set your own function here, which must take no argument.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback Selector~onChange
 * @memberof Selector
 */

/**
 * The function to execute when the refresh button is clicked.
 * @callback Selector~onRefresh
 * @memberof Selector
 */

/**
 * Adds a new button to the selector
 * @method
 * @memberof Selector
 * @name addButton
 * @param {string} [text] - The text displayed by the button
 * @param {string} [image] - The icon, either a path to the file or a PNG represented as a string.
 * @param {string} [helpTip] - The help tip
 * @param {string} [imageOver] - The roll over icon, either a path to the file or a PNG represented as a string.
 * @param {boolean} [localize=true] - Set to false if the text must not be translated.
 */

/**
 * Removes all buttons from the selector. This is the same as {@link Selector.clear}.
 * @method
 * @memberof Selector
 * @name removeAll
 */

/**
 * Removes all buttons from the selector. This is the same as {@link Selector.removeAll}.
 * @method
 * @memberof Selector
 * @name clear
 */

/**
 * Changes the selection and the current index of the selector
 * @method
 * @memberof Selector
 * @name setCurrentIndex
 * @param {int} index - The new index
 */

/**
 * Changes the selection and the current index of the selector, using the text of the selection
 * @method
 * @memberof Selector
 * @name setCurrentText
 * @param {string} text - The text to select
 */

/**
 * Creates a drop down selector, using image buttons
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @param {bool} [addRefreshButton=false] - When true, the selector includes a refresh button. Add your function to refresh it with the onRefresh callback.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addSelector = function( container, addRefreshButton )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 0;
    selector.alignment = [ 'fill', 'top' ];
    selector.alignChildren = [ 'center', 'center' ];
    selector.mainGroup = selector.add( 'group' );
    selector.mainGroup.orientation = 'row';
    selector.mainGroup.margins = 0;
    selector.mainGroup.spacing = 5;
    selector.mainGroup.alignment = [ 'fill', 'fill' ];
    selector.mainGroup.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );

    //the refresh button
    if (addRefreshButton)
    {
        selector.refreshImage = DuAEF.DuBinary.toFile( w14_update_m );
        selector.refreshImageOver = DuAEF.DuBinary.toFile( w14_update_l );
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton = selector.add( 'image', undefined, selector.refreshImage );
        else selector.refreshButton = selector.add( 'statictext', undefined, 'R' );
        selector.refreshButton.alignment = [ 'right', 'center' ];
    }


    selector.addButton = function( text, image, helpTip, imageOver, localize )
    {
        selector.popup.hide();
        text = def(text, '-');
        image = def(image, '');
        helpTip = def(helpTip, '');
        imageOver = def(imageOver, '');
        localize = def(localize, true);

        if (localize)
        {
            if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( text );
            if ( helpTip != '' ) DuAEF.DuScriptUI.uiStrings.push( helpTip );
            text = tr( text );
            helpTip = tr( helpTip );
        }
        
        var size = text.length * 7;
        if ( selector.label.minimumSize.width < size ) selector.label.minimumSize.width = size;

        var index = selector.items.length;
        selector.items.push( [ text, image, helpTip, imageOver ] );
        //add to popup
        var button = DuAEF.DuScriptUI.addButton( selector.popup.buttons, text, image, helpTip, imageOver, undefined, undefined, undefined, false );
        button.onClick = function()
        {
            selector.setCurrentIndex( index );
            selector.popup.hide();
        };
        if ( button.icon ) button.icon.alignment = [ 'left', 'center' ];
        selector.popup.layout.layout(true);
        selector.popup.update();
    }

    selector.removeAll = function()
    {
        selector.popup.hide();
        selector.items = [];
        selector.setCurrentIndex( 0 );
        for ( var i = selector.popup.buttons.children.length - 1; i >= 0; i-- )
        {
            selector.popup.buttons.remove( selector.popup.buttons.children[ i ] );
        }
        selector.popup.layout.layout(true);
        selector.popup.update();
    }
    selector.clear = selector.removeAll;

    selector.setCurrentIndex = function( index )
    {
        if ( index < 0 ) return;
        if ( index >= selector.items.length ) return;

        var item = selector.items[ index ];

        if ( !item ) return;

        selector.image = item[ 1 ];
        if ( selector.image != '' )
        {
            selector.icon.image = selector.image;
            selector.icon.helpTip = item[ 2 ];
        }
        selector.label.helpTip = item[ 2 ];
        selector.label.text = item[ 0 ];
        selector.imageOver = item[ 3 ];

        selector.index = index;

        selector.text = item[ 0 ];

        selector.onChange();
    }

    selector.setCurrentText = function( text )
    {
        for (var i = 0, n = selector.items.length; i < n; i++)
        {
            if (selector.items[i][0] == text)
            {
                selector.setCurrentIndex(i);
                break;
            }
        }
    }

    //the menu button
    selector.menuImage = DuAEF.DuBinary.toFile( w14_menu_m );
    selector.menuImageOver = DuAEF.DuBinary.toFile( w14_menu_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
    else selector.menuButton = selector.mainGroup.add( 'statictext', undefined, 'M' );
    selector.menuButton.alignment = [ 'left', 'center' ];

    //the image
    selector.image = '';
    selector.icon = selector.mainGroup.add( 'image' );
    selector.icon.alignment = [ 'left', 'center' ];

    //the text
    selector.label = selector.mainGroup.add( 'statictext', undefined, '' );
    selector.label.helpTip = '';
    selector.label.alignment = [ 'fill', 'center' ];

    //if not CS6, add fillers to be able to click anywhere on the button
    if ( DuAEF.DuAE.App.version.version > 11 )
    {
        selector.fillerR = selector.mainGroup.add( 'statictext', undefined, "" );
        selector.fillerR.alignment = [ 'fill', 'fill' ];
    }

    //the image over
    selector.imageOver = '';

    //create popup
    selector.popup = new Window( 'palette', '', undefined,
    {
        borderless: true
    } );
    selector.popup.margins = 2;
    selector.popup.spacing = 0;
    //DuAEF.DuScriptUI.setBackgroundColor(selector.popup,DuAEF.DuJS.Color.Colors.DARK_GREY);
    selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
    selector.popup.closeButton.onClick = function()
    {
        selector.popup.hide();
    };
    selector.popup.buttons = selector.popup.add( 'group' );
    selector.popup.buttons.orientation = 'column';
    selector.popup.buttons.margins = 0;
    selector.popup.buttons.spacing = 0;
    //Deactivate bugs on CS6, needs a try/catch
    selector.popup.onDeactivate = function()
    {
        try
        {
            selector.popup.hide();
        }
        catch ( e )
        {}
    };

    //add default button
    selector.items = [];
    selector.index = -1;


    selector.clicked = function( e )
    {
        var popup = false;

        if ( e.target === selector.menuButton ) popup = true;
        if ( e.altKey ) popup = true;

        if ( popup )
        {
            if ( DuAEF.DuAE.App.version.version < 11 || DuAEF.DuAE.App.version.version >= 12 )
            {
                var x = e.screenX - e.clientX;
                var y = e.screenY - e.clientY;
                selector.popup.location = [ x, y ];
            }
            selector.popup.show();
        }
        else
        {
            var index = selector.index;
            if ( index == selector.items.length - 1 ) index = 0;
            else index++;
            selector.setCurrentIndex( index );
        }
    }

    selector.refreshed = function ( e )
    {
        selector.onRefresh();
    }

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        if ( selector.imageOver != '' ) selector.icon.image = selector.imageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.refreshHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess && addRefreshButton ) selector.refreshButton.image = selector.refreshImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        selector.menuButton.image = selector.menuImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
        if ( selector.image != '' ) selector.icon.image = selector.image;
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess  && addRefreshButton ) selector.refreshButton.image = selector.refreshImage;
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version.version >= 11 && DuAEF.DuAE.App.version.version < 12 )
    {
        selector.label.addEventListener( "mouseover", selector.highlight );
    }
    else
    {
        selector.mainGroup.addEventListener( "mouseover", selector.highlight );
        if (addRefreshButton) selector.refreshButton.addEventListener( "mouseover", selector.refreshHighlight );
    }
    selector.mainGroup.addEventListener( "click", selector.clicked, true );
    if (addRefreshButton) selector.refreshButton.addEventListener( "click", selector.refreshed );

    selector.onChange = function() {};
    selector.onRefresh = function (){};

    return selector;
}

/**
 * @class
 * @name LayerSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addLayerSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [index=0]  - The current layer index, 0 if None
 * @property {CompItem|null} [comp=null] - The composition linked to the selector.<br />
 * If set to null, the seletor will use the current active composition.
 * @property {boolean} [selectedOnly=false] - True to list only selected layers in the composition
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback LayerSelector~onChange
 * @memberof LayerSelector
 */

/**
 * Changes the selection and the current layer index of the selector
 * @method
 * @memberof LayerSelector
 * @name setCurrentIndex
 * @param {int} index - The new layer index
 */

/**
 * Force the refresh of the layer list
 * @method
 * @memberof LayerSelector
 * @name refresh
 */

/**
 * Creates a drop down selector for layers
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {Selector} - The selector
 */
DuAEF.DuScriptUI.addLayerSelector = function( container )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 5;
    selector.alignment = [ 'fill', 'top' ];
    selector.mainGroup = selector.add( 'group' );
    selector.mainGroup.orientation = 'row';
    selector.mainGroup.margins = 0;
    selector.mainGroup.spacing = 5;
    selector.mainGroup.alignment = [ 'fill', 'fill' ];
    selector.mainGroup.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );

    //init
    selector.index = 0;
    selector.comp = null;
    selector.selectedOnly = false;
    selector.pauseRefresh = false;

    var cs6 = DuAEF.DuAE.App.version.version < 12;

    //CS6
    if ( cs6 )
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_layers_m );
        selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the dropdownlist
        selector.popup = {};
        selector.popup.list = selector.mainGroup.add( 'dropdownlist' );
        selector.popup.list.alignment = [ 'fill', 'center' ];

        //the refresh button
        selector.refreshImage = DuAEF.DuBinary.toFile( w14_update_m );
        selector.refreshImageOver = DuAEF.DuBinary.toFile( w14_update_l );
        selector.refreshButton = selector.add( 'image', undefined, selector.refreshImage );
        selector.refreshButton.alignment = [ 'right', 'center' ];
    }
    else
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_layers_m );
        selector.menuImageOver = DuAEF.DuBinary.toFile( w14_layers_l );
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        else selector.menuButton = selector.mainGroup.add( 'statictext', undefined, 'L' );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the text
        selector.label = selector.mainGroup.add( 'statictext', undefined, 'None' );
        selector.label.helpTip = '';
        selector.label.alignment = [ 'fill', 'center' ];

        //create popup
        selector.popup = new Window( 'palette', '', undefined,
        {
            borderless: true
        } );
        selector.popup.margins = 2;
        selector.popup.spacing = 0;
        DuAEF.DuScriptUI.setBackgroundColor( selector.popup, DuAEF.DuJS.Color.Colors.DARK_GREY );
        selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
        selector.popup.closeButton.onClick = function()
        {
            selector.popup.hide();
        };
        selector.popup.onDeactivate = function()
        {
            selector.popup.hide();
        };
        selector.popup.list = selector.popup.add( 'listbox', undefined );

        selector.clicked = function( e )
        {
            selector.refresh();

            selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
            selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

            selector.popup.layout.layout();
            selector.popup.layout.resize();

            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            selector.popup.location = [ x, y ];

            selector.popup.show();
        }

        selector.mainGroup.addEventListener( "click", selector.clicked, true );
    }

    //the pick button
    selector.pickImage = DuAEF.DuBinary.toFile( w14_eyedropper_m );
    selector.pickImageOver = DuAEF.DuBinary.toFile( w14_eyedropper_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton = selector.add( 'image', undefined, selector.pickImage );
    else selector.pickButton = selector.add( 'statictext', undefined, 'P' );
    selector.pickButton.alignment = [ 'right', 'center' ];

    selector.popup.list.add( 'item', "None" );
    selector.popup.list.selection = 0;

    selector.refresh = function()
    {
        var comp = selector.comp;
        if ( !comp ) comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return;

        selector.pauseRefresh = true;

        var layers;
        if ( selector.selectedOnly )
        {
            layers = DuAEF.DuAE.Layer.sortByIndex ( comp.selectedLayers );
        }
        else layers = comp.layers;

        var prevIndex = selector.index;
        selector.popup.list.removeAll();
        selector.popup.list.add( 'item', "None" );
        var it = new Iterator( layers );
        it.do( function( layer )
        {
            selector.popup.list.add( 'item', layer.index + ' | ' + layer.name );
        } );
        selector.setCurrentIndex( prevIndex );

        selector.pauseRefresh = false;
    };

    selector.setCurrentIndex = function( index )
    {
        if ( index < 0 ) return;

        selector.pauseRefresh = true;

        if ( index == 0 )
        {
            selector.popup.list.selection = 0;
        }
        else
        {
            for ( var i = 0, num = selector.popup.list.items.length; i < num; i++ )
            {
                var t = selector.popup.list.items[ i ].text;
                if ( index == parseInt( t.split( ' | ' )[ 0 ] ) )
                {
                    selector.popup.list.selection = i;
                    break;
                }
            }
        }

        if ( !cs6 )
        {
            if ( selector.popup.list.selection ) selector.label.text = selector.popup.list.selection.text;
            else
            {
                selector.popup.list.selection = 0;
                selector.label.text = "None";
            }
        }

        selector.index = index;

        selector.pauseRefresh = false;

        selector.onChange();
    };

    selector.popup.list.onChange = function()
    {
        if ( selector.pauseRefresh ) return;
        var t = selector.popup.list.selection.text;
        var index = parseInt( t.split( ' | ' )[ 0 ] );
        selector.setCurrentIndex( index );
        if ( !cs6 ) selector.popup.hide();
    };

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.pickHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        selector.pickButton.image = selector.pickImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        selector.menuButton.image = selector.menuImage;
        selector.pickButton.image = selector.pickImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
    }

    selector.pick = function()
    {
        var layers = DuAEF.DuAE.Comp.getSelectedLayers();
        if ( layers.length > 0 ) selector.setCurrentIndex( layers[ 0 ].index );
    }

    selector.getLayer = function()
    {
        if ( selector.index < 1 ) return null;
        var comp = selector.comp;
        if ( !comp ) comp = DuAEF.DuAE.Project.getActiveComp();
        if ( !comp ) return null;
        try
        {
            alert(selector.index);
            return comp.layer( selector.index )
        }
        catch ( e )
        {
            return null
        };
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version.version >= 11 && DuAEF.DuAE.App.version.version < 12 )
    {
        selector.refreshButton.addEventListener( "mousedown", selector.refresh, false );
    }
    else
    {
        selector.mainGroup.addEventListener( "mouseover", selector.highlight );
        selector.pickButton.addEventListener( "mouseover", selector.pickHighlight );
    }

    selector.pickButton.addEventListener( "click", selector.pick );

    selector.onChange = function() {};

    selector.refresh();

    return selector;
}


/**
 * @class
 * @name CompSelector
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A drop down selector.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addCompSelector} to create a Selector.<br />
 * The Selector inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {int} [id=0]  - The current compitem id, 0 if None
 * @property {CompItem[]} [comps] - The compositions listed in the selector.
 * @property {Selector~onChange} onChange  - The function to execute when the index changes.<br />
 * You can set your own function here, which must take no argument.<br />
 * The method is called after the index has changed.
 * @property {Selector~filterComps} filterComps - A function which gets the comps to set in the selector.<br />
 * The default function will get all the comps in the project,<br />
 * You can set your own function here, which must take no argument.<br />
 * The function must return an array of CompItem.
 */

/**
 * The function to execute when the index changes.<br />
 * The method is called after the index has changed.
 * @callback CompSelector~onChange
 * @memberof CompSelector
 */


/**
 * A function which gets the comps to set in the selector.<br />
 * The default function will get all the comps in the project,<br />
 * assign another function to this callback if you need to filter these comps.<br />
 * The function must return an array of CompItem.
 * @callback CompSelector~filterComps
 * @memberof CompSelector
 * @return {CompItem[]} The compositions to set in the selector.
 */

/**
 * Changes the selection and the current comp id of the selector
 * @method
 * @memberof CompSelector
 * @name setCurrentId
 * @param {int} index - The new comp id
 */

/**
 * Sets the comp list
 * @method
 * @memberof CompSelector
 * @name setComps
 * @param {CompItem[]} [comps] - The list of compositions. By default, will use {@link CompSelector.filterComps()} to get the comps.
 */

/**
 * Gets the selected comp
 * @method
 * @memberof CompSelector
 * @name getComp
 * @return {CompItem|null} the selected comp
 */

/**
 * Creates a drop down selector for compositions
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the selector.
 * @return {CompSelector} - The selector
 */
DuAEF.DuScriptUI.addCompSelector = function( container )
{
    //create main group
    var selector = container.add( 'group' );
    selector.orientation = 'row';
    selector.margins = 2;
    selector.spacing = 5;
    selector.alignment = [ 'fill', 'top' ];
    selector.mainGroup = selector.add( 'group' );
    selector.mainGroup.orientation = 'row';
    selector.mainGroup.margins = 0;
    selector.mainGroup.spacing = 5;
    selector.mainGroup.alignment = [ 'fill', 'fill' ];
    selector.mainGroup.alignChildren = [ 'center', 'center' ];
    DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );

    //init
    selector.id = 0;
    selector.comp = null;
    selector.selectedOnly = false;
    selector.pauseRefresh = false;

    var cs6 = DuAEF.DuAE.App.version.version >= 11 && DuAEF.DuAE.App.version.version < 12;

    //CS6
    if ( cs6 )
    {
        //the menu button
        selector.menuImage = DuAEF.DuBinary.toFile( w14_comp_m );
        selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
        selector.menuButton.alignment = [ 'left', 'center' ];

        //the dropdownlist
        selector.popup = {};
        selector.popup.list = selector.mainGroup.add( 'dropdownlist' );
        selector.popup.list.alignment = [ 'fill', 'center' ];
    }
    else
    {
        //the menu button
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess )
        {
            selector.menuImage = DuAEF.DuBinary.toFile( w14_comp_m );
            selector.menuImageOver = DuAEF.DuBinary.toFile( w14_comp_l );
            selector.menuButton = selector.mainGroup.add( 'image', undefined, selector.menuImage );
            selector.menuButton.alignment = [ 'left', 'center' ];
        }


        //the text
        selector.label = selector.mainGroup.add( 'statictext', undefined, 'None' );
        selector.label.helpTip = '';
        selector.label.alignment = [ 'fill', 'center' ];

        //create popup
        selector.popup = new Window( 'palette', '', undefined,
        {
            borderless: true
        } );
        selector.popup.margins = 2;
        selector.popup.spacing = 0;
        DuAEF.DuScriptUI.setBackgroundColor( selector.popup, DuAEF.DuJS.Color.Colors.DARK_GREY );
        selector.popup.closeButton = DuAEF.DuScriptUI.addButton( selector.popup, "Cancel" );
        selector.popup.closeButton.onClick = function()
        {
            selector.popup.hide();
        };
        selector.popup.onDeactivate = function()
        {
            selector.popup.hide();
        };
        selector.popup.list = selector.popup.add( 'listbox', undefined );

        selector.clicked = function( e )
        {
            selector.popup.list.minimumSize.width = selector.popup.list.maximumSize.width = selector.size.width;
            selector.popup.list.minimumSize.height = selector.popup.list.maximumSize.height = selector.size.height * 10;

            selector.popup.layout.layout();
            selector.popup.layout.resize();

            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            selector.popup.location = [ x, y ];

            selector.popup.show();
        }
    }

    //the pick & refresh buttons
    selector.pickImage = DuAEF.DuBinary.toFile( w14_eyedropper_m );
    selector.pickImageOver = DuAEF.DuBinary.toFile( w14_eyedropper_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton = selector.add( 'image', undefined, selector.pickImage );
    else selector.pickButton = selector.add( 'statictext', undefined, 'P' );
    selector.pickButton.alignment = [ 'right', 'center' ];

    //the refresh button
    selector.refreshImage = DuAEF.DuBinary.toFile( w14_update_m );
    selector.refreshImageOver = DuAEF.DuBinary.toFile( w14_update_l );
    if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton = selector.add( 'image', undefined, selector.refreshImage );
    else selector.refreshButton = selector.add( 'statictext', undefined, 'R' );
    selector.refreshButton.alignment = [ 'right', 'center' ];

    var itemNone = selector.popup.list.add( 'item', "None" );
    itemNone.id = 0;
    selector.popup.list.selection = 0;

    selector.setComps = function()
    {
        var comps = selector.filterComps();
        selector.pauseRefresh = true;

        var prevId = selector.id;
        selector.popup.list.removeAll();
        var itemNone = selector.popup.list.add( 'item', "None" );
        itemNone.id = 0;
        var it = new Iterator( comps );
        it.do( function( comp )
        {
            var item = selector.popup.list.add( 'item', comp.name );
            item.id = comp.id;
        } );
        selector.setCurrentId( prevId );

        selector.pauseRefresh = false;
    };

    selector.getComp = function()
    {
        if ( selector.id == 0 ) return null;
        return DuAEF.DuAE.Project.getItemById( selector.id );
    }

    selector.setCurrentId = function( id )
    {
        if ( id < 0 ) id = 0;

        selector.pauseRefresh = true;

        if ( id == 0 )
        {
            selector.popup.list.selection = 0;
        }
        else
        {
            for ( var i = 0, num = selector.popup.list.items.length; i < num; i++ )
            {
                var item = selector.popup.list.items[ i ];
                if ( id == item.id )
                {
                    selector.popup.list.selection = i;
                    break;
                }
            }
        }

        if ( !cs6 )
        {
            if ( selector.popup.list.selection ) selector.label.text = selector.popup.list.selection.text;
            else
            {
                selector.popup.list.selection = 0;
                selector.label.text = "None";
            }
        }

        selector.id = id;

        selector.pauseRefresh = false;

        selector.onChange();
    };

    selector.popup.list.onChange = function()
    {
        if ( selector.pauseRefresh ) return;
        selector.setCurrentId( selector.popup.list.selection.id );
        if ( !cs6 ) selector.popup.hide();
    };

    selector.onChange = function() {};

    //mouse over
    selector.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton.image = selector.menuImageOver;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.DARK_GREY );
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.refreshHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton.image = selector.refreshImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.pickHighlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton.image = selector.pickImageOver;
        DuAEF.DuScriptUI.highlightedControls.push( selector );
    }

    selector.dim = function( e )
    {
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.menuButton.image = selector.menuImage;
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.refreshButton.image = selector.refreshImage;
        if ( DuAEF.DuAE.App.hasFilesAndNetworkAccess ) selector.pickButton.image = selector.pickImage;
        DuAEF.DuScriptUI.setTextColor( selector.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( selector, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
    }

    selector.pick = function()
    {
        var comp = DuAEF.DuAE.Project.getActiveComp();
        if ( comp ) selector.setCurrentId( comp.id );
    }

    // Hack - CS6 Bugs on mouseover with images
    if ( DuAEF.DuAE.App.version.version >= 11 && DuAEF.DuAE.App.version.version < 12 )
    {
        //selector.label.addEventListener("mouseover",selector.highlight);
    }
    else
    {
        selector.mainGroup.addEventListener( "mouseover", selector.highlight );
        selector.refreshButton.addEventListener( "mouseover", selector.refreshHighlight );
        selector.pickButton.addEventListener( "mouseover", selector.pickHighlight );
    }

    selector.mainGroup.addEventListener( "click", selector.clicked, true );
    selector.refreshButton.addEventListener( "click", selector.setComps );
    selector.pickButton.addEventListener( "click", selector.pick );

    selector.onChange = function() {};
    selector.filterComps = function()
    {
        var comps = DuAEF.DuAE.Project.getComps();
        return comps;
    };

    return selector;
}
