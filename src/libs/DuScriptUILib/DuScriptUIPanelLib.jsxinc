
/**
 * @class
 * @name DuPanel
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Panel or Window.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createUI} to create a Panel.<br />
 * The DuPanel inherits the Panel or Window object from ScriptUI and has all of its properties and methods.
 * @property {Group} contents - The ScriptUI group where the new controls must be added. Do not add any control directly inside the DuPanel.
 * @property {DuPanel~refreshUI} refreshUI - A function to reload a script in this panel
 */

/**
 * A function to reload a script in this panel.
 * @callback DuPanel~refreshUI
 * @param {File} file - The script to reload. 
 * @return {boolean} true on success, false otherwise.
 * @memberof DuPanel
 */

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null}		container	- The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string}	scriptName	- A name for this UI
 * @param {string[]}	[contentAlignment=DuAEF.DuScriptUI.defaultColumnAlignment]	- The alignment of the contents in the panel
 * @param {string}	[borderless=false]	- When true, creates a borderless window if container is not a panel
 * @return {DuPanel}	The panel created, either a ScriptUI Panel or a ScriptUI Window.
 * @example
 * var ui = DuAEF.DuScriptUI.createUI(this,"Test Script");
 * var refreshButton = ui.contents.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuAEF.DuScriptUI.showUI(ui);
 */
DuAEF.DuScriptUI.createUI = function( container, scriptName, contentAlignment, bless )
{
    scriptName = def(scriptName, DuAEF.scriptName, false);
    contentAlignment = def(contentAlignment, DuAEF.DuScriptUI.defaultColumnAlignment, false);
    bless = def (bless, false);

    if ( scriptName != '' ) DuAEF.DuScriptUI.uiStrings.push( scriptName );
    scriptName = tr( scriptName );

    var myPal = null;
    container instanceof Panel ? myPal = container : myPal = new Window( 'palette', scriptName, undefined,
    {
        resizeable: true,
        borderless: bless
    } );

    if ( myPal == null ) throw "Failed to create User Interface.";

    myPal.margins = 0;
    myPal.spacing = 0;

    //create margins to dim buttons
    var topMargin = myPal.add( 'button' );
    topMargin.onDraw = function() {};
    topMargin.minimumSize.height = DuAEF.DuScriptUI.defaultMargins;
    topMargin.alignment = [ 'fill', 'top' ];
    topMargin.maximumSize.height = topMargin.minimumSize.height = topMargin.preferredSize.height = DuAEF.DuScriptUI.defaultMargins;

    var mainRow = myPal.add( 'group' );
    mainRow.alignment = contentAlignment;
    mainRow.alignChildren = contentAlignment;
    mainRow.margins = 0;
    mainRow.spacing = 0;

    var leftMargin = mainRow.add( 'button' );
    leftMargin.onDraw = function() {};
    leftMargin.maximumSize.width = leftMargin.minimumSize.width = leftMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
    leftMargin.alignment = [ 'left', 'fill' ];

    myPal.contents = mainRow.add( 'group' );
    myPal.contents.margins = 0;
    myPal.contents.spacing = DuAEF.DuScriptUI.defaultSpacing;
    myPal.contents.alignChildren = DuAEF.DuScriptUI.defaultColumnAlignment;
    myPal.contents.orientation = "column";

    var rightMargin = mainRow.add( 'button' );
    rightMargin.onDraw = function() {};
    rightMargin.maximumSize.width = rightMargin.minimumSize.width = rightMargin.preferredSize.width = DuAEF.DuScriptUI.defaultMargins;
    rightMargin.alignment = [ 'right', 'fill' ];

    var bottomMargin = myPal.add( 'button' );
    bottomMargin.onDraw = function() {};
    bottomMargin.maximumSize.height = bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = DuAEF.DuScriptUI.defaultMargins;
    bottomMargin.alignment = [ 'fill', 'bottom' ];

    myPal.refreshUI = function( scriptFile )
    {

        function refresh ()
        {
            var ok = false;
            DuAEF.DuScriptUI.dimControls();
            // Remove everything
            for ( var i = myPal.children.length - 1; i >= 0; i-- )
            {
                myPal.remove( this.children[ i ] );
            }

            // delete DuAEF
            delete DuAEF;
            delete tr;

            // Run the scriptFile
            try
            {
                ok = true;
                $.evalFile( scriptFile );
            }
            catch ( err )
            {
                ok = false;
                //add debug info
                if ( DuAEF.debug )
                {
                    myPal.add( 'statictext', undefined, err.fileName,
                    {
                        multiline: true
                    } );
                    myPal.add( 'statictext', undefined, err.message,
                    {
                        multiline: true
                    } );
                    myPal.add( 'statictext', undefined, "on line" + err.line );
                    //add a refresh button
                    var button = myPal.add( 'button', undefined, "Refresh UI" );
                    button.onClick = function()
                    {
                        myPal.refreshUI( scriptFile )
                    };
                }
            }

            // Recalculate UI
            myPal.layout.layout( true );
            myPal.layout.resize();

            return ok;
        }

        return refresh.call( myPal );
    }

    myPal.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    topMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    leftMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    rightMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    bottomMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    return myPal;
}

/**
 * @class
 * @name DuPopup
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A borderless popup, to be tied to a ui control.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createPopup} to create a Popup.<br />
 * The DuPopup inherits the Window object from ScriptUI and has all of its properties and methods.
 * @property {Group} contents - The ScriptUI group where the new controls must be added. Do not add any control directly inside the DuPopup.
 * @property {boolean} pinned - true if this popup is "pinned", which means it won't hide when the user clicks outside of the window.
 */

/**
 * Ties the popup to a ui control. The popup will be shown just above the control when it is clicked.<br />
 * The control must have an addEventListener method.
 * @method
 * @memberof DuPopup
 * @name tieTo
 * @param {ScriptUI} [control] - The control
 */

/**
 * Pins the popup (it won't be hidden anymore when deactivated).
 * @method
 * @memberof DuPopup
 * @name pin
 * @param {boolean} [pinned=true] - true to pin the popup, false to un-pin it.
 */

/**
 * Creates a borderless popup
 * @memberof DuAEF.DuScriptUI
 * @param {string} title The title of the popup
 * @param {string[]} [alignment=DuAEF.DuScriptUI.defaultColumnAlignment] The alignement of this window
 * @param {boolean} [modal=false] Set the popup to a modal dialog
 * @return {DuPopup} The popup, a ScriptUI Window which is borderless, with a 'tieTo(control)' method.
 * @example
 * var popup = DuAEF.DuScriptUI.createPopup( );
 * var popupButton = DuAEF.DuScriptUI.addButton( myUI, "My Buttton for the popup" );
 * popup.tieTo( popupButton ); // will show the popup when the button is clicked, just above it.
 */
DuAEF.DuScriptUI.createPopup = function( title, alignment, modal )
{
    modal = def(modal, false);
    alignment = def( alignment, DuAEF.DuScriptUI.defaultColumnAlignment );
    title = def (title, "");

    if (title != "")
    {
        DuAEF.DuScriptUI.uiStrings.push( title );
        title = tr( title );
    }
    
    var type = 'palette';
    if (modal) type = 'dialog'; 
    var popup = new Window( type, title, undefined,
    {
        resizeable: false,
        borderless: true
    } );

    popup.margins = 0;
    popup.spacing = 0;
    popup.pinned = false;

    //add stroke around
    function drawBorder ( drawState ) {
        var g = this.graphics;
        var c = DuAEF.DuJS.Color.Colors.DARK_GREY;
        c = DuAEF.DuScriptUI.adjustColor( c );

        var pen = g.newPen( g.PenType.SOLID_COLOR, c, 1 );

        g.newPath();
        if (this.side == 0) {
            g.moveTo (0, 0);
            g.lineTo (this.size.width, 0);
        }
        else if (this.side == 2) {
            g.moveTo (this.size.width, 0);
            g.lineTo (this.size.width, this.size.height);
        }
        else if (this.side == 1) {
            g.moveTo (0, 0);
            g.lineTo (0, this.size.height);
        }
        else if (this.side == 3) {
            g.moveTo (0, this.size.height);
            g.lineTo (this.size.width, this.size.height);
        }

        g.strokePath( pen );
    };

    //create margins to dim buttons
    var topMargin = popup.add( 'group' );
    topMargin.onDraw = drawBorder;
    topMargin.side = 0;
    topMargin.minimumSize.height = DuAEF.DuScriptUI.defaultMargins;
    topMargin.alignment = [ 'fill', 'top' ];
    topMargin.maximumSize.height = topMargin.minimumSize.height = topMargin.preferredSize.height = 1;
    DuAEF.DuScriptUI.setBackgroundColor( topMargin, DuAEF.DuJS.Color.Colors.DARK_GREY );
    
    var mainRow = popup.add( 'group' );
    mainRow.alignment = alignment;
    mainRow.alignChildren = alignment;
    mainRow.margins = 0;
    mainRow.spacing = 0;

    var leftMargin = mainRow.add( 'button' );
    leftMargin.onDraw = drawBorder;
    leftMargin.side = 1;
    leftMargin.maximumSize.width = leftMargin.minimumSize.width = leftMargin.preferredSize.width = 1;
    leftMargin.alignment = [ 'left', 'fill' ];

    var mainColumn = mainRow.add( 'group' );
    mainColumn.orientation = 'column';
    mainColumn.spacing = DuAEF.DuScriptUI.defaultMargins;
    mainColumn.margins = 0;
    mainColumn.alignment = ['fill','fill'];

    var titleBar = mainColumn.add( 'group' );
    titleBar.margins = 0;
    titleBar.spacing = 0;
    titleBar.alignment = ['fill','top'];
    DuAEF.DuScriptUI.setBackgroundColor( titleBar, DuAEF.DuJS.Color.Colors.DARK_GREY );
    //add pin
    var pinButton = DuAEF.DuScriptUI.addCheckBox(titleBar, '', DuAEF.DuBinary.toFile(w14_pin_m), 'Pin window', DuAEF.DuBinary.toFile(w14_pin_r));
    pinButton.alignment = [ 'left', 'top' ];
    //add title
    var titleLabel = titleBar.add('statictext', undefined,  title);
    titleLabel.alignment = [ 'center', 'top' ];
    if (modal) DuAEF.DuScriptUI.setTextColor(titleLabel, DuAEF.DuJS.Color.Colors.RAINBOX_RED)
    //add close button
    var closeButton = DuAEF.DuScriptUI.addButton(titleBar, '', DuAEF.DuBinary.toFile(w14_cancel_m), 'Close', DuAEF.DuBinary.toFile(w14_cancel_l));
    closeButton.alignment = [ 'right', 'top' ];

    popup.contents = mainColumn.add( 'group' );
    popup.contents.margins = 0;
    popup.contents.spacing = DuAEF.DuScriptUI.defaultSpacing;
    popup.contents.alignChildren = alignment;
    popup.contents.orientation = "column";

    var rightMargin = mainRow.add( 'button' );
    rightMargin.onDraw = drawBorder;
    rightMargin.side = 2;
    rightMargin.maximumSize.width = rightMargin.minimumSize.width = rightMargin.preferredSize.width = 1;
    rightMargin.alignment = [ 'right', 'fill' ];

    var bottomMargin = popup.add( 'button' );
    bottomMargin.onDraw = drawBorder;
    bottomMargin.side = 3;
    bottomMargin.maximumSize.height = bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = 1;
    bottomMargin.alignment = [ 'fill', 'bottom' ];

    popup.tieTo = function (control)
    {
        control.addEventListener( 'click', function(e) {
            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            //we need a layout and resize to get the window frame size
            popup.layout.layout( true );
            popup.layout.resize( );
            var location = [x,y];
            if ( DuAEF.DuAE.App.isVersionHigherThan("CS6") )
            {
                location = DuAEF.DuScriptUI.moveInsideScreen( [x, y], popup.frameSize );
            } 
            popup.location = location;
            if (!popup.pinned) DuAEF.DuScriptUI.eventFunctionsPaused = true;
            popup.show();
        }, true);
    }

    popup.pin = function(p)
    {
        p = def (p, true);
        popup.pinned = p;
        pinButton.setChecked(p);
    }

    var movingTitle = false;
    var movingPopup = false;
    var startMouseLocation = [0,0];
    var startPopupLocation = [0,0];

    function enterTitleMoveState(e)
    {
        movingTitle = true;
        startMouseLocation = [e.screenX, e.screenY];
        startPopupLocation = [popup.location[0], popup.location[1]];
    }

    function enterPopupMoveState(e)
    {
        movingPopup = true;
        startMouseLocation = [e.screenX, e.screenY];
        startPopupLocation = [popup.location[0], popup.location[1]];
    }

    function movePopup(e)
    {
        if (!movingPopup) return;
        if (movingTitle) return;
        var x = e.screenX - startMouseLocation[0];
        var y = e.screenY - startMouseLocation[1];
        popup.location = [ x, y ] + startPopupLocation;
    }

    function moveTitle(e)
    {
        if (!movingTitle) return;
        var x = e.screenX - startMouseLocation[0];
        var y = e.screenY - startMouseLocation[1];
        popup.location = [ x, y ] + startPopupLocation;
    }

    function endMoveState(e)
    {
        movingTitle = false;
        movingPopup = false;
    }

    function esc(e)
    {
        if ( e.keyName == "Escape") hidePopup();
    }

    function hidePopup()
    {
        popup.hide();
        DuAEF.DuScriptUI.eventFunctionsPaused = false;
    }

    popup.cancel = hidePopup;

    popup.onDeactivate = function () { if (!popup.pinned) hidePopup(); };
    closeButton.onClick = hidePopup;

    pinButton.onClick = function () { popup.pin(pinButton.checked); };

    popup.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    popup.addEventListener( "keydown", esc );
    topMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    leftMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    rightMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    bottomMargin.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );
    titleBar.addEventListener( "mouseover", DuAEF.DuScriptUI.dimControls );

    titleBar.addEventListener( "mousedown", enterPopupMoveState );
    titleBar.addEventListener( "mousemove", movePopup);
    titleBar.addEventListener( "mouseup", endMoveState );
    titleBar.addEventListener( "mouseout", endMoveState );

    titleLabel.addEventListener( "mousedown", enterTitleMoveState );
    titleLabel.addEventListener( "mousemove", moveTitle );
    titleLabel.addEventListener( "mouseup", endMoveState );
    titleLabel.addEventListener( "mouseout", endMoveState );

    if (modal) popup.pin();

    return popup;
}

/**
 * Resizes and shows the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 * @param {boolean}		[enterRunTime=false]	- Set to true to automatically set DuAEF to runtime state<br />
 * Set this to false if the ui shown is not the actual main panel of the script and it is shown before the main panel has been loaded.
 */
DuAEF.DuScriptUI.showUI = function( ui, enterRunTime )
{
    enterRunTime = def( enterRunTime, true);

    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI" );

    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Defining layout" );
    ui.layout.layout( true );
    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Resizing" );
    ui.layout.resize();
    ui.onResizing = ui.onResize = function()
    {
        try
        {
            ui.layout.resize();
        }
        catch ( e )
        {}
    }
    DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: UI Ready" );

    // If it's a Window, it needs to be shown
    if ( ui instanceof Window )
    {
        DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Showing window" );
        //ui.center();
        ui.show();
        DuAEF.Debug.log( "DuAEF.DuScriptUI.showUI: Window visible." );
    }

    DuAEF.DuScriptUI.uiShown = true;

    if (enterRunTime) DuAEF.enterRunTime();
}

/**
 * @class
 * @name DuMainPanel
 * @extends DuPanel
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Panel or Window.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.createMainPanel} to create a Panel.<br />
 * @property {Group} settingsGroup - The ScriptUI group where to add the UI for the settings of the script.
 * @property {Group} mainGroup - The ScriptUI group where to add the main UI of the script.
 * @property {DuPanel~refreshUI} refreshUI - A function to reload a script in this panel
 */

/**
 * Creates the main panel of a script
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|null} container - The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {bool} [addSettingsButton=true] - Wether to create a button to open the settings or not
 * @param {bool} [addHelpButton=false] - Wether to create a button to open the help panel or not
 * @param {bool} [helpButtonOpensPanel=false] - The help button opens a help panel instead of the link to the documentation
 * @param {bool} [addSanityTestButton=false] - The sanity test button monitors the project sanity, and opens a panel to check what may be wrong
 * @param {File} [scriptFile] - The main script file, needed for the refresh button in debug mode
 * @return {DuMainPanel} The panel created, either a ScriptUI Panel or a ScriptUI Window.
 * @example
 * var ui = DuAEF.DuScriptUI.createUI(this,"Test Script");
 * var refreshButton = ui.contents.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuAEF.DuScriptUI.showUI(ui);
 */
DuAEF.DuScriptUI.createMainPanel = function( container, addSettingsButton, addHelpButton, helpButtonOpensPanel, addSanityTestButton, scriptFile )
{
    addSettingsButton = def(addSettingsButton, true);
    addHelpButton = def(addHelpButton, false);
    helpButtonOpensPanel = def(helpButtonOpensPanel, false);
    addSanityTestButton = def(addSanityTestButton, false);

    var panel = DuAEF.DuScriptUI.createUI( container, undefined, ['fill','fill'] );
    panel.contents.orientation = 'stack';
    panel.contents.alignment = ['fill','fill'];

    var contentsMainGroup = DuAEF.DuScriptUI.addGroup(panel.contents, 'column');
    contentsMainGroup.alignment = ['fill', 'fill'];
    var contentsMainStack = DuAEF.DuScriptUI.addGroup(contentsMainGroup, 'column');
    contentsMainStack.orientation = 'stack';
    contentsMainStack.alignment = ['fill', 'fill'];

    panel.mainGroup = DuAEF.DuScriptUI.addGroup(contentsMainStack, 'column');
    panel.mainGroup.alignment = ['fill', 'fill'];

    //a margin at the bottom (hidden by the bottom bar buttons)
    var mainGroupMarginBottom = DuAEF.DuScriptUI.addGroup(contentsMainGroup, 'column');
    mainGroupMarginBottom.alignment= ['fill', 'bottom'];
    mainGroupMarginBottom.minimumSize = [0, 20];
    
    // == SETTINGS PANEL
    var rootSettingsGroup = DuAEF.DuScriptUI.addGroup(contentsMainStack, 'column');
    rootSettingsGroup.alignment = ['fill', 'fill'];
    rootSettingsGroup.visible = false;
    panel.settingsGroup = DuAEF.DuScriptUI.addGroup(rootSettingsGroup, 'column');
    panel.settingsGroup.alignment = ['fill', 'top'];
    var settingsBackButton = DuAEF.DuScriptUI.addButton(
        rootSettingsGroup,
        "Back",
        DuAEF.DuBinary.toFile(w14_back_m),
        "Close settings",
        DuAEF.DuBinary.toFile(w14_back_l)
    )

    // == SANITY PANEL
    panel.sanityGroup = DuAEF.DuScriptUI.createPopup("Sanity Report", 'column');
    panel.sanityGroup.pin(true);

    // == Bottom Line
    var bottomGroup = DuAEF.DuScriptUI.addGroup(panel.contents, 'row');
    bottomGroup.alignment = ['fill', 'bottom'];
    DuAEF.DuScriptUI.setBackgroundColor(bottomGroup, DuAEF.DuJS.Color.Colors.AE_DARK_GREY, false);

    var versionButton = DuAEF.DuScriptUI.addVersionButton(
        bottomGroup
        );
    versionButton.alignment = ['left', 'bottom'];

    if (DuAEF.bugReportURL != '')
    {
        var bugButton = DuAEF.DuScriptUI.addBugButton( bottomGroup );
        bugButton.alignment = ['right', 'fill'];
    }
    
    if (DuAEF.featureRequestURL != '')
    {
        var featureRequestButton = DuAEF.DuScriptUI.addFeatureRequestButton( bottomGroup );
        featureRequestButton.alignment = ['right', 'fill'];
    }
    
    if (addSettingsButton)
    {
        var settingsButton = DuAEF.DuScriptUI.addButton(
            bottomGroup,
            '',
            DuAEF.DuBinary.toFile(w18_settings_l),
            "Change the settings",
            DuAEF.DuBinary.toFile(w18_settings_r)
            );
        settingsButton.alignment = ['right', 'fill'];

        settingsButton.onClick = function()
        {
            if (!rootSettingsGroup.visible)
            {
                panel.mainGroup.visible = false;
                rootSettingsGroup.visible = true;
            }
            else
            {
                panel.mainGroup.visible = true;
                rootSettingsGroup.visible = false;
            }
        }

        settingsBackButton.onClick = function()
        {
            panel.mainGroup.visible = true;
            rootSettingsGroup.visible = false;
        }

    }

    if (addHelpButton)
    {
        var helpButton = DuAEF.DuScriptUI.addHelpButton( bottomGroup, false, helpButtonOpensPanel );
        helpButton.alignment = ['right', 'fill'];
    }
    
    var buttonM = DuAEF.DuBinary.toFile(w14_brain_m);
    var buttonB = DuAEF.DuBinary.toFile(w14_brain_b);
    var buttonY = DuAEF.DuBinary.toFile(w14_brain_y);
    var buttonO = DuAEF.DuBinary.toFile(w14_brain_o);
    var buttonR = DuAEF.DuBinary.toFile(w14_brain_r);
    var buttonP = DuAEF.DuBinary.toFile(w14_brain_p);
    var sanityButton;

    if (addSanityTestButton)
    {
        sanityButton = DuAEF.DuScriptUI.addButton(
            bottomGroup,
            '',
            buttonM,
            "Sanity report",
            buttonR
            );
        sanityButton.minimumSize = sanityButton.maximumSize = [14,14];
        sanityButton.alignment = ['right','center'];
        sanityButton.setBackgroundColor(DuAEF.DuJS.Color.Colors.ORANGE);
        sanityButton.onClick = function()
        {
            DuAEF.DuSanity.test(true);
            checkSanity();
        }
        panel.sanityGroup.tieTo(sanityButton);

        // Create UI
        DuAEF.DuSanity.createUI( panel.sanityGroup.contents );
       
        function checkSanity()
        {
            try {
                var level = DuAEF.DuSanity.currentLevel;
                if (level == DuAEF.DuSanity.Levels.UNKNOWN || level == DuAEF.DuSanity.Levels.OK)
                    sanityButton.setStandardImage(buttonM);
                else if (level == DuAEF.DuSanity.Levels.INFO)
                    sanityButton.setStandardImage(buttonB);
                else if (level == DuAEF.DuSanity.Levels.WARNING)
                    sanityButton.setStandardImage(buttonY);
                else if (level == DuAEF.DuSanity.Levels.BAD)
                    sanityButton.setStandardImage(buttonO);
                else if (level == DuAEF.DuSanity.Levels.CRITICAL)
                    sanityButton.setStandardImage(buttonR);
                else if (level == DuAEF.DuSanity.Levels.FATAL)
                    sanityButton.setStandardImage(buttonP);
            }
            catch (e)
            {
                DuAEF.Debug.error(e);
            }
        }

        DuAEF.DuScriptUI.addEvent(checkSanity,1000);

        DuAEF.DuSanity.init();
    }

    //Refresh button
    if ( DuAEF.debug && (scriptFile instanceof File) && scriptFile.exists )
    {
        var refreshButton = bottomGroup.add( 'button', undefined, 'R' );
        refreshButton.alignment = [ 'right', 'bottom' ];
        refreshButton.maximumSize = [ 20, 20 ];
        refreshButton.onClick = function()
        {
            panel.refreshUI( thisScriptFile );
        };
    }

    return panel;
}