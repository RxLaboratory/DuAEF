
/**
 * @class
 * @name DuButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Image Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addButton} to create an Image Button.<br />
 * The Image Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {string} standardImage - The path to the image (or a PNG as a string representation)
 * @property {string} imageOver - The path to the image (or a PNG as a string representation) to display when mouseover
 * @property {Image} image - The scriptui object representing the image
 * @property {StaticText} label - The label
 * @property {DuPopup} optionsPanel - A panel for options
 * @property {DuButton~onClick} onClick - The function to execute when the button is clicked
 * @property {DuButton~onAltClick} onClick - The function to execute when the button is Alt + clicked
 * @property {DuButton~onCtrlClick} onClick - The function to execute when the button is Ctrl + clicked
 * @property {DuButton~onCtrlAltClick} onClick - The function to execute when the button is Ctrl + Alt + clicked
 */

/**
 * The function to execute when the button is clicked.
 * @callback DuButton~onClick
 * @memberof DuButton
 */

/**
 * The function to execute when the button is Alt + clicked.
 * @callback DuButton~onAltClick
 * @memberof DuButton
 */

/**
 * The function to execute when the button is Ctrl + clicked.
 * @callback DuButton~onCtrlClick
 * @memberof DuButton
 */

/**
 * The function to execute when the button is Ctrl + Alt + clicked.
 * @callback DuButton~onCtrlAltClick
 * @memberof DuButton
 */

/**
 * Changes the background color of the button.
 * @method
 * @memberof DuButton
 * @name setBackgroundColor
 * @param {float[]} color - the color.
 */

/**
 * Changes the text color of the button.
 * @method
 * @memberof DuButton
 * @name setTextColor
 * @param {float[]} color - the color.
 */

/**
 * Sets the standard image of the button.
 * @method
 * @memberof DuButton
 * @name setStandardImage
 * @param {string} image - the path to the image.
 */

/**
 * Creates a button with an optionnal icon. Must have at least an icon or a text, or both.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					[text]		- The label of the button. Default: empty string
 * @param {string}					[image]		- The path to the icon. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {string}					[imageOver=image]	- The path to an icon displayed when the mouse is over the button.
 * @param {bool}					[addOptionsPanel=false]	- Adds a panel for options and a button to access it.
 * @param {bool}					[optionsButtonUnder]	- When true, the options button appears under the button instead of next to it.
 * @param {string}					[imageDisabled=image]	- The path to an icon displayed when the button is disabled.
 * @param {boolean}					[localize=true]	- Set to false if the text must not be translated.
 * @return {DuButton}			The image button created.
 */
DuAEF.DuScriptUI.addButton = function( container, text, image, helpTip, imageOver, addOptionsPanel, optionsButtonUnder, imageDisabled, localize )
{
    if (typeof container === undefined)
    {
        throw 'DuScriptUI: DuAEF.DuScriptUI.addButton(container, text, image, helpTip, imageOver):\nMissing argument: container.';
    }
    if (DuAEF.DuJS.typeof(container) != 'Group' && DuAEF.DuJS.typeof(container) != 'Panel' && DuAEF.DuJS.typeof(container) != 'Window' )
    {
        throw 'DuScriptUI: DuAEF.DuScriptUI.addButton(container, text, image, helpTip, imageOver):\nTypeError.\n\ncontainer has to be a Group/Panel/Window.\n\ncontainer is ' + DuAEF.DuJS.typeof(container) + ' with value ' + container.toString();
    }

    text = def(text, '');
    image = def(image, '');
    helpTip = def(helpTip, '');
    imageOver = def(imageOver, '');
    imageDisabled = def(imageDisabled, '');
    addOptionsPanel = def(addOptionsPanel, false);
    optionsButtonUnder = def(optionsButtonUnder, text == '');
    localize = def(localize, true);
    
    if ( imageOver != '' && !DuAEF.DuJS.Fs.fileExists( imageOver ) ) imageOver = '';
    if ( image != '' && !DuAEF.DuJS.Fs.fileExists( image ) ) image = '';
    if ( imageDisabled != '' && !DuAEF.DuJS.Fs.fileExists( imageDisabled ) ) imageDisabled = '';

    if ( text != '' && localize)
    {
        DuAEF.DuScriptUI.uiStrings.push( text );
        text = tr( text );
    }
    if ( helpTip != '' && localize)
    {
        DuAEF.DuScriptUI.uiStrings.push( helpTip );
        helpTip = tr( helpTip );
    }

    if ( image == '' && text == '' ) text = ' ';

    var rootGroup = container.add( 'group' );
    var imageButton = rootGroup;
    imageButton.group = rootGroup; // needed for retro-compatibility
    if (optionsButtonUnder) imageButton.orientation = 'column';
    else imageButton.orientation = 'row';

    imageButton.margins = 0;
    imageButton.alignment = [ 'fill', 'fill' ];
    if (addOptionsPanel) imageButton.spacing = 2;
    else imageButton.spacing = 0;

    imageButton.bgColor = DuAEF.DuJS.Color.Colors.ABYSS_GREY;
    imageButton.textColor = DuAEF.DuJS.Color.Colors.LIGHT_GREY;

    var mainGroup = imageButton.add( 'group' );
    mainGroup.orientation = 'row';
    mainGroup.margins = 2;
    if ( image == '' ) mainGroup.margins = 5;
    mainGroup.alignment = [ 'fill', 'fill' ];
    mainGroup.spacing = 0;

    var optionsButton;
    var optionsValidButton;
    if (addOptionsPanel) {
        optionsButton = DuAEF.DuScriptUI.addButton(
            imageButton,
            '',
            DuAEF.DuBinary.toFile(w14_options_m),
            text + '\nOptions',
            DuAEF.DuBinary.toFile(w14_options_r)
        )
        if (optionsButtonUnder) optionsButton.alignment = ['center', 'bottom'];
        else optionsButton.alignment = ['right', 'center'];

        var optionsPanel = DuAEF.DuScriptUI.createPopup(text == '' ? 'Options' : text);
        optionsPanel.tieTo(optionsButton);
        imageButton.optionsPanel = DuAEF.DuScriptUI.addGroup( optionsPanel.contents, 'column');

        optionsValidButton = DuAEF.DuScriptUI.addButton(
            optionsPanel.contents,
            text,
            DuAEF.DuBinary.toFile(w25_check_g),
            text,
            DuAEF.DuBinary.toFile(w25_check_r)
        )
    }

    imageButton.standardImage = image;
    imageButton.imageOver = imageOver;
    imageButton.onClick = function() {};
    imageButton.onAltClick = function() {};
    imageButton.onCtrlAltClick = function() {};
    imageButton.onCtrlClick = function() {};
    imageButton.image = null;
    imageButton.label = null;

    //Add fillers to be able to click anywhere on the button
    if ( text != '' )
    {
        imageButton.fillerL = mainGroup.add( 'statictext', undefined, "" );
        imageButton.fillerL.alignment = [ 'left', 'fill' ];
        if ( image != '' ) imageButton.fillerL.size = [ 20, 0];
    }

    if ( image != '' )
    {
        var icon = mainGroup.add( 'image', undefined, imageButton.standardImage );
        icon.alignment = [ 'left', 'center' ];
        icon.helpTip = helpTip;
        imageButton.image = icon;
        imageButton.icon = icon;
    }

    //Add fillers to be able to click anywhere on the button
    if ( text != '' )
    {
        imageButton.fillerM = mainGroup.add( 'statictext', undefined, "" );
        imageButton.fillerM.alignment = [ 'left', 'fill' ];
        if ( image != '' ) imageButton.fillerM.size = [ 20, 0];
    }

    if ( text != '' )
    {
        var label = mainGroup.add( 'statictext', undefined, text );
        label.helpTip = helpTip;
        label.alignment = [ 'left', 'center' ];
        imageButton.label = label;
        DuAEF.DuScriptUI.setBackgroundColor( mainGroup, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
        imageButton.alignment = [ 'fill', 'top' ];
    }

    //Add fillers to be able to click anywhere on the button
    if ( text != '' )
    {
        imageButton.fillerR = mainGroup.add( 'statictext', undefined, "" );
        imageButton.fillerR.alignment = [ 'fill', 'fill' ];
    }

    //events
    imageButton.clicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onClick);
    }

    imageButton.shiftClicked = function()
    {
        DuAEF.DuScriptUI.updateHelpPopup( imageButton.help.title, imageButton.help.text, imageButton.help.link );

        if ( imageButton.help.text != '' )
        {
            DuAEF.DuScriptUI.showHelp();
        }
        else if (imageButton.help.link != '')
        {
            DuAEF.DuSystem.openURL(imageButton.help.link);
        }
    }

    imageButton.altClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onAltClick);
    }

    imageButton.ctrlAltClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onCtrlAltClick);
    }

    imageButton.ctrlClicked = function()
    {
        DuAEF.Debug.safeRun(imageButton.onCtrlClick);
    }

    imageButton.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();
        if ( icon )
            if ( imageButton.imageOver != '' ) icon.image = imageButton.imageOver;
        if ( label )
        {
            DuAEF.DuScriptUI.setTextColor( imageButton.label,  imageButton.textColor + [0.25,0.25,0.25,0] );
            DuAEF.DuScriptUI.setBackgroundColor( mainGroup, imageButton.bgColor + [0.25,0.25,0.25,0] );
        }
        DuAEF.DuScriptUI.highlightedControls.push( imageButton );
    }

    imageButton.dim = function()
    {
        if ( icon )
            if ( imageButton.standardImage != '' ) icon.image = imageButton.standardImage;
        if ( label )
        {
            DuAEF.DuScriptUI.setTextColor( imageButton.label, imageButton.textColor );
            DuAEF.DuScriptUI.setBackgroundColor( mainGroup, imageButton.bgColor );
        }
    }

    imageButton.setBackgroundColor = function(color)
    {
        imageButton.bgColor = color;
        imageButton.dim();
    }

    imageButton.setTextColor = function(color)
    {
        imageButton.textColor = color;
        imageButton.dim();
    }

    imageButton.setStandardImage = function(im)
    {
        imageButton.standardImage = im;
        imageButton.dim();
    }

    //add events
    mainGroup.addEventListener( 'click', function( e )
    {
        if ( e.shiftKey ) imageButton.shiftClicked();
        else if ( e.altKey && e.ctrlKey ) imageButton.ctrlAltClicked();
        else if ( e.altKey ) imageButton.altClicked();
        else if ( e.ctrlKey ) imageButton.ctrlClicked();
        else imageButton.clicked();
    }, true );

    if (addOptionsPanel) {
        optionsValidButton.onClick = imageButton.clicked;
        optionsValidButton.shiftClicked = imageButton.shiftClicked;
        optionsValidButton.altClicked = imageButton.altClicked;
        optionsValidButton.ctrlAltClicked = imageButton.ctrlAltClicked;
        optionsValidButton.ctrlClicked = imageButton.ctrlClicked;
    }
    
    if ( label )
    {
        imageButton.label.addEventListener( "mouseover", imageButton.highlight );
        imageButton.fillerL.addEventListener( "mouseover", imageButton.highlight );
        imageButton.fillerR.addEventListener( "mouseover", imageButton.highlight );
        imageButton.fillerM.addEventListener( "mouseover", imageButton.highlight );
    }
    
    // Hack - CS6 Bug on mouseover with images
    if ( DuAEF.DuAE.App.version.version > 11 && icon )
    {
        imageButton.icon.addEventListener( "mouseover", imageButton.highlight );
    }

    imageButton.help = {};
    imageButton.help.title = '';
    imageButton.help.text = '';
    imageButton.help.link = '';

    //help popup
    imageButton.setHelp = function( title, text, link )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( title );
        title = tr( title );
        imageButton.help.title = title;
        imageButton.help.text = text;
        imageButton.help.link = link;
    }

    // Align icons
    imageButton.resize = function()
    {
        imageButton.fillerL.size = [ mainGroup.size.width / 4, mainGroup.size.height ];
    }

    return imageButton;
}

/**
 * @class
 * @name DuSmallButton
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * An Small Button.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addSmallButton} to create a Small Button.<br />
 * The Small Button inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {StaticText} label - The label
 * @property {any} value - A user value stored in the button, which is passed to the onClick method
 * @property {DuSmallButton~onClick} onClick - The function to execute when the button is clicked
 */

/**
 * The function to execute when the button is clicked.<br />
 * The implementation of this function can take one parameter which is the used defined value of the button.
 * @callback DuSmallButton~onClick
 * @memberof DuSmallButton
 * @param {any} value - The used defined value of the button
 */

/**
 * Creates a small button.
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window|Group}			container	- The ScriptUI Object which will contain and display the button.
 * @param {string}					text		- The label of the button. Default: empty string
 * @param {string}					[helpTip]		- The helptip. Default: empty string
 * @param {any}					[value]		- A user value stored in the button, which is passed to the onClick method
 * @return {DuButton}			The image button created.
 */
DuAEF.DuScriptUI.addSmallButton = function( container, text, helpTip, value )
{
    if ( typeof helpTip === 'undefined' ) helpTip = '';

    DuAEF.DuScriptUI.uiStrings.push( text );
    text = tr( text );
    if ( helpTip != '' )
    {
        DuAEF.DuScriptUI.uiStrings.push( helpTip );
        helpTip = tr( helpTip );
    }

    var smallButton = container.add( 'group' );
    smallButton.orientation = 'row';
    smallButton.margins = 0;
    smallButton.alignment = [ 'fill', 'top' ];
    smallButton.alignChildren = [ 'fill', 'fill' ];
    smallButton.spacing = 0;

    smallButton.onClick = function() {};
    smallButton.onAltClick = function() {};
    smallButton.onCtrlAltClick = function() {};
    smallButton.onCtrlClick = function() {};
    smallButton.label = smallButton.add( 'statictext', undefined, text );
    smallButton.label.helpTip = helpTip;
    smallButton.label.justify = 'center';
    DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.ABYSS_GREY );

    smallButton.value = value;

    //events
    smallButton.clicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onClick, smallButton.value);
    }

    smallButton.shiftClicked = function()
    {
        DuAEF.DuScriptUI.updateHelpPopup( smallButton.help.title, smallButton.help.text, smallButton.help.link );

        if ( smallButton.help.text != '' )
        {
            DuAEF.DuScriptUI.showHelp();
        }
    }

    smallButton.altClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onAltClick);
    }

    smallButton.ctrlAltClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onCtrlAltClick);
    }

    smallButton.ctrlClicked = function()
    {
        DuAEF.Debug.safeRun(smallButton.onCtrlClick);
    }

    smallButton.highlight = function( e )
    {
        e.stopPropagation();
        DuAEF.DuScriptUI.dimControls();

        DuAEF.DuScriptUI.setTextColor( smallButton.label, DuAEF.DuJS.Color.Colors.VERY_LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.DARK_GREY );

        DuAEF.DuScriptUI.highlightedControls.push( smallButton );
    }

    smallButton.dim = function()
    {
        DuAEF.DuScriptUI.setTextColor( smallButton.label, DuAEF.DuJS.Color.Colors.LIGHT_GREY );
        DuAEF.DuScriptUI.setBackgroundColor( smallButton, DuAEF.DuJS.Color.Colors.ABYSS_GREY );
    }

    //add events
    smallButton.addEventListener( 'click', function( e )
    {
        if ( e.shiftKey ) smallButton.shiftClicked();
        else if ( e.altKey && e.ctrlKey ) smallButton.ctrlAltClicked();
        else if ( e.altKey ) smallButton.altClicked();
        else if ( e.ctrlKey ) smallButton.ctrlClicked();
        else smallButton.clicked();
    }, true );


    smallButton.addEventListener( "mouseover", smallButton.highlight );


    smallButton.help = {};
    smallButton.help.title = '';
    smallButton.help.text = '';
    smallButton.help.link = '';

    //help popup
    smallButton.setHelp = function( title, text, link )
    {
        if ( text != '' ) DuAEF.DuScriptUI.uiStrings.push( title );
        title = tr( title );
        smallButton.help.title = title;
        smallButton.help.text = text;
        smallButton.help.link = link;
    }

    return smallButton;
}
