/*
DuScriptUILib
Library with ScriptUI tools.
Copyright (c) 2017-2019 Nicolas Dufresne, Rainbox Laboratory and Contributors
https://rainboxlab.org

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

#include 'DuScriptUIIcons.jsxinc'
#include 'DuScriptUIDefaults.jsxinc'
#include 'DuScriptUILowLevelLib.jsxinc'
#include 'DuScriptUIScreen.jsxinc'
#include 'DuScriptUIStyleLib.jsxinc'
#include 'DuScriptUIPanelLib.jsxinc'
#include 'DuScriptUILayoutLib.jsxinc'
#include 'DuScriptUIButtonLib.jsxinc'
#include 'DuScriptUICheckboxLib.jsxinc'
#include 'DuScriptUIFileSelectorLib.jsxinc'
#include 'DuScriptUIFormLib.jsxinc'
#include 'DuScriptUIHelpLib.jsxinc'
#include 'DuScriptUILayerPickerLib.jsxinc'
#include 'DuScriptUISelectorLib.jsxinc'
#include 'DuScriptUISliderLib.jsxinc'
#include 'DuScriptUITabLib.jsxinc'
#include 'DuScriptUITextLib.jsxinc'
#include 'DuScriptUIRSSLib.jsxinc'

/**
 * Displays an invitation to enable file and network access.<br />
 * Use this method before loading any scripts which needs this authorization. 
 * @memberof DuAEF.DuScriptUI
 * @param {Panel|Window} ui	- A container to display the UI.
 * @param {function} callback - The function to execute when the user has granted access to file and network.<br />
 * This function should be the one which loads the script.
 * @param {string} [scriptName=DuAEF.scriptName] - The name of the script, used in the UI.
 * @param {boolean} [reInit=false] - Set to true to display to prompt to reinit/reinstall the script below the button to ask for file access.
 * @param {function} reInitMethod - A function to run to reinit/reinstall the script as soon as we get file access, before running the callback
 */
DuAEF.DuScriptUI.askFilesAndNetworkAccess = function( ui, callback, scriptName, reInit, reInitMethod )
{
    reInit = def( reInit, false, false);
	scriptName = def(scriptName, DuAEF.scriptName, false);

    if ( !DuAEF.DuAE.App.hasFilesAndNetworkAccess )
    {
        var ui_accessFileAndNetworkGroup = DuAEF.DuScriptUI.addGroup( ui, 'column' );

        var accessExplanation = scriptName + " needs to be allowed to write files or access the network to continue.\n\n" +
            "Please, check the box called 'Allow Scripts to write files...' in the preferences of After Effects.";
        var reInitPrompt = "/!\\ ======\n/!\\ It seems something went wrong with " + scriptName + " the last time you used it.\n" +
            "/!\\ Check the box below to re-initialize " + scriptName + " and try to make it work again.\n/!\\ ======";

        var ui_reinitCheckbox;
        
        ui_accessFileAndNetworkGroup.add( 'statictext', undefined, accessExplanation,
        {
            multiline: true
        } );

        //if reinit add prompt
        if (reInit)
        {
            ui_accessFileAndNetworkGroup.add( 'statictext', undefined, reInitPrompt,
            {
                multiline: true
            } );
            ui_reinitCheckbox = ui_accessFileAndNetworkGroup.add( 'checkbox', undefined,"Re-initialize "+ scriptName + " before launch.");
        }

        var ui_fileAndNetworkPrefButton = ui_accessFileAndNetworkGroup.add( 'button', undefined, 'Open preferences' );

        ui_fileAndNetworkPrefButton.onClick = function()
        {
            var ok = DuAEF.DuAE.App.askFilesAndNetworkAccess( false );
            if ( ok )
            {
                ui_accessFileAndNetworkGroup.visible = false;
                //if reinit and box checked, reinitmethod before callback
                if (reInit)
                {
                    if (ui_reinitCheckbox.value) reInitMethod();
                }
                callback();
            }
        }

        DuAEF.DuScriptUI.showUI( ui, false );
        return;
    }

    callback( );
}

//low-level list of functions to be run when the user interacts with the UI
DuAEF.DuScriptUI.eventFunctions = [];

/**
 * Adds a function to be run periodically, which will be connected to several UI events, fired when the user interacts with the UI.
 * @param {function} func The function to connect to the UI
 * @param {int} [timeOut=3000] A timeOut in milliseconds which prevents the function to be run too often
 * @return {int} a unique identifier to be used to remove the function later, with {@link DuAEF.DuScriptUI.removeEvent}.
 */
DuAEF.DuScriptUI.addEvent = function (func, timeOut)
{
    timeOut = def(timeOut, 3000);
    func.id = new Date().getTime();
    func.timeOut = timeOut;
    func.lastFire = func.id;
    DuAEF.DuScriptUI.eventFunctions.push(func);
    return func.id;
}

/**
 * Removes a function previously added with {@link DuAEF.DuScriptUI.addEvent}.
 * @param {int} id The id of the function
 */
DuAEF.DuScriptUI.removeEvent = function (id)
{
    for (var i = 0, n = DuAEF.DuScriptUI.eventFunctions.length; i < n; i++)
    {
        var f = DuAEF.DuScriptUI.eventFunctions[i];
        if (f.id == id)
        {
            DuAEF.DuScriptUI.eventFunctions.splice(i,1);
            break;
        }
    }
}