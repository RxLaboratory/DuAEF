/**
	* Autorig
	* @namespace
	* @memberof DuAEF.Duik
*/
DuAEF.Duik.Autorig = {}

/**
 * The types of animals which can be rigged
 * @enum {int}
 * @readonly
 */
DuAEF.Duik.Autorig.AnimalTypes =
{
	PLANTIGRADE: 1,
	DIGITIGRADE: 2,
	UNGULATE: 3
}

/**
 * The elements handled by the Autorig
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.Autorig.Elements =
{
	SHOULDER: 'shoulder',
	SHOULDER_BLADE: 'shoulder',
	CLAVICLE: 'shoulder',
	HUMERUS: 'humerus',
	ARM: 'humerus',
	FOREARM: 'radius',
	RADIUS: 'radius',
	ULNA: 'radius',
	HAND: 'hand',
	FINGERS: 'fingers',
	FRONT_CLAWS: 'fingers',
	FRONT_HEEL: 'palm',
	PALM: 'palm',
	ARM_TIP: 'armTip',
	FEMUR: 'femur',
	THIGH: 'femur',
	TIBIA: 'tibia',
	CALF: 'tibia',
	FOOT: 'foot',
	REAR_CLAWS: 'toes',
	TOES: 'toes',
	CLAWS: 'toes',
	HEEL: 'heel',
	LEG_TIP: 'legTip',
	TIPTOE: 'legTip',
	HIPS: 'hips',
	SPINE: 'spine',
	NECK: 'neck',
	HEAD: 'head',
	SPINE_TIP: "spineTip",
	TAIL: "tail",
	TAIL_TIP: "tailTip"
}

/**
 * The limbs handled by the Autorig
 * @enum {string}
 * @readonly
 */
DuAEF.Duik.Autorig.Limbs =
{
	ARM: 'arm',
	FRONT_LEG: 'arm',
	LEG: 'leg',
	BACK_LEG: 'leg',
	REAR_LEG: 'leg',
	SPINE: 'spine',
	TAIL: 'tail'
}

/**
 * Checks if all the layers have autorig tags and are ready to be rigged
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} layers - The layers to check
 * @return {Layer[]} The layers not tagged
 */
DuAEF.Duik.Autorig.checkLayerTags = function (layers)
{
	if (layers.length == 0) return [];
	var untagged = [];
	var it = new DuList(layers);
	it.do(function(layer){
		var param = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!param)
		{
			untagged.push(layer);
			return;
		}
		if (!param[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB])
		{
			untagged.push(layer);
			return;
		}
	});

	return untagged;
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [shoulder] - the layer for the shoulder
 * @param {Layer} [humerus] - the layer for the humerus
 * @param {Layer} [radius] - the layer for the radius
 * @param {Layer} [hand] - the layer for the hand
 * @param {Layer} [claws] - the layer for the claws/fingers
 * @param {Layer} [palm] - the layer for the palm/heel
 * @param {Layer} [tip] - the layer for the tip
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 * @param {bool} [left=true] - which arm is it (left or right)
 */
DuAEF.Duik.Autorig.tagArm = function (shoulder,humerus,radius,hand,claws,palm,tip,type,left)
{
	if (typeof type === 'undefined') type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	if (typeof left === 'undefined') left = true;

	var side = 'right';
	if (left) side = 'left';

	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.ARM;

	if (shoulder)
	{
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SHOULDER);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(shoulder,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (humerus)
	{
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HUMERUS);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(humerus,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (radius)
	{
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.RADIUS);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(radius,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (hand)
	{
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HAND);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(hand,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
	}
	if (claws)
	{
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FRONT_CLAWS);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(claws,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (palm)
	{
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.PALM);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(palm,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.ARM_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.SIDE,side);
	}

}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [femur] - the layer for the femur
 * @param {Layer} [tibia] - the layer for the tibia
 * @param {Layer} [foot] - the layer for the foot
 * @param {Layer} [toes] - the layer for the toes
 * @param {Layer} [heel] - the layer for the heel
 * @param {Layer} [tip] - the layer for the tipl
 * @param {DuAEF.Duik.Autorig.AnimalTypes} [type=DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE] - the type of animal
 * @param {bool} [left=true] - which leg is it (left or right)
 */
DuAEF.Duik.Autorig.tagLeg = function (femur,tibia,foot,toes,heel,tip,type,left)
{
	if (typeof type === 'undefined') type = DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE;
	if (typeof left === 'undefined') left = true;

	var side = 'right';
	if (left) side = 'left';

	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.LEG;

	if (femur)
	{
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FEMUR);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(femur,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (tibia)
	{
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TIBIA);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(tibia,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (foot)
	{
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.FOOT);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(foot,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (toes)
	{
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TOES);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(toes,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (heel)
	{
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HEEL);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(heel,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.LEG_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE,type);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.SIDE,side);
	}
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} [hips] - the layer for the hips
 * @param {Layer[]} [spine] - the layers for the spine
 * @param {Layer[]} [neck] - the layers for the neck
 * @param {Layer} [head] - the layer for the head
 * @param {Layer} [tip] - the layer for the tip
 */
DuAEF.Duik.Autorig.tagSpine = function (hips,spine,neck,head,tip)
{
	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.SPINE;

	if (hips)
	{
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HIPS);
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(hips,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (spine) if (spine.length > 0)
	{
		for (var i = 0 ; i < spine.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SPINE);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(spine[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (neck) if (neck.length > 0)
	{
		for (var i = 0 ; i < neck.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.NECK);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(neck[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (head)
	{
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.HEAD);
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(head,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.SPINE_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
}

/**
 * Tags the layers to make them ready to be used by the autorig
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} [tail] - the layers for the neck
 * @param {Layer} [tip] - the layer for the tip
 */
DuAEF.Duik.Autorig.tagTail = function (tail,tip)
{
	var id = new Date().getTime();
	var limb = DuAEF.Duik.Autorig.Limbs.TAIL;

	if (tail) if (tail.length > 0)
	{
		for (var i = 0 ; i < tail.length ; i++)
		{
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TAIL);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);
			DuAEF.Duik.setDuikMarkerParameter(tail[i],DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER,i+1);

		}
	}
	if (tip)
	{
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT,DuAEF.Duik.Autorig.Elements.TAIL_TIP);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_LIMB,limb);
		DuAEF.Duik.setDuikMarkerParameter(tip,DuAEF.Duik.MarkerParameters.AUTORIG_ID,id);

	}
}

/**
 * Create a new controller, or get the one existing at the same location
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer} layer - The Layer where to create the controller
 * @param {CompItepm} [comp=DuAEF.DuAE.Project.getActiveComp()] - The composition
 * @param {DuAEF.Duik.Controller.Types} [type=DuAEF.Duik.Controller.defaultType] - The type of the controller
 * @param {Layer[]|LayerCollection|Controller[]} [controllers=comp.layers] - A set of layers where to get the existing controller
 * @return {Controller} The new controller or the pre-existing one
 */
DuAEF.Duik.Autorig.getCreateController = function ( layer, comp, type, controllers)
{
	comp = def(comp, DuAEF.DuAE.Project.getActiveComp());
	if (!comp) return
	type = def(type, DuAEF.Duik.Controller.defaultType);
	controllers = def(controllers, comp.layers);

	//get the layer position
	var pos = DuAEF.DuAE.Layer.getWorldPos(layer);
	
	var ctrl = null;

	//look for an existing controller
	var it = new DuList(controllers);
	while(it.next())
	{
		var controller = controllers[it.current];
		if (controller instanceof Controller) controller = controller.layer;
		var ctrlPos = DuAEF.DuAE.Layer.getWorldPos(controller);
		if (DuAEF.DuJS.Array.compare( pos, ctrlPos, 2)) return new Controller(controller);
	}

	//create a new one
	return DuAEF.Duik.Controller.create(comp, type, layer);
}

/**
 * Rigs the layers according to the tags found
 * @memberof DuAEF.Duik.Autorig
 * @param {Layer[]} layers - The layers to rig
 * @param {DuAEF.Duik.Rigging.chainTypes} [longChainType=DuAEF.Duik.Rigging.chainTypes.FK] - True to use an IK to rig tails, false will create FK Controls
 * @param {boolean} [threeAsOneAndTwo=true] - when rigging three layers, true to rig using a one-layer IK followed by a two-layer IK instead of a three-mayer IK
 * @return {Controller[]} The controllers created (empty if the layers can not be rigged)
 */
DuAEF.Duik.Autorig.rig = function (layers, longChainType, threeAsOneAndTwo)
{
	if (typeof longChainType === 'undefined') longChainType = DuAEF.Duik.Rigging.chainTypes.FK;
	if (typeof threeAsOneAndTwo === 'undefined') threeAsOneAndTwo = true;

	if (layers.length == 0) return false;

	//what we expect
	var arms = [];
	var legs = [];
	var spine = {};
	spine.spine = [];
	spine.neck = [];
	var tails = [];
	var customStructures = [];
	var customControllers = [];

	//a sorter for spine, neck and tail layer
	function sortElements(a,b)
	{
		return a.i - b.i;
	}

	// ================== INIT ===================

	var comp = layers[0].containingComp;

	app.beginSuppressDialogs();

	//the controllers which may be created
	//spine
	var hipsCtrl = null;
	var bigHipsCtrl = null;
	var shoulderCtrl = null;
	var headCtrl = null;
	//legs
	var legsCtrl = [];
	//arms
	var armsCtrl = []
	//tails
	var tailsCtrl = [];

	//Sort layers, load data
	var it = new DuList(layers);
	it.do(function (layer){
		var params = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!params) return;

		//if it's a limb
		if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB])
		{
			if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.SPINE)
			{
				if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HIPS)
				{
					spine.hips = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SPINE)
				{
					var sp = {};
					sp = layer;
					sp.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
					spine.spine.push(sp);
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.NECK)
				{
					var ne = {};
					ne = layer;
					ne.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
					spine.neck.push(ne);
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HEAD)
				{
					spine.head = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SPINE_TIP)
				{
					spine.tip = layer;
					return;
				}
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.TAIL)
			{
				//get id
				var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

				//look for existing tail if any
				var tail;
				for (var i = 0 ; i < tails.length ; i++)
				{
					if (tails[i].id == id)
					{
						tail = tails[i];
						break;
					}
				}
				if (!tail)
				{
					tail = {};
					tail.tail = [];
					tail.id = id;
					tails.push(tail);
				}

				if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TAIL)
				{
					var ta = {};
					ta = layer;
					ta.i = params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT_NUMBER];
					tail.tail.push(ta);
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TAIL_TIP)
				{
					tail.tip = layer;
					return;
				}
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.ARM)
			{
				//get id
				var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

				//look for existing arm if any
				var arm;
				for (var i = 0 ; i < arms.length ; i++)
				{
					if (arms[i].id == id)
					{
						arm = arms[i];
						break;
					}
				}
				if (!arm)
				{
					arm = {};
					arm.id = id;
					arm.type = params[DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE];
					arm.side = params[DuAEF.Duik.MarkerParameters.SIDE];
					arms.push(arm);
				}

				if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.SHOULDER)
				{
					arm.shoulder = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HUMERUS)
				{
					arm.humerus = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.RADIUS)
				{
					arm.radius = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HAND)
				{
					arm.hand = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FRONT_CLAWS)
				{
					arm.claws = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.PALM)
				{
					arm.palm = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.ARM_TIP)
				{
					arm.tip = layer;
					return;
				}
			}
			else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_LIMB] == DuAEF.Duik.Autorig.Limbs.LEG)
			{
				//get id
				var id = params[DuAEF.Duik.MarkerParameters.AUTORIG_ID];

				//look for existing arm if any
				var leg;
				for (var i = 0 ; i < legs.length ; i++)
				{
					if (legs[i].id == id)
					{
						leg = legs[i];
						break;
					}
				}
				if (!leg)
				{
					leg = {};
					leg.id = id;
					leg.type = params[DuAEF.Duik.MarkerParameters.AUTORIG_ANIMAL_TYPE];
					leg.side = params[DuAEF.Duik.MarkerParameters.SIDE];
					legs.push(leg);
				}

				if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FEMUR)
				{
					leg.femur = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TIBIA)
				{
					leg.tibia = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.FOOT)
				{
					leg.foot = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.TOES)
				{
					leg.toes = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.HEEL)
				{
					leg.heel = layer;
					return;
				}
				else if (params[DuAEF.Duik.MarkerParameters.AUTORIG_ELEMENT] == DuAEF.Duik.Autorig.Elements.LEG_TIP)
				{
					leg.tip = layer;
					return;
				}
			}
		}
		//if it's a custom structure
		else if (params[DuAEF.Duik.MarkerParameters.STRUCTURE_ID])
		{
			//check if the id has already been found, add to array in this case
			for (var i = 0, num = customStructures.length; i < num; i++)
			{
				var id = customStructures[i][0].id;
				if (id == params[DuAEF.Duik.MarkerParameters.STRUCTURE_ID])
				{
					layer.id = id;
					customStructures[i].push(layer);
					return;
				}
			}
			//if not, create new structure array
			layer.id = params[DuAEF.Duik.MarkerParameters.STRUCTURE_ID];
			var structures = [layer];
			customStructures.push(structures);
			return;
		}
		//if it's a controller
		else if (params.duik == DuAEF.Duik.LayerTypes.CONTROLLER)
		{
			customControllers.push(layer);
		}
	});

	//use a null or shape controllers ?
	var useNull = DuAEF.Duik.Controller.defaultType == DuAEF.Duik.Controller.Types.NULL;
	var defaultType = DuAEF.Duik.Controller.Types.NULL;

	// ================ SPINE =======================

	//sort the spine and the neck
	spine.spine.sort(sortElements);
	spine.neck.sort(sortElements);

	//find the root
	var spineRoot = null;
	if (spine.hips) spineRoot = spine.hips;
	else if (spine.spine.length > 0) spineRoot = spine.spine[0];
	else if (spine.neck.length > 0) spineRoot = spine.neck[0];
	else if (spine.head) spineRoot = spine.head;
	else if (spine.tip) spineRoot = spine.tip;

	//find the torso
	var spineTorso = null;
	if (spine.spine.length > 0) spineTorso = spine.spine[spine.spine.length-1];
	else if (spine.hips) spineTorso = spine.hips;
	else if (spine.neck.length) spineTorso = spine.neck[0];
	else if (spine.head) spineTorso = spine.head;
	else if (spine.tip) spineTorso = spine.tip;

	//let's do this!
	if (spineRoot)
	{
		//unparent everything, just to be sure
		var spineRootParent = spineRoot.parent;
		spineRoot.parent = null;

		if (spine.spine.length > 0) for (var i=0;i<spine.spine.length;i++ ) spine.spine[i].parent = null;
		if (spine.neck.length > 0) for (var i=0;i<spine.neck.length;i++ ) spine.neck[i].parent = null;
		if (spine.head) spine.head.parent = null;
		if (spine.tip) spine.tip.parent = null;

		//hips controller
		var bigHipsCtrlName = DuAEF.DuAE.Comp.newUniqueLayerName("C | Body", comp);
		var hipsCtrlName = DuAEF.DuAE.Comp.newUniqueLayerName("C | Hips", comp);
		if (spine.hips)
		{
			bigHipsCtrl = DuAEF.Duik.Autorig.getCreateController(spine.hips, comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.BODY, customControllers);
			hipsCtrl = DuAEF.Duik.Controller.create(comp,useNull ? defaultType : DuAEF.Duik.Controller.Types.HIPS,spine.hips);
		}
		else if (spine.spine.length > 0)
		{
			bigHipsCtrl = DuAEF.Duik.Autorig.getCreateController(spine.spine[0], comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.BODY, customControllers);
			hipsCtrl = DuAEF.Duik.Controller.create(comp,useNull ? defaultType : DuAEF.Duik.Controller.Types.HIPS,spine.spine[0]);
		}
		if (bigHipsCtrl)
		{
			//name
			bigHipsCtrl.layer.name = bigHipsCtrlName;
			hipsCtrl.layer.name = hipsCtrlName;
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(bigHipsCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.BODY);
			DuAEF.Duik.setDuikMarkerParameter(hipsCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.HIPS);
		}
		

		//shoulders controller
		if (spine.neck.length > 0)
		{
			var shoulderCtrlName = DuAEF.DuAE.Comp.newUniqueLayerName("C | Shoulders & Neck", comp);
			shoulderCtrl = DuAEF.Duik.Autorig.getCreateController(spine.neck[0], comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.SHOULDERS, customControllers);
			shoulderCtrl.layer.name = shoulderCtrlName;
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(shoulderCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.SHOULDERS);
		}

		//head controller
		if (spine.head)
		{
			var headCtrlName = DuAEF.DuAE.Comp.newUniqueLayerName("C | Head", comp);
			headCtrl = DuAEF.Duik.Autorig.getCreateController(spine.head, comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.HEAD, customControllers);
			headCtrl.layer.name = headCtrlName;
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(headCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.HEAD);
		}

		//parenting structures
		if (spine.hips)
		{
			spine.hips.parent = hipsCtrl.layer;
		}
		if (spine.spine.length > 0)
		{
			if (!spine.hips)
			{
				spine.spine[0].parent = hipsCtrl.layer;
				//if structure, disable display link (bug AE)
				if (DuAEF.Duik.isLayerType(spine.spine[0],DuAEF.Duik.LayerTypes.STRUCTURE))
				{
					var structureEffect = spine.spine[0].effect( DuAEF.Duik.PseudoEffects.STRUCTURE.matchName );
					if (structureEffect) structureEffect(3).setValue(0);
				}
			}
			else spine.spine[0].parent = spine.hips;
		}
		if (spine.neck.length > 0)
		{
			if (spine.spine.length > 0) spine.neck[0].parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.neck[0].parent = spine.hips;
			else spine.neck[0].parent = shoulderCtrl.layer;
			for (var i = 1;i<spine.neck.length;i++)
			{
				spine.neck[i].parent = spine.neck[i-1];
			}
		}
		if (spine.head)
		{
			if (spine.neck.length > 0) spine.head.parent = spine.neck[spine.neck.length-1];
			else if (spine.spine.length > 0) spine.head.parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.head.parent = spine.hips;
			else spine.head.parent = headCtrl.layer;
		}
		if (spine.tip)
		{
			if (spine.head) spine.tip.parent = spine.head;
			else if (spine.neck.length > 0) spine.tip.parent = spine.neck[spine.neck.length-1];
			else if (spine.spine.length > 0) spine.tip.parent = spine.spine[spine.spine.length-1];
			else if (spine.hips) spine.tip.parent = spine.hips;
			else
			{
				hipsCtrl = DuAEF.Duik.Controller.create(comp,useNull ? defaultType : DuAEF.Duik.Controller.Types.HIPS,spine.tip);
				spine.tip.parent = hipsCtrl.layer;
			}
		}

		//parenting controllers
		if (bigHipsCtrl)
		{
			bigHipsCtrl.layer.parent = spineRootParent;
			hipsCtrl.layer.parent = bigHipsCtrl.layer;
		}

		if (shoulderCtrl)
		{
			if (bigHipsCtrl) shoulderCtrl.layer.parent = bigHipsCtrl.layer;
		}

		if (headCtrl)
		{
			if (shoulderCtrl) headCtrl.layer.parent = shoulderCtrl.layer;
			else if (bigHipsCtrl) headCtrl.layer.parent = bigHipsCtrl.layer;
		}

		//spine IK
		var goal;
		if (spine.neck.length > 0) goal = spine.neck[0];
		else if (spine.head) goal = spine.head;
		else if (spine.tip) goal = spine.tip;
		var ctrl;
		if (shoulderCtrl) ctrl = shoulderCtrl;
		else if (headCtrl) ctrl = headCtrl;

		if (ctrl || goal)
		{
			if (spine.hips && spine.spine.length == 0)
			{
				var backCtrl = DuAEF.Duik.Rigging.oneLayerIK(spine.hips,goal,ctrl);
				if (!ctrl) backCtrl.layer.parent = bigHipsCtrl.layer;
			}
			else if (spine.spine.length == 1)
			{
				var backCtrl = DuAEF.Duik.Rigging.oneLayerIK(spine.spine[0],goal,ctrl);
				if (!ctrl) backCtrl.layer.parent = bigHipsCtrl.layer;
			}
			else if (spine.spine.length > 1)
			{
				var backCtrl = DuAEF.Duik.Rigging.bezierIK(spine.spine,goal,ctrl);
				goal.parent = spine.spine[spine.spine.length-1];

				backCtrl[0].layer.parent = bigHipsCtrl.layer;
				backCtrl[0].layer.moveBefore(hipsCtrl.layer);
				backCtrl[2].layer.parent = hipsCtrl.layer;
				backCtrl[2].layer.moveBefore(hipsCtrl.layer);
				if (!ctrl) backCtrl[1].layer.parent = bigHipsCtrl.layer;

				if (spine.hips) DuAEF.Duik.Rigging.oneLayerIK(spine.hips,undefined,backCtrl[2]);
			}
		}

		//other controls
		//neck
		if (spine.neck.length > 0)
		{
			DuAEF.Duik.Rigging.goal(spine.neck,shoulderCtrl);
		}

		//head
		if (spine.head)
		{
			DuAEF.Duik.Rigging.goal(spine.head,headCtrl);
			if (shoulderCtrl)
			{
				var exp = [ DuAEF.Duik.expressionIds.AUTORIG_HEAD,
					'var ctrlLayer = ' + DuAEF.DuAE.Property.getExpressionLink(headCtrl.layer, true) + ';',
					'var result = ctrlLayer.toWorld( ctrlLayer.anchorPoint );',
					'if ( hasParent ) result = parent.fromWorld(result);',
					'result;'
				].join('\n');
				spine.head.transform.position.expression = exp;
			}
		}
	}

	// ==================== TAIL ======================

	var itTails = new DuList(tails);
	itTails.do(function(tail){

		//sort the tail
		tail.tail.sort(sortElements);

		var ikTail = longChainType != DuAEF.Duik.Rigging.chainTypes.FK;

		//unparent
		for (var i=0, num = tail.tail.length ; i < num ; i++ ) tail.tail[i].parent = null;

		if (!tail.tip && tail.tail.length > 1) tail.tip = tail.tail.pop();
		else if (tail.tail.length == 1)
		{
			var tailCtrl = DuAEF.Duik.Controller.create(comp,useNull ? defaultType : DuAEF.Duik.Controller.Types.TAIL,tail.tail[0]);
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(tailCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.TAIL);
			tail.tail[0].parent = tailCtrl.layer;
			if (spineRoot) tailCtrl.layer.parent = bigHipsCtrl.layer;
			return;
		}


		//ik
		if (ikTail)
		{
			//controllers
			var tailCtrl = DuAEF.Duik.Autorig.getCreateController(tail.tip, comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.TAIL, customControllers);
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(tailCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.TAIL);

			tailsCtrl.push(tailCtrl);

			if(tail.tail.length > 1)
			{
				var layers = tail.tail;
				var ctrls = DuAEF.Duik.Rigging.bezierIK(tail.tail,tail.tip,tailCtrl);

				tailsCtrl.push(ctrls[0]);

				//parent
				if (spineRoot)
				{
					ctrls[0].layer.parent = bigHipsCtrl.layer;
					ctrls[1].layer.parent = bigHipsCtrl.layer;
					tail.tail[0].parent = spineRoot;
				}
			}
			else
			{
				DuAEF.Duik.Rigging.oneLayerIK(tail.tail[0],tail.tip,tailCtrl);
				//parent
				if (spineRoot)
				{
					tailCtrl.layer.parent = bigHipsCtrl.layer;
					tail.tail[0].parent = spineRoot;
				}
			}
		}
		else
		{
			//controllers
			var tailCtrl = DuAEF.Duik.Autorig.getCreateController(tail.tail[0], comp, useNull ? defaultType : DuAEF.Duik.Controller.Types.TAIL, customControllers);
			//re-set type in case of the controller being a null
			DuAEF.Duik.setDuikMarkerParameter(tailCtrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,DuAEF.Duik.Controller.Types.TAIL);

			tailsCtrl.push(tailCtrl);

			tail.tail.push(tail.tip);

			var tailRoot = tail.tail[0];
			DuAEF.Duik.Rigging.fkOverlap(tail.tail.reverse(),tailCtrl);
			//parent
			if (spineRoot)
			{
				if (hipsCtrl) tailCtrl.layer.parent = hipsCtrl.layer;
				tailRoot.parent = spineRoot;
			}
		}


	});


	// ================ LEGS ==========================

	var itLegs = new DuList(legs);
	itLegs.do(function(leg){

		//unparent
		if (leg.tibia && leg.femur) leg.tibia.parent = null;
		if (leg.foot && (leg.tibia || leg.femur)) leg.foot.parent = null;
		if (leg.toes  && (leg.foot || leg.tibia || leg.femur)) leg.toes.parent = null;
		if (leg.tip) leg.tip.parent = null;
		if (leg.heel) leg.heel.parent = null;

		//reset transformations
		if (leg.femur) DuAEF.Duik.Structure.resetTransform(leg.femur);
		if (leg.tibia) DuAEF.Duik.Structure.resetTransform(leg.tibia);
		if (leg.foot) DuAEF.Duik.Structure.resetTransform(leg.foot);
		if (leg.toes) DuAEF.Duik.Structure.resetTransform(leg.toes);
		if (leg.tip) DuAEF.Duik.Structure.resetTransform(leg.tip);
		if (leg.heel) DuAEF.Duik.Structure.resetTransform(leg.heel);

		//detect right or left, depending on the toes position
		var right = false;
		if (leg.toes && leg.foot)
		{
			var toesPos = DuAEF.DuAE.Layer.getWorldPos(leg.toes);
			var footPos = DuAEF.DuAE.Layer.getWorldPos(leg.foot);
			right = (toesPos[0] - footPos[0]) > 0;
		}

		//add nulls and controllers for the footRoll
		var toesNull, footNull;
		//the foot roll needs all parts
		if (leg.toes && leg.foot && leg.tibia && leg.femur && leg.type != DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)
		{
			//claws
			toesNull = DuAEF.DuAE.Layer.addNull(leg.toes);
			DuAEF.Duik.setDuikMarker(toesNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			toesNull.name = DuAEF.Duik.generateName('FootRoll',leg.toes.name)

			var footSize = leg.toes.transform.position.value[0] - leg.foot.transform.position.value[0];
			//tiptoe
			if (!leg.tip)
			{
				leg.tip = DuAEF.DuAE.Layer.addNull(leg.toes);
				leg.tip.name = "FootRoll | Tiptoe";
				leg.tip.transform.position.setValue([toesNull.transform.position.value[0] + footSize/2,toesNull.transform.position.value[1]]);
			}

			if (!leg.heel && leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				leg.heel = DuAEF.DuAE.Layer.addNull(leg.toes);
				leg.heel.name = "FootRoll | Heel";
				leg.heel.transform.position.setValue([leg.foot.transform.position.value[0],toesNull.transform.position.value[1]]);
			}

			//foot
			footNull = DuAEF.DuAE.Layer.addNull(leg.foot);
			DuAEF.Duik.setDuikMarker(footNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			footNull.name = DuAEF.Duik.generateName('FootRoll',leg.foot.name)
		}

		//Controller for the leg
		var ctrlType = DuAEF.Duik.Controller.Types.FOOT;
		if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) ctrlType = DuAEF.Duik.Controller.Types.CLAWS;
		if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) ctrlType = DuAEF.Duik.Controller.Types.HOOF;
		
		var ctrl = null;
		if (leg.foot && ((leg.femur || leg.tibia) || (!leg.toes && !leg.tip)) && leg.type != DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.foot, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.toes && ((leg.femur || leg.tibia) || !leg.tip)) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.toes, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.foot && leg.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.foot, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.tip) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.tip, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.heel) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.heel, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.tibia) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.tibia, comp, useNull ? defaultType : ctrlType, customControllers);
		else if (leg.femur) ctrl = DuAEF.Duik.Autorig.getCreateController(leg.femur, comp, useNull ? defaultType : ctrlType, customControllers);
		//re-set type in case of the controller being a null
		DuAEF.Duik.setDuikMarkerParameter(ctrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,ctrlType);

		//side effect
		var sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Leg");
		if (leg.side == 'left') sideEffect(1).setValue(2);

		legsCtrl.push(ctrl);

		//parenting
		if (leg.toes)
		{
			if (leg.foot) leg.toes.parent = leg.foot;
			else if (leg.tibia) leg.toes.parent = leg.tibia;
			else if (leg.femur) leg.toes.parent = leg.femur;
			else if (leg.tip || leg.heel) leg.toes.parent = spineRoot;
			else
			{
				leg.toes.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.foot)
		{
			if (leg.tibia) leg.foot.parent = leg.tibia;
			else if (leg.femur) leg.foot.parent = leg.femur;
			else if (leg.toes || leg.tip || leg.heel) leg.foot.parent = spineRoot;
			else
			{
				leg.foot.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.tibia)
		{
			if (leg.femur) leg.tibia.parent = leg.femur;
			else if (leg.foot || leg.toes || leg.heel) leg.tibia.parent = spineRoot;
			else
			{
				leg.tibia.parent = ctrl.layer;
				ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.femur)
		{
			if (leg.tibia || leg.foot || leg.toes || leg.heel) leg.femur.parent = spineRoot;
			else
			{
				leg.femur.parent = ctrl.layer;
				if (spineRoot) ctrl.layer.parent = spineRoot;
			}
		}
		if (leg.tip)
		{
			if (leg.heel) leg.tip.parent = leg.heel;
			else if (leg.toes) leg.tip.parent = leg.toes;
			else if (leg.foot) leg.tip.parent = leg.foot;
			else if (leg.tibia) leg.tip.parent = leg.tibia;
			else if (leg.femur) leg.tip.parent = leg.femur;
		}
		if (footNull)
		{
			footNull.parent = toesNull;
			toesNull.parent = leg.tip;
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) leg.heel.parent = ctrl.layer;
			else if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) leg.tip.parent = ctrl.layer;
		}

		//IKs
		if (footNull)
		{
			//claws
			DuAEF.Duik.Rigging.oneLayerIK(leg.toes,undefined,leg.tip);
			//leg
			DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.foot,footNull);
			//foot
			DuAEF.Duik.Rigging.oneLayerIK(leg.foot,undefined,toesNull);
		}
		else
		{
			if (leg.toes && leg.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)
			{
				if (leg.foot && leg.tibia)
				{
					DuAEF.Duik.Rigging.twoLayerIK(leg.tibia,leg.foot,leg.toes,ctrl);
					if (leg.femur)
					{
						DuAEF.Duik.Rigging.oneLayerIK(leg.femur,undefined,ctrl);
						ctrl.layer.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.weightSlider).setValue(20);
						ctrl.layer.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).setValue(-leg.femur.transform.rotation.value);
					}
				}
				else if (leg.foot && leg.femur) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.foot,leg.toes,ctrl);
				else if (leg.tibia && leg.femur) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.claws,ctrl);
			}
			else if (leg.foot)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.foot,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.foot,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.foot,ctrl);
				else if (leg.toes) DuAEF.Duik.Rigging.oneLayerIK(leg.foot,leg.toes,ctrl);
				else if (leg.tip) DuAEF.Duik.Rigging.oneLayerIK(leg.foot,leg.tip,ctrl);
			}
			else if (leg.toes)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.toes,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.toes,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.toes,ctrl);
				else if (leg.tip) DuAEF.Duik.Rigging.oneLayerIK(leg.toes,leg.tip,ctrl);
			}
			else if (leg.tip)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.tip,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.tip,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.tip,ctrl);
			}
			else if (leg.heel)
			{
				if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.twoLayerIK(leg.femur,leg.tibia,leg.heel,ctrl);
				else if (leg.femur) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.heel,ctrl);
				else if (leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.tibia,leg.heel,ctrl);
			}
			else if (leg.femur && leg.tibia) DuAEF.Duik.Rigging.oneLayerIK(leg.femur,leg.tibia,ctrl);
		}

		//Controls
		if (footNull)
		{
			//add an IK effect on the controller
			var ikCtrl = DuAEF.Duik.PseudoEffects.TWOLAYER_IK.apply(ctrl.layer);
			//the effect on the null of the foot
			var ikEffect = footNull.effect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName);
			var ikFoot = toesNull.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
			var ikToes = leg.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
			ikCtrl.name = ikEffect.name;
			//link the properties
			//The main IK
			//Set the "reverse" property
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckbox).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckbox).value);
			DuAEF.DuAE.Property.linkProperties(ikEffect,ikCtrl,true);
			//the IK/FK Switches
			DuAEF.DuAE.Property.linkProperties(ikFoot(DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox),ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox),true);
			var fkExp = 'if (effect("' + ikFoot.name + '")(' + DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox + ').value) value;\n';
			fkExp += 'else ';
			fkExp += DuAEF.DuAE.Property.getExpressionLink(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalAngle),true);
			fkExp += ';';
			ikFoot(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).expression = fkExp;
			DuAEF.DuAE.Property.linkProperties(ikToes(DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox),ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox),true);
			//and re-setup the layers & needed data
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLayer).value);
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLayer).value);
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalLayer).value);
			DuAEF.DuAE.Property.pickWhip(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalPositionPoint),ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalPositionPoint));
			DuAEF.DuAE.Property.pickWhip(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalWorldPositionPoint),ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalWorldPositionPoint));

			//tiptoe, heel and footroll
			if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				var footCtrl = DuAEF.Duik.PseudoEffects.FOOT_ROLL.apply(ctrl.layer);
				leg.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.tipToeAngle + ");";
				var op  = right ? "<" : ">";
				leg.heel.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.heelAngle + ");\n" +
				"var roll = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle + ");\n" +
				"roll " + op + " 0 ? roll+ctrl : ctrl;";
				op = right ? ">" : "<";
				toesNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle + ");\n" +
				"ctrl " + op + " 0 ? ctrl : 0;";
				var ikToesEffect = leg.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
				ikToesEffect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.toesAngle + ");";
			}
			else if (leg.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE)
			{
				var footCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.DIGI_FOOT_ROLL,DuAEF.Duik.PseudoEffectsMatchNames.DIGI_FOOT_ROLL,"Foot roll");
				leg.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(1);";
				toesNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(3);\n" +
				"var tiptoe = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(1);\n" +
				"ctrl-tiptoe;";
				leg.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + footCtrl.name + "\")(2);";
			}
		}

		//hide and lock
		if (footNull){
			toesNull.enabled = false;
			toesNull.shy = true;
			toesNull.locked = true;
			footNull.enabled = false;
			footNull.shy = true;
			footNull.locked = true;
		}
		
		//select controller
		DuAEF.DuAE.Comp.unselectLayers();
		ctrl.layer.selected = true;
	});

	// =============== ARMS ================================

	var itArms = new DuList(arms);
	itArms.do(function(arm){

		//unparent
		if (arm.humerus && arm.shoulder) arm.humerus.parent = null;
		if (arm.radius && (arm.humerus ||  arm.shoulder)) arm.radius.parent = null;
		if (arm.hand && (arm.radius || arm.humerus)) arm.hand.parent = null;
		if (arm.claws  && (arm.hand || arm.radius || arm.humerus)) arm.claws.parent = null;
		if (arm.tip) arm.tip.parent = null;
		if (arm.palm) arm.palm.parent = null;

		//detect right or left, depending on the toes position
		var right = false;
		if (arm.claws && arm.hand)
		{
			var clawsPos = DuAEF.DuAE.Layer.getWorldPos(arm.claws);
			var handPos = DuAEF.DuAE.Layer.getWorldPos(arm.hand);
			right = (clawsPos[0] - handPos[0]) > 0;
		}

		//add nulls and controllers for the footRoll
		var clawsNull, handNull;
		//the foot roll needs all parts
		if ( arm.claws && arm.hand && ((arm.radius && arm.humerus) || (arm.radius && arm.shoulder) || (arm.humerus && arm.shoulder)) &&  arm.type != DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)
		{
			//claws
			clawsNull = DuAEF.DuAE.Layer.addNull(arm.claws);
			DuAEF.Duik.setDuikMarker(clawsNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			clawsNull.name = DuAEF.Duik.generateName('FootRoll',arm.claws.name);

			var handSize = arm.claws.transform.position.value[0] - arm.hand.transform.position.value[0];
			//tiptoe
			if (!arm.tip)
			{
				arm.tip = DuAEF.DuAE.Layer.addNull(arm.claws);
				arm.tip.name = "FootRoll | Tiptoe";
				arm.tip.transform.position.setValue([clawsNull.transform.position.value[0] + handSize/2,clawsNull.transform.position.value[1]]);
			}

			if (!arm.palm && arm.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				arm.palm = DuAEF.DuAE.Layer.addNull(arm.claws);
				arm.palm.name = "FootRoll | Heel";
				arm.palm.transform.position.setValue([arm.hand.transform.position.value[0],clawsNull.transform.position.value[1]]);
			}

			//hand
			handNull = DuAEF.DuAE.Layer.addNull(arm.hand);
			DuAEF.Duik.setDuikMarker(handNull,'Autorig FootRoll',DuAEF.Duik.LayerTypes.NULL);
			handNull.name = DuAEF.Duik.generateName('FootRoll',arm.hand.name);
		}

		//Controller for the arm
		var ctrlType = DuAEF.Duik.Controller.Types.HAND;
		if (handNull && arm.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) ctrlType = DuAEF.Duik.Controller.Types.FOOT;
		else if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) ctrlType = DuAEF.Duik.Controller.Types.CLAWS;
		else if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) ctrlType = DuAEF.Duik.Controller.Types.HOOF;
		var ctrl = null;

		if (arm.hand && ((arm.humerus || arm.radius || arm.shoulder) || (!arm.claws && !arm.tip)) && arm.type != DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.hand, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.claws && ((arm.humerus || arm.radius || arm.shoulder) || !arm.tip)) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.claws, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.hand && arm.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.hand, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.tip) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.tip, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.palm) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.palm, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.radius) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.radius, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.humerus) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.humerus, comp, useNull ? defaultType : ctrlType, customControllers);
		}
		else if (arm.shoulder) {
			ctrl = DuAEF.Duik.Autorig.getCreateController(arm.shoulder, comp, useNull ? defaultType : ctrlType, customControllers);
		}

		//re-set type in case of the controller being a null
		DuAEF.Duik.setDuikMarkerParameter(ctrl,DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE,ctrlType);

		//side effect
		var sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Arm");
		if (arm.side == 'left') sideEffect(1).setValue(2);

		armsCtrl.push(ctrl);

		//parenting
		if (arm.claws)
		{
			if (arm.hand) arm.claws.parent = arm.hand;
			else if (arm.radius) arm.claws.parent = arm.radius;
			else if (arm.humerus) arm.claws.parent = arm.humerus;
			else if (arm.shoulder) arm.claws.parent = arm.shoulder;
			else if (arm.tip || arm.palm) arm.claws.parent = spineTorso;
			else
			{
				arm.claws.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.hand)
		{
			if (arm.radius) arm.hand.parent = arm.radius;
			else if (arm.humerus) arm.hand.parent = arm.humerus;
			else if (arm.shoulder) arm.hand.parent = arm.shoulder;
			else if (arm.claws || arm.tip || arm.palm) arm.hand.parent = spineTorso;
			else
			{
				arm.hand.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.radius)
		{
			if (arm.humerus) arm.radius.parent = arm.humerus;
			else if (arm.shoulder) arm.radius.parent = arm.shoulder;
			else if (arm.hand || arm.claws || arm.tip || arm.palm) arm.radius.parent = spineTorso;
			else
			{
				arm.radius.parent = ctrl.layer;
				ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.humerus)
		{
			if (arm.shoulder) arm.humerus.parent = arm.shoulder;
			else if (arm.radius || arm.hand || arm.claws || arm.palm || arm.tip) arm.humerus.parent = spineTorso;
			else
			{
				arm.humerus.parent = ctrl.layer;
				if (spineTorso) ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.shoulder)
		{
			if (arm.humerus || arm.radius || arm.hand || arm.claws || arm.palm  || arm.tip) arm.shoulder.parent = spineTorso;
			else
			{
				arm.shoulder.parent = ctrl.layer;
				if (spineTorso) ctrl.layer.parent = spineTorso;
			}
		}
		if (arm.tip)
		{
			if (arm.palm) arm.tip.parent = arm.palm;
			else if (arm.claws) arm.tip.parent = arm.claws;
			else if (arm.hand) arm.tip.parent = arm.hand;
			else if (arm.radius) arm.tip.parent = arm.radius;
			else if (arm.humerus) arm.tip.parent = arm.humerus;
			else if (arm.shoulder) arm.tip.parent = arm.shoulder;
		}
		if (handNull)
		{
			handNull.parent = clawsNull;
			clawsNull.parent = arm.tip;
			if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) arm.palm.parent = ctrl.layer;
			else if(arm.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE) arm.tip.parent = ctrl.layer;
		}

		//IKs
		if (handNull)
		{
			//claws
			DuAEF.Duik.Rigging.oneLayerIK(arm.claws,undefined,arm.tip);
			//arm
			if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.hand,handNull);
			else if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.hand,handNull);
			else if (arm.radius && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.hand,handNull);
			//hand
			DuAEF.Duik.Rigging.oneLayerIK(arm.hand,undefined,clawsNull);
		}
		else
		{
			if (arm.claws && arm.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE)
			{
				if (arm.hand && arm.radius)
				{
					DuAEF.Duik.Rigging.twoLayerIK(arm.radius,arm.hand,arm.claws,ctrl);
					if (arm.humerus)
					{
						DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,undefined,ctrl);
						if (!arm.shoulder)
						{
							ctrl.layer.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.weightSlider).setValue(20);
							ctrl.layer.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).setValue(-arm.humerus.transform.rotation.value);
						}
					}
					else if (arm.shoulder)
					{
						DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,undefined,ctrl);
						ctrl.layer.effect(4)(2).setValue(20);
						ctrl.layer.effect(4)(3).setValue(-arm.shoulder.transform.rotation.value);
					}
				}
				else if (arm.hand && arm.humerus)
				{
					DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.hand,arm.claws,ctrl);
					if (arm.shoulder)
					{
						DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,undefined,ctrl);
						ctrl.effect(4)(2).setValue(20);
					}
				}
				else if (arm.hand && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.hand,arm.claws,ctrl);
				else if (arm.radius && arm.humerus)	DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.claws,ctrl);
				else if (arm.radius && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.claws,ctrl);
				else if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.claws,ctrl);
			}
			else if (arm.hand)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.hand,ctrl);
				else if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.hand,ctrl);
				else if (arm.radius && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.hand,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.hand,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.hand,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.hand,ctrl);
				else if (arm.claws) DuAEF.Duik.Rigging.oneLayerIK(arm.hand,arm.claws,ctrl);
				else if (arm.tip) DuAEF.Duik.Rigging.oneLayerIK(arm.hand,arm.tip,ctrl);
			}
			else if (arm.claws)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.claws,ctrl);
				if (arm.humerus && arm.shoulder) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.claws,ctrl);
				if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.claws,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.claws,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.claws,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.claws,ctrl);
				else if (arm.tip) DuAEF.Duik.Rigging.oneLayerIK(arm.claws,arm.tip,ctrl);
			}
			else if (arm.tip)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.tip,ctrl);
				else if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.tip,ctrl);
				else if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.tip,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.tip,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.tip,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.tip,ctrl);
			}
			else if (arm.palm)
			{
				if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.humerus,arm.radius,arm.palm,ctrl);
				if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.humerus,arm.palm,ctrl);
				if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.twoLayerIK(arm.shoulder,arm.radius,arm.palm,ctrl);
				else if (arm.shoulder) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.palm,ctrl);
				else if (arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.palm,ctrl);
				else if (arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.radius,arm.palm,ctrl);
			}
			else if (arm.humerus && arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.humerus,arm.radius,ctrl);
			else if (arm.shoulder && arm.humerus) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.humerus,ctrl);
			else if (arm.shoulder && arm.radius) DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,arm.radius,ctrl);
		}

		//shoulder rotation
		if (arm.shoulder && arm.humerus && arm.radius)
		{
			var rotVal = arm.shoulder.transform.rotation.value;
			DuAEF.Duik.Rigging.oneLayerIK(arm.shoulder,undefined,ctrl);
			var ikShoulderEffect = ctrl.layer.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
			if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.UNGULATE && arm.claws) ikShoulderEffect = ctrl.layer.effect(5);
			var oldName = ikShoulderEffect.name;
			ikShoulderEffect.name = DuAEF.Duik.generateName('',arm.shoulder.name + " rotation");
			app.project.autoFixExpressions(oldName,ikShoulderEffect.name);
			ikShoulderEffect(2).setValue(20);
			ikShoulderEffect(3).setValue( - arm.shoulder.transform.rotation.value + rotVal*2);
			ikShoulderEffect(5).setValue(1);
		}

		//Controls
		if (handNull)
		{
			//add an IK effect on the controller
			var ikCtrl = DuAEF.Duik.PseudoEffects.TWOLAYER_IK.apply(ctrl.layer);
			//the effect on the null of the hand
			var ikEffect = handNull.effect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName);
			var ikHand = clawsNull.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
			var ikToes = arm.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
			ikCtrl.name = ikEffect.name;
			//link the properties
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckbox).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.reverseCheckbox).value);
			DuAEF.DuAE.Property.linkProperties(ikEffect,ikCtrl);
			//the IK/FK Switches
			DuAEF.DuAE.Property.linkProperties(ikHand(DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox),ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox),true);
			var fkExp = 'if (effect("' + ikHand.name + '")(' + DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox + ').value) value;\n';
			fkExp += 'else ';
			fkExp += DuAEF.DuAE.Property.getExpressionLink(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalAngle),true);
			fkExp += ';';
			ikHand(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).expression = fkExp;
			DuAEF.DuAE.Property.linkProperties(ikToes(DuAEF.Duik.PseudoEffects.ONELAYER_IK.ikCheckbox),ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.ikCheckbox),true);
			//and re-setup the layers & needed data
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.upperLayer).value);
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.lowerLayer).value);
			ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalLayer).setValue(ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalLayer).value);
			DuAEF.DuAE.Property.pickWhip(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalPositionPoint),ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalPositionPoint));
			DuAEF.DuAE.Property.pickWhip(ikCtrl(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalWorldPositionPoint),ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.goalWorldPositionPoint));

			//tiptoe, heel and footroll
			if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE)
			{
				var handCtrl = DuAEF.Duik.PseudoEffects.FOOT_ROLL.apply(ctrl.layer);
				arm.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.tipToeAngle + ");";
				var op  = right ? "<" : ">";
				arm.palm.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.heelAngle + ");\n" +
				"var roll = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle + ");\n" +
				"roll " + op + " 0 ? roll+ctrl : ctrl;";
				op = right ? ">" : "<";
				clawsNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.footRollAngle + ");\n" +
				"ctrl " + op + " 0 ? ctrl : 0;";
				var ikToesEffect = arm.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName);
				ikToesEffect(3).expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(" + DuAEF.Duik.PseudoEffects.FOOT_ROLL.toesAngle + ");";
			}
			else if (arm.type == DuAEF.Duik.Autorig.AnimalTypes.DIGITIGRADE)
			{
				var handCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.DIGI_FOOT_ROLL,DuAEF.Duik.PseudoEffectsMatchNames.DIGI_FOOT_ROLL,"Foot roll");
				arm.tip.transform.rotation.expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(1);";
				clawsNull.transform.rotation.expression = "//Duik.footRoll\n" +
				"var ctrl = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(3);\n" +
				"var tiptoe = thisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(1);\n" +
				"ctrl-tiptoe;";
				arm.tip.effect(DuAEF.Duik.PseudoEffects.ONELAYER_IK.matchName)(DuAEF.Duik.PseudoEffects.ONELAYER_IK.fkAngle).expression = "//Duik.footRoll\nthisComp.layer(\"" + ctrl.layer.name + "\").effect(\"" + handCtrl.name + "\")(2);";
			}
		}

		if (arm.shoulder)
		{
			var shoulderCtrl = DuAEF.DuAE.Layer.addPseudoEffect(ctrl.layer,DuAEF.Duik.PseudoEffects.SHOULDER,DuAEF.Duik.PseudoEffectsMatchNames.SHOULDER,DuAEF.Duik.generateName('',arm.shoulder.name + " position"));

			if (arm.type != DuAEF.Duik.Autorig.AnimalTypes.PLANTIGRADE) shoulderCtrl(9).setValue(10);

			//arm parent rotation
			var ikEffect = ctrl.layer.effect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.matchName);
			ikEffect(DuAEF.Duik.PseudoEffects.TWOLAYER_IK.parentRotationCheckbox).setValue(0);

			arm.shoulder.transform.position.expression = '//Duik.shoulder\n' +
				'var c = thisComp.layer("' + ctrl.layer.name + '");\n' +
				'var fx =  c.effect("' + shoulderCtrl.name + '");\n' +
				'var a = fx(14).value;\n' +
				'if (thisLayer.hasParent) a = thisLayer.parent.fromWorld(a) - thisLayer.parent.fromWorld([0,0]);\n' +
				'var result = value + a;\n' +
				'var cp = c.toWorld(c.anchorPoint);\n' +
				'if (thisLayer.hasParent) cp = thisLayer.parent.fromWorld(cp);\n' +
				'cp0 = c.toWorld(c.anchorPoint,0);\n' +
				'if (thisLayer.hasParent) cp0 = thisLayer.parent.fromWorld(cp0);\n' +
				'cp -= cp0;\n' +
				'result += cp*(fx(9).value/100);\n' +
				'result;';
		}

		//hide and lock
		if (handNull){
			clawsNull.enabled = false;
			clawsNull.shy = true;
			clawsNull.locked = true;
			handNull.enabled = false;
			handNull.shy = true;
			handNull.locked = true;
		}

		//select controller
		DuAEF.DuAE.Comp.unselectLayers();
		ctrl.layer.selected = true;
	})

	//ctrl list
	var allCtrls = [];
	if (hipsCtrl != null) allCtrls.push(hipsCtrl);
	if (bigHipsCtrl != null) allCtrls.push(bigHipsCtrl);
	if (shoulderCtrl != null) allCtrls.push(shoulderCtrl);
	if (headCtrl != null) allCtrls.push(headCtrl);
	allCtrls = allCtrls.concat(legsCtrl);
	allCtrls = allCtrls.concat(armsCtrl);
	allCtrls = allCtrls.concat(tailsCtrl);

	// =============== CUSTOM STRUCTURES ================================

	var itStructures = new DuList(customStructures);
	itStructures.do(function(structureLayers)
	{
		var structure = new Structure(structureLayers);

		var useIK = false;
		var useFK = false;
		var useBezier = false;

		//try to find a corresponding controller
		//do we prefer an FK controller?
		var preferFK = longChainType == DuAEF.Duik.Rigging.chainTypes.FK;
		var shortChain = structure.elements.length < 4;
		if (shortChain) preferFK = false;
		//get the controller
		var ctrl = structure.getController(customControllers, preferFK, 10);
		//if any controller
		if (ctrl != null)
		{
			//if the controller is not at the end, remove the end
			if (ctrl.structureIndex < structure.elements.length - 1 && ctrl.structureIndex != 0) structure.elements.pop();
			//reset short chain
			shortChain = structure.elements.length < 4;
			//if it's a short chain, always IK, so do not use any FK controller
			if (shortChain && ctrl.structureIndex == 0) ctrl = null;
		}

		//short chains are always IK
		if (shortChain) useIK = true;
		else
		{
			//if there's a controller, check its index
			if (ctrl)
			{
				if (ctrl.structureIndex == 0) useFK = true;
				else if (longChainType == DuAEF.Duik.Rigging.chainTypes.BEZIER) useBezier = true;
				else useIK = true;
			}
			else
			{
				if (longChainType == DuAEF.Duik.Rigging.chainTypes.FK) useFK = true;
				if (longChainType == DuAEF.Duik.Rigging.chainTypes.BEZIER) useBezier = true;
				else useIK = true;
			}
		}

		//create
		if (useFK) allCtrls.push(DuAEF.Duik.Rigging.fkOverlap(structure, ctrl));
		else if (useBezier) allCtrls = allCtrls.concat( DuAEF.Duik.Rigging.ik(structure, ctrl, true) );
		else allCtrls = allCtrls.concat(DuAEF.Duik.Rigging.ik(structure, ctrl, false, threeAsOneAndTwo));
	});

	// =================== STANDARD LAYERS ========================

	//if nothing were rigged, try adding IKs...
	if (allCtrls.length == 0)
	{
		if (layers.length >= 4)
		{
			if (longChainType == DuAEF.Duik.Rigging.chainTypes.FK)
			{
				allCtrls = [DuAEF.Duik.Rigging.fkOverlap(layers)];
			}
			else if (longChainType == DuAEF.Duik.Rigging.chainTypes.BEZIER)
			{
				allCtrls = DuAEF.Duik.Rigging.ik(layers, undefined, true);
			}
			else
			{
				allCtrls = DuAEF.Duik.Rigging.ik(layers, undefined, false, threeAsOneAndTwo);
			}
		}
		else
		{
			allCtrls = DuAEF.Duik.Rigging.ik(layers);
		}
	}

	//try to detect left and right
	DuAEF.Duik.Autorig.detectCharacterSide(allCtrls);

	//move controllers to the top of the comp
	if (useNull) 
	{
		new DuList(allCtrls).do(function(ctrl)
		{
			ctrl.layer.moveToBeginning();
		});
	}

	app.endSuppressDialogs(false);

	return allCtrls;
}

/**
 * Tries to detect and adds a "side" effect (or set the existing one) specifying if the limbs are on the right or on the left.<br />
 * You must at least provide two hands or two feet for the function to be able to detect the side.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} [handCtrl1] - The first hand controller
 * @param {Controller|Layer} [handCtrl2] - The second hand controller
 * @param {Controller|Layer} [footCtrl1] - The first foot controller
 * @param {Controller|Layer} [footCtrl2] - The second foot controller
 */
DuAEF.Duik.Autorig.detectLimbSide = function (handCtrl1,handCtrl2,footCtrl1,footCtrl2)
{
	var hand1 = handCtrl1;
	var hand2 = handCtrl2;
	var foot1 = footCtrl1;
	var foot2 = footCtrl2;
	if (handCtrl1 instanceof Controller) hand1 = handCtrl1.layer;
	if (handCtrl2 instanceof Controller) hand2 = handCtrl2.layer;
	if (footCtrl1 instanceof Controller) foot1 = footCtrl1.layer;
	if (footCtrl2 instanceof Controller) foot2 = footCtrl2.layer;

	if ( (hand1 && hand2) && !(foot1 && foot2) )
	{
		var pos1 = DuAEF.DuAE.Layer.getWorldPos(hand1);
		var pos2 = DuAEF.DuAE.Layer.getWorldPos(hand2);
		if (pos1[0] < pos2[0])
		{
			DuAEF.Duik.Autorig.setRight(hand1);
			DuAEF.Duik.Autorig.setLeft(hand2);
		}
		else
		{
			DuAEF.Duik.Autorig.setRight(hand2);
			DuAEF.Duik.Autorig.setLeft(hand1);
		}
		return;
	}

	if ( !(hand1 && hand2) && (foot1 && foot2) )
	{
		var pos1 = DuAEF.DuAE.Layer.getWorldPos(foot1);
		var pos2 = DuAEF.DuAE.Layer.getWorldPos(foot2);
		if (pos1[0] < pos2[0])
		{
			DuAEF.Duik.Autorig.setRight(foot1);
			DuAEF.Duik.Autorig.setLeft(foot2);
		}
		else
		{
			DuAEF.Duik.Autorig.setRight(foot2);
			DuAEF.Duik.Autorig.setLeft(foot1);
		}
		return;
	}

	if (!foot1 || !foot2 || !hand1 || !hand2) return;

	//effects
	var foot2Effect = foot2.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!foot2Effect) foot2Effect = DuAEF.DuAE.Layer.addPseudoEffect(foot2,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Leg");

	var foot1Effect = foot1.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!foot1Effect) foot1Effect = DuAEF.DuAE.Layer.addPseudoEffect(foot1,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Leg");

	var hand2Effect = hand2.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!hand2Effect) hand2Effect = DuAEF.DuAE.Layer.addPseudoEffect(hand2,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Leg");

	var hand1Effect = hand1.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!hand1Effect) hand1Effect = DuAEF.DuAE.Layer.addPseudoEffect(hand1,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Leg");

	//if it's already done
	if ( hand1Effect(1).value != hand2Effect(1).value && foot2Effect(1).value != foot1Effect(1).value ) return;

	//arbitrarily choose one left and one right
	if (foot2Effect(1).value == foot1Effect(1).value && hand1Effect(1).value == hand2Effect(1).value)
	{
		var pos1 = DuAEF.DuAE.Layer.getWorldPos(foot1);
		var pos2 = DuAEF.DuAE.Layer.getWorldPos(foot2);
		if (pos1[0] < pos2[0])
		{
			DuAEF.Duik.Autorig.setRight(foot1);
			DuAEF.Duik.Autorig.setLeft(foot2);
		}
		else
		{
			DuAEF.Duik.Autorig.setRight(foot2);
			DuAEF.Duik.Autorig.setLeft(foot1);
		}
	}


	if (hand1Effect(1).value == hand2Effect(1).value)
	{
		var h1 = DuAEF.DuAE.Layer.getWorldPos(hand1);
		var f1 = DuAEF.DuAE.Layer.getWorldPos(foot1);
		var f2 = DuAEF.DuAE.Layer.getWorldPos(foot2);

		var h1f1 = DuMath.getLength(h1,f1);
		var h1f2 = DuMath.getLength(h1,f2);

		if (h1f1 < h1f2)
		{
			hand1Effect(1).setValue(foot1Effect(1).value);
			hand2Effect(1).setValue(foot2Effect(1).value);
		}
		else
		{
			hand1Effect(1).setValue(foot2Effect(1).value);
			hand2Effect(1).setValue(foot1Effect(1).value);
		}
	}
	else
	{
		var h1 = DuAEF.DuAE.Layer.getWorldPos(hand1);
		var h2 = DuAEF.DuAE.Layer.getWorldPos(hand2);
		var f1 = DuAEF.DuAE.Layer.getWorldPos(foot1);

		var f1h1 = DuMath.getLength(h1,f1);
		var f1h2 = DuMath.getLength(h2,f1);

		if (f1h1 < f1h2)
		{
			foot1Effect(1).setValue(hand1Effect(1).value);
		}
		else
		{
			foot1Effect(1).setValue(hand2Effect(1).value);
		}
	}
}

/**
 * Tries to detect and adds a "side" effect (or set the existing one) specifying if the limbs are on the right or on the left.<br />
 * This method will search for hand and foot controllers in a set of controllers.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller[]|Layer[]} controllers - The controllers
 */
DuAEF.Duik.Autorig.detectCharacterSide = function (controllers)
{
	if (controllers.length == 0) return;
	var it = new DuList(controllers);

	//detect left and right
	var h1 = null;
	var f1 = null;
	var h2 = null;
	var f2 = null;
	it.do(function(controller)
	{
		var layer = controller;
		if (controller instanceof Controller) layer = controller.layer;

		var params = DuAEF.Duik.getDuikMarkerParameters(layer);
		if (!params) return;
		var type = params[DuAEF.Duik.MarkerParameters.CONTROLLER_TYPE];
		if (type == DuAEF.Duik.Controller.Types.HAND)
		{
			if (h1 == null) h1 = controller;
			else h2 = controller;
		}
		if (type == DuAEF.Duik.Controller.Types.FOOT)
		{
			if (f1 == null) f1 = controller;
			else f2 = controller;
		}
	});


	DuAEF.Duik.Autorig.detectLimbSide(h1,h2,f1,f2);
	return;
}

/**
 * Sets the controller to be on the right.<br />
 * Adds a "Side" effect if needed on the layer.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} controller - The controller
 */
DuAEF.Duik.Autorig.setRight = function(controller)
{
	var layer = controller;
	if (controller instanceof Controller) layer = controller.layer;
	var sideEffect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!sideEffect) sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Arm");
	sideEffect(1).setValue(1);
}

/**
 * Sets the controller to be on the left.<br />
 * Adds a "Side" effect if needed on the layer.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} controller - The controller
 */
DuAEF.Duik.Autorig.setLeft = function(controller)
{
	var layer = controller;
	if (controller instanceof Controller) layer = controller.layer;
	var sideEffect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!sideEffect) sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Arm");
	sideEffect(1).setValue(2);
}

/**
 * Sets the controller side.<br />
 * Adds a "Side" effect if needed on the layer.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} controller - The controller
 * @param {bool} isRight - True to set to right, false to set to left
 */
DuAEF.Duik.Autorig.setSide = function(controller, isRight)
{
	if (isRight) DuAEF.Duik.Autorig.setRight(controller);
	else DuAEF.Duik.Autorig.setLeft(controller);
}

/**
 * Checks if the controller is on the right.<br />
 * Adds a "Side" effect if needed on the layer.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} controller - The controller
 * @return {bool} True if the controller is on the right.
 */
DuAEF.Duik.Autorig.isRight = function(controller)
{
	var layer = controller;
	if (controller instanceof Controller) layer = controller.layer;
	var sideEffect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!sideEffect) sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Arm");
	return sideEffect(1).value == 1;
}

/**
 * Checks if the controller is on the left.<br />
 * Adds a "Side" effect if needed on the layer.
 * @memberof DuAEF.Duik.Autorig
 * @param {Controller|Layer} controller - The controller
 * @return {bool} True if the controller is on the left.
 */
DuAEF.Duik.Autorig.isLeft = function(controller)
{
	var layer = controller;
	if (controller instanceof Controller) layer = controller.layer;
	var sideEffect = layer.effect(DuAEF.Duik.PseudoEffectsMatchNames.SIDE);
	if (!sideEffect) sideEffect = DuAEF.DuAE.Layer.addPseudoEffect(layer,DuAEF.Duik.PseudoEffects.SIDE,DuAEF.Duik.PseudoEffectsMatchNames.SIDE,"Arm");
	return sideEffect(1).value == 2;
}
