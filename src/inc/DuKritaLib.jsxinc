/*
DuKritaLib
Library for interchange with Krita
Copyright (c) 2017-2018 Nicolas Dufresne, Rainbox Productions
https://rainboxprod.coop

__Contributors:__

	Nicolas Dufresne - Lead developer
	Kevin Masson - Developer

__Thanks to:__

	Dan Ebberts - Writing the first IK Expressions
	Eric Epstein - making the IK's work with 3D Layers
	Kevin Schires – Including images in the script
	Matias Poggini – Bezier IK feature
	Eric Epstein - Making the IK's work with 3D Layers
	Assia Chioukh and Quentin Saint-Georges – User Guides composition
	Motion Cafe – Ideas and feedback
	Fous d’anim – Ideas and feedback
	All 258 Duik 15 indiegogo backers for making this libDuik possible!


This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @class
 * @name Krita
 * @classdesc A complete Krita artwork<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.Krita.loadCSV} to create a Krita object.
 * @property {string} name - The name of this project
 * @property {int} width - The width, in pixels
 * @property {int} height - The height, in pixels
 * @property {int} frameCount - The duration, in frames
 * @property {float} frameRate - The frame rate, in frames per second
 * @property {float} pixelAspect - The pixel aspect ratio
 * @property {KritaLayer[]} layers - The layers
 */

/**
 * @class
 * @name KritaLayer
 * @classdesc A Krita Layer<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.Krita.loadCSV} to create a Krita object containing the layers.
 * @property {string} name - The layer name
 * @property {float} opacity - The opacity, in the range 0.0-100.0%
 * @property {BlendingMode} blendingMode - The blending mode of the layer
 * @property {bool} enabled - True if the layer is visible
 * @property {File[]} frames - The frames of the animtion for this layer; null for empty frames.
 */

/**
 * Krita interchange tools
 * @namespace
 * @memberof DuAEF
 */
DuAEF.Krita = {};

/**
 * Associative array that converts Krita blending mode names to After Effects BlendingMode enum.
 * @example
 * DuAEF.Krita.blendingModes["Color"]
 * //returns BlendingMode.NORMAL
 * @type {Object}
 */
DuAEF.Krita.blendingModes = {
    'Color': BlendingMode.NORMAL,
    'Add': BlendingMode.LINEAR_DODGE,
    'Screen': BlendingMode.SCREEN,
    'Lighten': BlendingMode.LIGHTEN,
    'HardLight': BlendingMode.HARD_LIGHT,
    'SoftLight': BlendingMode.SOFT_LIGHT,
    'Light': BlendingMode.LINEAR_LIGHT,
    'Light2': BlendingMode.COLOR_DODGE,
    'Difference': BlendingMode.DIFFERENCE,
    'Shade2': BlendingMode.COLOR_BURN,
    'Darken': BlendingMode.DARKEN,
    'Sub2': BlendingMode.SUBTRACT,
    'Multiply': BlendingMode.MULTIPLY,
    'Sub': BlendingMode.NORMAL,
    'Divide': BlendingMode.DIVIDE
}

/**
 * Loads a Krita project from a CSV file
 * @memberof DuAEF.Krita
 * @param {File} file - The .csv file
 * @return {Krita|null} The Krita project or null if the file could not be parsed or opened
 */
DuAEF.Krita.loadCSV = function( file )
{
    var check = DuFile.readFirstLine( file );
    if ( check.indexOf( 'TVPaint' ) < 0 ) return null;

    //open and parse file
    var data = DuFile.parseCSV( file );

    if ( data.length == 0 ) return null;

    var name = DuPath.getBasename( file );

    var krita = {};
    krita.name = name;
    krita.width = 1920;
    krita.height = 1080;
    krita.frameCount = 0;
    krita.frameRate = 24.0;
    krita.pixelAspect = 1.0;
    var numLayers = null;

    //project properties are on the second and third line
    for ( var i = 0, num = data[ 1 ].length; i < num; i++ )
    {
        var key = DuString.fullTrim( data[ 1 ][ i ] ).toLowerCase();
        if ( key == 'project name' )
        {
            if ( data[ 2 ][ i ] != '' ) krita.name = data[ 2 ][ i ];
        }
        else if ( key == 'width' )
        {
            var n = parseInt( data[ 2 ][ i ] );
            if ( !isNaN( n ) ) krita.width = n;
        }
        else if ( key == 'height' )
        {
            var n = parseInt( data[ 2 ][ i ] );
            if ( !isNaN( n ) ) krita.height = n;
        }
        else if ( key == 'frame count' )
        {
            var n = parseInt( data[ 2 ][ i ] );
            if ( !isNaN( n ) ) krita.frameCount = n;
        }
        else if ( key == 'frame rate' )
        {
            var n = parseFloat( data[ 2 ][ i ] );
            if ( !isNaN( n ) ) krita.frameRate = n;
        }
        else if ( key == 'pixel aspect ratio' )
        {
            var n = parseFloat( data[ 2 ][ i ] );
            if ( !isNaN( n ) ) krita.pixelAspect = n;
        }
        else if ( key == 'layer count' )
        {
            numLayers = parseInt( data[ 2 ][ i ] );
        }
    }

    if ( isNaN( numLayers ) ) return null;

    //layer data
    krita.layers = [];

    if ( numLayers == 0 ) return krita;

    //create layer objects
    for ( var i = 0; i < numLayers; i++ )
    {
        krita.layers[ i ] = {};
        krita.layers[ i ].frames = [];
        krita.layers[ i ].name = 'Layer ' + i;
        krita.layers[ i ].opacity = 100;
        krita.layers[ i ].blendingMode = BlendingMode.NORMAL;
        krita.layers[ i ].enabled = true;
    }

    var framesFolder = file.path + '/' + name + '.frames/';

    //for each line
    for ( var i = 3, num = data.length; i < num; i++ )
    {
        var key = DuString.fullTrim( data[ i ][ 0 ] ).toLowerCase();
        //for each column
        for ( var j = 1, numJ = data[ i ].length; j < numJ; j++ )
        {
            var val = data[ i ][ j ];
            if ( key == '#layers' )
            {
                krita.layers[ j - 1 ].name = DuString.fullTrim( val );
            }
            else if ( key == '#density' )
            {
                var opacity = parseFloat( val );
                if ( !isNaN( opacity ) ) krita.layers[ j - 1 ].opacity = opacity * 100;
            }
            else if ( key == '#blending' )
            {
                if ( DuAEF.Krita.blendingModes[ val ] ) krita.layers[ j - 1 ].blendingMode = DuAEF.Krita.blendingModes[ val ];
            }
            else if ( key == '#visible' )
            {
                var visible = parseInt( val );
                if ( isNaN( visible ) ) krita.layers[ j - 1 ].enabled = false;
                krita.layers[ j - 1 ].enabled = visible == 1;
            }
            else
            {
                var reFrame = /^#(\d)+/;
                var match = reFrame.exec( key );
                if ( match )
                {
                    var file = null;
                    if ( val != '' )
                    {
                        file = new File( framesFolder + DuString.trim( val ) );
                    }
                    krita.layers[ j - 1 ].frames.push( file );
                }
            }
        }
    }

    return krita;
}

/**
 * Imports a Krita CSV file with all layers and animation
 * @memberof DuAEF.Krita
 * @param {File} file - The .csv file
 * @return {int} Error code: -2: invalid file or data,<br/>
 * -1: no duration (frameCount is 0),<br/>
 * 0: no layer to import in the file,<br/>
 * 1: ok
 */
DuAEF.Krita.importCSV = function( file )
{
    var krita = DuAEF.Krita.loadCSV( file );
    if ( !krita ) return -2;

    var kritaLayers = krita.layers;
    var numLayers = kritaLayers.length;
    if ( numLayers == 0 ) return 0;

    if ( !krita.frameCount ) return 0;

    //create comp
    var duration = krita.frameCount / krita.frameRate;
    frameDuration = 1 / krita.frameRate;
    var mainComp = app.project.items.addComp( krita.name, krita.width, krita.height, krita.pixelAspect, duration, krita.frameRate );

    //create Folder item
    var layerFolder = app.project.items.addFolder( krita.name + " | Layers" );
    var framesFolder = app.project.items.addFolder( krita.name + " | Frames" );

    //import frames
    new DuList( kritaLayers ).do( function( kritaLayer )
    {
        //create comp
        var kritaLayerComp = layerFolder.items.addComp( kritaLayer.name, krita.width, krita.height, krita.pixelAspect, duration, krita.frameRate );
        var frameFolder = framesFolder.items.addFolder( kritaLayer.name + " | Frames" );
        var kritaLayerPrecomp = mainComp.layers.add( kritaLayerComp );
        var expoEffect = kritaLayerPrecomp.property( 'ADBE Effect Parade' ).addProperty( 'ADBE Slider Control' );
        expoEffect.name = "Animation exposure";
        kritaLayerPrecomp.moveToEnd();
        kritaLayerPrecomp.blendingMode = kritaLayer.blendingMode;
        //import frames
        var importedFrames = [];
        var prevFrame = '';
        //current time
        var itFrames = new DuList( kritaLayer.frames );
        itFrames.do( function( frame )
        {
            var currentTime = itFrames.current / krita.frameRate;

            if ( !frame )
            {
                prevFrame = '';
                return;
            }

            if ( !frame.exists )
            {
                prevFrame = '';
                return;
            }


            if ( frame.name == prevFrame )
            {
                kritaLayerComp.layer( 1 ).outPoint = currentTime + frameDuration;
                return;
            }

            prevFrame = frame.name;
            //check if already imported
            var importedFrame;
            for ( var i = 0, num = importedFrames.length; i < num; i++ )
            {
                if ( importedFrames[ i ].mainSource.file.absoluteURI == frame.absoluteURI )
                {
                    importedFrame = importedFrames[ i ];
                    break;
                }
            }
            //if not found, import
            if ( !importedFrame )
            {
                importedFrame = app.project.importFile( new ImportOptions( frame ) );
                importedFrame.parentFolder = frameFolder;
                importedFrames.push( importedFrame );
            }
            //add layer and exposition keyframes
            var l = kritaLayerComp.layers.add( importedFrame, frameDuration );
            l.startTime = currentTime;
            kritaLayerPrecomp.property( 'ADBE Marker' ).setValueAtTime( currentTime, new MarkerValue( '' ) );
            expoEffect( 1 ).setValueAtTime( currentTime, currentTime );
            DuAEF.DuAE.Property.setKeyInterpolation( expoEffect( 1 ), expoEffect( 1 ).numKeys, KeyframeInterpolationType.HOLD );
        } );
    } );
}
