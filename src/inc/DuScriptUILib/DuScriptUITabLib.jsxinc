
/**
 * @class
 * @name DuTabPanel
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A Panel with tabs.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuAEF.DuScriptUI.addTabPanel} to create a picker.<br />
 * The DuTabPanel inherits the Group object from ScriptUI and has all of its properties and methods.
 * @property {DuButton[]} buttons - The buttons for the tabs. Not that an "index" property is added to the button, containing the DuTab index.
 * @property {DuTab[]} tabs - The tabs.
 * @property {int} index - The currently visible tab.
 * @property {Group} buttonsGroup - The ScriptUI Group containing the buttons
 * @property {Group} mainGroup - The ScriptUI Group containing the tabs
 * @property {string} scriptUIPanel - The file name ("script.jsx") of a scriptUI Panel. Alt+Click on this tab will open/close this panel.
 * @property {DuTabPanel~onChange} onChange - Called when the index changes.
 */

/**
 * Adds a new empty DuTab in the DuTabPanel.
 * @method
 * @memberof DuTabPanel
 * @name addTab
 * @param {string} [text=''] - The label of the button.
 * @param {string} [image=''] - The path to the icon.
 * @param {string} [helpTip=''] - The helptip.
 * @param {string} [imageOver=image] - The path to an icon displayed when the mouse is over the button.
 * @return {DuTab} The new DuTab.
 */

/**
 * Sets the current visible tab.
 * @method
 * @memberof DuTabPanel
 * @name setCurrentIndex
 * @param {int} [index=0] - The index of the tab to show.
 */

/**
 * Called when the index changes.
 * @callback DuTabPanel~onChange
 * @memberof DuTabPanel
 */

/**
 * @class
 * @name DuTab
 * @classdesc For use with {@link DuAEF.DuScriptUI}.<br />
 * A DuTab inside a {@link DuTabPanel}.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuTabPanel.add} to create a new DuTab.
 * @property {int} index - The index of this tab.
 * @property {DuButton} button - The button associated with this tab.
 * @property {DuTab~tabActivated} onActivate - The function to execute when the tab is displayed.
 * @property {DuTab~tabDeActivated} onActivate - The function to execute when the tab is hidden.
 * @property {DuTab~build} build - You can use this callback to add a function which builds the UI of the tab, it will be called on first display.
 */

/**
 * The function to execute when the tab is about to be displayed.
 * @callback DuTab~tabActivated
 * @memberof DuTab
 */

/**
 * The function to execute when the tab is hidden.
 * @callback DuTab~tabDeActivated
 * @memberof DuTab
 */

/**
 * You can use this callback to add a function which builds the UI of the tab, it will be called on first display.<br />
 * This allows a faster startup of your script by delaying the creation of the tabs which are hidden at startup.<br />
 * The function must take one argument, a ScriptUI Group which is the tab itself. You can add controls in this group.
 * @callback DuTab~build
 * @param {Group} tab - The tab where the ui has to be built
 * @memberof DuTab
 */

/**
 * Creates a panel with tabs<br />
 * @memberof DuAEF.DuScriptUI
 * @param {Window|Panel|Group} container - The ScriptUI Object which will contain and display the panel.
 * @param {boolean} [showTitle=true] - Wether to show the titles of the tabs or not.
 * @return {DuTabPanel} The panel.
 */
DuAEF.DuScriptUI.addTabPanel = function( container )
{
    if ( typeof buttonsAlignment === 'undefined' ) buttonsAlignment = 'center';

    var panel = DuAEF.DuScriptUI.addGroup( container, 'column' );

    panel.alignment = [ 'fill', 'fill' ];

    panel.buttons = [];
    panel.tabs = [];
    panel.tabGroups = [];
    panel.showTitle = true;
    panel.onChange = function() {};

    //adds a group for the buttons
    panel.buttonsGroup = DuAEF.DuScriptUI.addGroup( panel, 'row' );
    //adds a group for the tabs
    panel.mainGroup = DuAEF.DuScriptUI.addGroup( panel, 'stack' );
    panel.mainGroup.alignment = [ 'fill', 'fill' ];

    panel.addTab = function( text, image, helpTip, imageOver )
    {
        text = def( text, '');

        //adds the new button
        var button = DuAEF.DuScriptUI.addCheckBox( panel.buttonsGroup, text, image, helpTip, imageOver, undefined, undefined, true );

        button.index = panel.tabs.length;
        panel.buttons.push( button );

        //adds the new tab
        var tab = DuAEF.DuScriptUI.addGroup( panel.mainGroup, 'column' );
        tab.alignment = [ 'fill', 'fill' ];
        tab.visible = false;

        //the onActivate callBack
        tab.tabActivated = function() {};
        tab.tabDeActivated = function() {};
        //the build callBack
        tab.build = function( theTab ) {};
        tab.built = false;

        tab.scriptUIPanel = "";

        tab.button = button;

        //add to the list
        tab.index = panel.tabs.length;
        panel.tabs.push( tab );

        DuAEF.DuScriptUI.allTabs.push( tab );

        button.onClick = function()
        {
            panel.setCurrentIndex( button.index );
        }

        button.onAltClick = function()
        {
            DuAEF.DuAE.App.openScriptUIPanel(tab.scriptUIPanel);
        }

        return tab;
    }

    panel.setCurrentIndex = function( index )
    {
        var numTabs = panel.tabs.length;

        if ( numTabs == 0 ) return;

        //hide all tabs
        for ( var i = 0; i < numTabs; i++ )
        {
            var visible = i == index;
            var tab = panel.tabs[ i ];
            if ( visible )
            {
                if ( !tab.built )
                {
                    tab.build( tab );
                    //resize everything
                    if ( DuAEF.DuScriptUI.uiShown ) DuAEF.DuScriptUI.layout( tab );
                    tab.built = true;
                }
                tab.visible = true;
                tab.tabActivated();
            }
            else
            {
                tab.visible = false;
                tab.tabDeActivated();
            }

            panel.buttons[ i ].setChecked( visible );
        }

        if ( index >= 0 && index < numTabs ) panel.index = index;
        else panel.index = -1;

        panel.onChange();
    }

    return panel;
}

/**
 * Builds all the tabs from all the tab panels<br />
 * @memberof DuAEF.DuScriptUI
 */
DuAEF.DuScriptUI.buildAllTabs = function()
{
    for ( var i = 0, num = DuAEF.DuScriptUI.allTabs.length; i < num; i++ )
    {
        var tab = DuAEF.DuScriptUI.allTabs[ i ];
        if ( !tab.built )
        {
            tab.build( tab );
            //resize everything
            DuAEF.DuScriptUI.layout( tab );
            tab.built = true;
        }
    }
    //check if there's still unbuilt tabs which may have been added
    var redo = false;
    for ( var i = DuAEF.DuScriptUI.allTabs.length - 1; i >= 0; i-- )
    {
        var tab = DuAEF.DuScriptUI.allTabs[ i ];
        if ( !tab.built )
        {
            redo = true;
            break;
        }
    }
    if ( redo ) DuAEF.DuScriptUI.buildAllTabs();
}
