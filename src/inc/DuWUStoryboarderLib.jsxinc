/*
	DuStoryboarderLib
	Library for interchange with Wonderunit Storyboarder
	Copyright (c) 2017-2018 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	__Contributors:__

		Nicolas Dufresne - Lead developer
		Kevin Masson - Developer

	__Thanks to:__

		Dan Ebberts - Writing the first IK Expressions
		Eric Epstein - making the IK's work with 3D Layers
		Kevin Schires – Including images in the script
		Matias Poggini – Bezier IK feature
		Eric Epstein - Making the IK's work with 3D Layers
		Assia Chioukh and Quentin Saint-Georges – User Guides composition
		Motion Cafe – Ideas and feedback
		Fous d’anim – Ideas and feedback
		All 258 Duik 15 indiegogo backers for making this libDuik possible!


	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
	* @class
	* @name WUStoryboard
	* @classdesc A complete Wonder Unit Storyboard, as returned by DuAEF.WUStoryboarder.loadStoryboard<br />
	* This is not a real class, and cannot be instanciated.<br />
	* Use DuAEF.WUStoryboarder.loadStoryboard to create it.
	* @property {string} version - The version of Storyboarder used to create this storyboard
	* @property {string} aspectRatio - The format of the board
	* @property {number} fps - The fps of the project
	* @property {int} defaultBoardTiming - The default board duration
	* @property {WUBoard[]} boards - The boards
*/

/**
	* @class
	* @name WUBoard
	* @classdesc A board in a {@link WUStoryboard}<br />
	* This is not a real class, and cannot be instanciated.
	* @property {string} uid - A unique identifier for this board
	* @property {string} url - The file name of the main layer image
	* @property {boolean} newShot - Wether this board is a new shot or the next board of the previous shot
	* @property {string} shot - The name of the board
	* @property {int} number - The index of the board
	* @property {int} time - The time of the board, in ms
	* @property {int} duration - The duration of this board, in ms
	* @property {WULayers} layers - The layers of this board
	* @property {string|undefined} link - The file name of a linked psd, if any.
*/

/**
	* @class
	* @name WULayers
	* @classdesc A set of layers in a {@link WUBoard}<br />
	* This is not a real class, and cannot be instanciated.
	* @property {WULayer} reference
	* @property {WULayer} fill
	* @property {WULayer} tone
	* @property {WULayer} pencil
	* @property {WULayer} ink
	* @property {WULayer} notes
*/

/**
	* @class
	* @name WULayer
	* @classdesc A layer in a {@link WULayers}<br />
	* This is not a real class, and cannot be instanciated.
	* @property {string} url - The file name
	* @property {float} [opacity] - The opacity
*/

/**
	* Wonderunit Storyboarder interchange tools
	* @namespace
	* @memberof DuAEF
*/
DuAEF.WUStoryboarder = {};

/**
 * Loads a Storyboarder file
 * @memberof DuAEF.WUStoryboarder
 * @param {File} file - The .storyboarder JSON file
 * @return {WUStoryboard|null} The storyboard or null if the file could not be parsed or opened
 */
DuAEF.WUStoryboarder.loadStoryboard = function(file)
{
	//open and parse file
	var data = DuFile.parseJSON(file);

	//check boards count
	if (!data.boards) return null;

	//update board durations
	var it = new DuList(data.boards);
	it.do( function(board) {
		if (!board.duration) board.duration = data.defaultBoardTiming;
		//update duration to a number
		if (jstype(board.duration) == 'string')
		{
			board.duration = parseInt(board.duration);
		}
	});

	return data;
}

/**
 * Imports a .storyboard file with all boards
 * @memberof DuAEF.WUStoryboarder
 * @param {File} file - The .storyboard file to import. Boards as png files must be in an 'images' subfolder
 * @param {boolean} [overlayInfo = false] - True to display text information on top of the image, false to display it under the image
 * @param {boolean} [precompShots = true] - True to precompose the layers and boards for each shots
 * @return {int} Error code: -2: invalid file or data,<br/>
 * -1: images not found or invalid,<br/>
 * 0: no board to import in the file,<br/>
 * 1: ok
 */
DuAEF.WUStoryboarder.import = function (file,overlayInfo,precompShots)
{
	if (overlayInfo === undefined) overlayInfo = false;
	if (precompShots === undefined) precompShots = true;

	var storyboard = DuAEF.WUStoryboarder.loadStoryboard(file);

	if (!storyboard) return -2;
	var boards = storyboard.boards;
	var numBoards = boards.length;
	if (numBoards == 0) return 0;

	var storyboarderVersion = storyboard.version;

	//check images
	var imagesPath = file.path + '/images/';
	var imagesFolder = new Folder(imagesPath);
	if (!imagesFolder.exists) return -1;

	//first board
	var firstImageFile = new File(imagesPath + boards[0].url);
	firstImageFile.psd = false;
	if (!firstImageFile.exists)
	{
		//if not found, try the poster frame
		firstImageFile = new File(imagesPath + boards[0].url.replace(".png","-posterframe.jpg"))
		//or try the psd or a layer
		if (!firstImageFile.exists)
		{
			//check if there is a psd
			if (boards[0].link !== undefined)
			{
				firstImageFile = new File(imagesPath + boards[0].link);
				firstImageFile.psd = true;
			}
			else 
			{
				//try with a layer
				firstImageFile = new File(imagesPath + boards[0].layers.reference.url);
			}
		}
	}


	//size
	//import first image to check size
	var importOptions = new ImportOptions(firstImageFile);
	importOptions.importAs = ImportAsType.FOOTAGE;
	var item = app.project.importFile(importOptions);
	var width = item.width;
	var height = overlayInfo ? item.height : item.height+200;
	var itemHeight = item.height;
	item.remove();

	//storyboard name
	var name = file.name.replace('.storyboarder','');
	//duration
	var lastBoard = boards[numBoards-1];
	var duration = lastBoard.time + lastBoard.duration;

	//create comp
	var comp = app.project.items.addComp(name + " Animatic", width, height, 1, duration/1000, storyboard.fps);

	//create Folder item
	var imageFolder = app.project.items.addFolder(name + " | Boards");
	var precompFolder = null;
	if (precompShots) precompFolder = app.project.items.addFolder(name + " | Shots");
	var audioFolder = app.project.items.addFolder(name + " | Audio");

	//import boards
	var shotComp = comp;
	var boardTime = 0;
	for (var i = 0 ; i < numBoards ; i++)
	{
		var board = boards[i];

		//create shot comp
		if ((i == 0 || board.newShot) && precompShots)
		{
			//get shot duration
			var shotDuration = board.duration/1000;
			for (var j = i+1 ; j <  numBoards ; j++ )
			{
				var nextBoard = boards[j];
				if (nextBoard.newShot) break;
				shotDuration = shotDuration + nextBoard.duration/1000;
			}
			shotComp = app.project.items.addComp("Shot " + board.shot.replace('A',''), width, height, 1, shotDuration, storyboard.fps);

			//background
			if (!overlayInfo)
			{
				var solid = shotComp.layers.addSolid([0,0,0], "Background", width, 200, 1);
				solid.transform.position.setValue([width/2,height-100]);
				solid.moveToEnd();
			}

			//time code
			var tcLayer = shotComp.layers.addText('00');
			var textDocument = tcLayer.sourceText.value;
			textDocument.resetCharStyle();
			textDocument.resetParagraphStyle();
			textDocument.fontSize = 35;
			textDocument.fillColor = [1,1,1];
			textDocument.strokeColor = [0,0,0];
			textDocument.strokeWidth = 4;
			textDocument.font = "Arial";
			textDocument.strokeOverFill = false;
			textDocument.applyStroke = overlayInfo;
			textDocument.applyFill = true;
			textDocument.justification = ParagraphJustification.LEFT_JUSTIFY;
			tcLayer.sourceText.setValue(textDocument);
			tcLayer.sourceText.expression = '"Shot  ' + board.shot.replace('A','') + '\\n" + timeToCurrentFormat()';
			tcLayer.name = "TC";
			tcLayer.transform.position.setValue([20,height-60]);

			shotComp.parentFolder = precompFolder;
			//add to comp
			var shotCompLayer = comp.layers.add(shotComp);
			shotCompLayer.startTime = board.time/1000;
			shotCompLayer.moveToEnd();
			boardTime = 0;
		}

		//import
		var mainItem = null;
		var psd = false;
		//psd
		if (board.link !== undefined)
		{
			var mainFile = new File(imagesPath + board.link);
			var importOptions = new ImportOptions(mainFile);
			importOptions.importAs = ImportAsType.COMP;
			mainItem = app.project.importFile(importOptions);
			//move folder
			for (var j = 1, num = app.project.numItems; j <= num; j++ )
			{
				var item = app.project.item(j);
				if (item instanceof FolderItem && item.name.indexOf(mainItem.name) == 0)
				{
					item.parentFolder = imageFolder;
					break;
				}
			}
			psd = true;
		}
		//png
		else
		{
			var mainFile = new File(imagesPath + board.url);
			if (mainFile.exists) mainItem = app.project.importFile(new ImportOptions(mainFile));

		}

		var shotLayer = null;

		if (mainItem != null)
		{
			mainItem.parentFolder = imageFolder;
			//add to comp
			shotLayer = shotComp.layers.add(mainItem,board.duration/1000);
			shotLayer.label = 16;
			shotLayer.name = board.shot;
			shotLayer.startTime = boardTime;
			if (!overlayInfo) shotLayer.transform.position.setValue([width/2,mainItem.height/2]);
			if(shotLayer.index != shotComp.numLayers) shotLayer.moveBefore(shotComp.layer(shotComp.numLayers));
		}

		if (board.layers.reference !== undefined && !psd)
		{
			var referenceFile = new File(imagesPath + board.layers.reference.url);
			var referenceItem = app.project.importFile(new ImportOptions(referenceFile));
			referenceItem.parentFolder = imageFolder;
			var referenceLayer = shotComp.layers.add(referenceItem,board.duration/1000);
			referenceLayer.label = 12;
			referenceLayer.name = board.shot + " | Reference";
			referenceLayer.startTime = boardTime;
			referenceLayer.transform.opacity.setValue(board.layers.reference.opacity*100);
			if (!overlayInfo) referenceLayer.transform.position.setValue([width/2,itemHeight/2]);
			if (shotLayer != null)
			{
				referenceLayer.moveAfter(shotLayer);
				referenceLayer.parent = shotLayer;
			}
			else shotLayer = referenceLayer;
		}

		if (shotLayer == null)
		{
			shotLayer = shotComp.layers.addNull();
			shotLayer.label = 16;
			shotLayer.name = board.shot;
			shotLayer.startTime = boardTime;
			if (!overlayInfo) shotLayer.transform.position.setValue([width/2,itemHeight/2]);
			if(shotLayer.index != shotComp.numLayers) shotLayer.moveBefore(shotComp.layer(shotComp.numLayers));
		}

		//add dialog
		if (board.dialogue)
		{
			var dialogueLayer = shotComp.layers.addText(board.dialogue);
			var textDocument = dialogueLayer.sourceText.value;
			textDocument.resetCharStyle();
			textDocument.resetParagraphStyle();
			textDocument.fontSize = 25;
			textDocument.fillColor = overlayInfo ? [0,0,0] : [1,1,1];
			textDocument.strokeColor = [1,1,1];
			textDocument.strokeWidth = 4;
			textDocument.font = "Arial";
			textDocument.strokeOverFill = false;
			textDocument.applyStroke = overlayInfo;
			textDocument.applyFill = true;
			textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
			dialogueLayer.sourceText.setValue(textDocument);
			dialogueLayer.name = board.shot + " | Action";
			dialogueLayer.startTime = boardTime;
			dialogueLayer.outPoint = board.duration/1000 + boardTime;
			dialogueLayer.moveBefore(shotLayer);
			dialogueLayer.transform.position.setValue([width/2,height-150]);
			dialogueLayer.parent = shotLayer;
		}

		//add action
		if (board.action)
		{
			var actionLayer = shotComp.layers.addText(board.action);
			var textDocument = actionLayer.sourceText.value;
			textDocument.resetCharStyle();
			textDocument.resetParagraphStyle();
			textDocument.fontSize = 25;
			textDocument.fillColor = [1,0,0];
			textDocument.strokeColor = [1,1,1];
			textDocument.strokeWidth = 4;
			textDocument.font = "Arial";
			textDocument.strokeOverFill = false;
			textDocument.applyStroke = overlayInfo;
			textDocument.applyFill = true;
			textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
			actionLayer.sourceText.setValue(textDocument);
			actionLayer.name = board.shot + " | Dialogue";
			actionLayer.startTime = boardTime;
			actionLayer.outPoint = board.duration/1000 + boardTime;
			actionLayer.moveBefore(shotLayer);
			actionLayer.transform.position.setValue([width/2,height-87]);
			actionLayer.parent = shotLayer;
		}

		//add notes
		if (board.notes)
		{
			var notesLayer = shotComp.layers.addText(board.notes);
			var textDocument = notesLayer.sourceText.value;
			textDocument.resetCharStyle();
			textDocument.resetParagraphStyle();
			textDocument.fontSize = 25;
			textDocument.fillColor = [0,1,0];
			textDocument.strokeColor = [1,1,1];
			textDocument.strokeWidth = 4;
			textDocument.font = "Arial";
			textDocument.strokeOverFill = false;
			textDocument.applyStroke = overlayInfo;
			textDocument.applyFill = true;
			textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;
			notesLayer.sourceText.setValue(textDocument);
			notesLayer.name = board.shot + " | Notes";
			notesLayer.startTime = boardTime;
			notesLayer.outPoint = board.duration/1000 + boardTime;
			notesLayer.moveBefore(shotLayer);
			notesLayer.transform.position.setValue([width/2,height-25]);
			notesLayer.parent = shotLayer;
		}

		//add notes layer
		if (board.layers.notes && !psd)
		{
			var notesFile = new File(imagesPath + board.layers.notes.url);
			var notesItem = app.project.importFile(new ImportOptions(notesFile));
			notesItem.parentFolder = imageFolder;
			var notesLayer = shotComp.layers.add(notesItem,board.duration/1000);
			notesLayer.label = 14;
			notesLayer.name = board.shot + " | Notes";
			notesLayer.startTime = boardTime;
			if (!overlayInfo) notesLayer.transform.position.setValue([width/2,itemHeight/2]);
			notesLayer.moveBefore(shotLayer);
			notesLayer.parent = shotLayer;
		}

		//add ink layer
		if (board.layers.ink && !psd)
		{
			var file = new File(imagesPath + board.layers.ink.url);
			var item = app.project.importFile(new ImportOptions(file));
			item.parentFolder = imageFolder;
			var layer = shotComp.layers.add(item,board.duration/1000);
			layer.label = 14;
			layer.name = board.shot + " | Ink";
			layer.startTime = boardTime;
			if (!overlayInfo) layer.transform.position.setValue([width/2,itemHeight/2]);
			layer.moveBefore(shotLayer);
			layer.parent = shotLayer;
		}

		//add pencil layer
		if (board.layers.pencil && !psd)
		{
			var file = new File(imagesPath + board.layers.pencil.url);
			var item = app.project.importFile(new ImportOptions(file));
			item.parentFolder = imageFolder;
			var layer = shotComp.layers.add(item,board.duration/1000);
			layer.label = 14;
			layer.name = board.shot + " | Pencil";
			layer.startTime = boardTime;
			if (!overlayInfo) layer.transform.position.setValue([width/2,itemHeight/2]);
			layer.moveBefore(shotLayer);
			layer.parent = shotLayer;
		}

		//add tone layer
		if (board.layers.tone && !psd)
		{
			var file = new File(imagesPath + board.layers.tone.url);
			var item = app.project.importFile(new ImportOptions(file));
			item.parentFolder = imageFolder;
			var layer = shotComp.layers.add(item,board.duration/1000);
			layer.label = 14;
			layer.name = board.shot + " | Tone";
			layer.startTime = boardTime;
			if (!overlayInfo) layer.transform.position.setValue([width/2,itemHeight/2]);
			layer.moveBefore(shotLayer);
			layer.parent = shotLayer;
		}

		//add fill layer
		if (board.layers.fill && !psd)
		{
			var file = new File(imagesPath + board.layers.fill.url);
			var item = app.project.importFile(new ImportOptions(file));
			item.parentFolder = imageFolder;
			var layer = shotComp.layers.add(item,board.duration/1000);
			layer.label = 14;
			layer.name = board.shot + " | Fill";
			layer.startTime = boardTime;
			if (!overlayInfo) layer.transform.position.setValue([width/2,itemHeight/2]);
			layer.moveBefore(shotLayer);
			layer.parent = shotLayer;
		}

		//add shot-generator layer
		if (board.layers["shot-generator"] && !psd)
		{
			var file = new File(imagesPath + board.layers["shot-generator"].url);
			var item = app.project.importFile(new ImportOptions(file));
			item.parentFolder = imageFolder;
			var layer = shotComp.layers.add(item,board.duration/1000);
			layer.label = 14;
			layer.name = board.shot + " | Shot Generator";
			layer.startTime = boardTime;
			if (!overlayInfo) layer.transform.position.setValue([width/2,itemHeight/2]);
			layer.moveBefore(shotLayer);
			layer.parent = shotLayer;
			layer.transform.opacity.setValue( board.layers["shot-generator"].opacity * 100 );
		}

		//add audio layer
		if (board.audio)
		{
			var audioFile = new File(imagesPath + board.audio.filename);
			var audioItem = app.project.importFile(new ImportOptions(audioFile));
			audioItem.parentFolder = audioFolder;
			//add to shot precomp
			var audioLayer = shotComp.layers.add(audioItem);
			audioLayer.name = board.shot + " | Audio";
			audioLayer.startTime = boardTime;
			audioLayer.moveToEnd();
			audioLayer.parent = shotLayer;
			//add to main comp
			if (precompShots)
			{
				audioLayer.guideLayer = true;
				var audioMainLayer = comp.layers.add(audioItem);
				audioMainLayer.name = board.shot + " | Audio";
				audioMainLayer.startTime = board.time/1000;
				audioMainLayer.moveToEnd();
			}
		}

		//set new time
		boardTime = boardTime + board.duration/1000;
	}

	//background
	if (!overlayInfo  && !precompShots )
	{
		var solid = comp.layers.addSolid([0,0,0], "Background", width, 200, 1);
		solid.transform.position.setValue([width/2,height-100]);
		solid.moveToEnd();
	}

	//time code
	var tcLayer = comp.layers.addText('00');
	var textDocument = tcLayer.sourceText.value;
	textDocument.resetCharStyle();
	textDocument.resetParagraphStyle();
	textDocument.fontSize = 35;
	textDocument.fillColor = [1,1,1];
	textDocument.strokeColor = [0,0,0];
	textDocument.strokeWidth = 4;
	textDocument.font = "Arial";
	textDocument.strokeOverFill = false;
	textDocument.applyStroke = overlayInfo;
	textDocument.applyFill = true;
	textDocument.justification = ParagraphJustification.RIGHT_JUSTIFY;
	tcLayer.sourceText.setValue(textDocument);
	tcLayer.sourceText.expression = 'timeToCurrentFormat()';
	tcLayer.name = "TC";
	tcLayer.transform.position.setValue([width-20,height-20]);

	return 1;
}
