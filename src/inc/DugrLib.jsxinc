/**
 * Duduf groups
 * @author Nicolas Dufresne and contributors
 * @copyright 2017,2018 Nicolas Dufresne, Rainbox Productions<br />
 * {@link https://rainboxprod.coop}
 * @namespace
 * @memberof DuAEF
 * @license GPL-3.0 <br />
 * DuAEF is free software: you can redistribute it and/or modify<br />
 * it under the terms of the GNU General Public License as published by<br />
 * the Free Software Foundation, either version 3 of the License, or<br />
 * (at your option) any later version.<br />
 *<br />
 * DuAEF is distributed in the hope that it will be useful,<br />
 * but WITHOUT ANY WARRANTY; without even the implied warranty of<br />
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br />
 * GNU General Public License for more details.<br />
 *<br />
 * You should have received a copy of the GNU General Public License<br />
 * along with DuAEF. If not, see {@link http://www.gnu.org/licenses/}.
 */
DuAEF.Dugr = {};

/**
 * Modes which can be used for isolation
 * @enum {int}
 * @readonly
 */
DuAEF.Dugr.IsolationModes =
{
	ALL: 0,
	VIEWPORT: 1,
	TIMELINE: 2
}

//low-level undocumented
//used to know if the comp had shy mode enabled before using Dugr
DuAEF.Dugr.hideShyLayers = false;

/**
 * Adds a layer to a group
 * @param {Layer} layer - The layer
 * @param {string} group - The group name
 */
DuAEF.Dugr.addLayerToGroup = function (layer, group)
{
	var locked = layer.locked;
	layer.locked = false;
	var groupComment = '|' + group + '| ';
	if (layer.comment.indexOf(groupComment) < 0)
	{
		layer.comment = layer.comment + groupComment;
	}
	layer.locked = locked;
}

/**
 * Adds the selected layers from the current comp in the group
 * @param {string} group - The group name
 */
DuAEF.Dugr.addSelectedLayersToGroup = function (group)
{
	if (group == "All") return;
	if (group == "Selected") return;
	if (group == "Not selected") return;
	if (group == "Not grouped") return;

	var layers = DuAEF.DuAE.Comp.getSelectedLayers();
	for (var i=0, num = layers.length; i < num; i++)
	{
		addLayerToGroup(layers[i],group);
	}
}

/**
 * Removes a layer from a group
 * @param {Layer} layer - The layer
 * @param {string} group - The group name
 */
DuAEF.Dugr.removeLayerFromGroup = function (layer, group)
{
	var locked = layer.locked;
	layer.locked = false;
	layer.comment = layer.comment.replace('|' + group + '| ','');
	layer.locked = locked;
}

/**
 * Removes the selected layers in the current comp from the group
 * @param {string} group - The group name
 */
DuAEF.Dugr.removeSelectedLayersFromGroup = function (group)
{
	var layers = DuAEF.DuAE.Comp.getSelectedLayers();
	for (var i=0, num = layers.length; i < num; i++)
	{
		removeLayerFromGroup(layers[i],group);
	}
}

/**
 * Empties the group (equivalent to removing it)
 * @param {string} group - The group name
 */
DuAEF.Dugr.removeAllLayersFromGroup = function (group)
{
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;

	var layers = comp.layers;
	for (var i=1, num = comp.numLayers; i <= num; i++)
	{
		removeLayerFromGroup(layers[i],group);
	}
}

 //low-level undocumented method
 //Adds a layer in the current comp to warn the user that something is isolated
DuAEF.Dugr.addDugrLayer = function (placement)
{
	DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;

	if (typeof placement === 'undefined') placement = DuAEF.DuAE.LayerPlacements.BOTTOM;

	//add rect
	sq = comp.layers.addShape();
	sq.shy = true;
	sq.guideLayer = true;
	sq.name = 'Dugr Activated';
	if (placement == DuAEF.DuAE.LayerPlacements.BOTTOM) sq.moveToEnd();

	var gr = sq("ADBE Root Vectors Group").addProperty("ADBE Vector Group");
	var groupContent = gr.property("ADBE Vectors Group");
	var shapeProp = groupContent.addProperty("ADBE Vector Shape - Rect");
	shapeProp("ADBE Vector Rect Size").setValue([comp.width,comp.height]);
	var stroke = groupContent.addProperty("ADBE Vector Graphic - Stroke");
	stroke("ADBE Vector Stroke Color").setValue([0.8,0,0]);
	stroke("ADBE Vector Stroke Opacity").setValue(50);
	stroke("ADBE Vector Stroke Width").setValue(comp.width/100);

	sq.locked = true;
}

 //low-level undocumented method
 //Removes the layer used to warn the user that something is isolated
DuAEF.Dugr.removeDugrLayer = function ()
{
	var found = false;
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return found;

	for (var i = 1, num = comp.numLayers; i <= num; i++)
	{
		if (comp.layer(i).name == 'Dugr Activated')
		{
			found = true;
			comp.layer(i).locked = false;
			comp.layer(i).remove();
			break;
		}
	}
	return found;
}

//low-level undocumented method
//Checks if a layer is in the grouped
DuAEF.Dugr.isLayerInGroup = function (layer, group)
{
	if (layer.comment.indexOf('|' + group + '| ')>=0)
	{
		return true;
	}

	if (group == DuAEF.DuAE.LayerTypes.NULL && layer.nullLayer) return true;
	if (group == DuAEF.DuAE.LayerTypes.SOLID && (!layer.nullLayer && layer instanceof AVLayer)) if (layer.source instanceof FootageItem) if (layer.source.mainSource instanceof SolidSource) return true;
	if (group == DuAEF.DuAE.LayerTypes.SHAPE && layer instanceof ShapeLayer) return true;
	if (group == DuAEF.DuAE.LayerTypes.TEXT && layer instanceof TextLayer) return true;
	if (group == DuAEF.DuAE.LayerTypes.ADJUSTMENT && layer.adjustmentLayer) return true;
	if (group == DuAEF.DuAE.LayerTypes.LIGHT && layer instanceof LightLayer) return true;
	if (group == DuAEF.DuAE.LayerTypes.CAMERA && layer instanceof CameraLayer) return true;
	if (group == DuAEF.DuAE.LayerAttributes.SELECTED && layer.selected) return true;
	if (group == DuAEF.DuAE.LayerAttributes.VISIBLE && layer.enabled) return true;
	if (group == DuAEF.DuAE.LayerAttributes.AUDIO && layer.hasAudio) return true;
	if (group == DuAEF.DuAE.LayerAttributes.LOCKED && layer.locked) return true;
	if (group == DuAEF.DuAE.LayerAttributes.EFFECTS_ENABLED && layer.effectsActive && layer.property("ADBE Effect Parade").numProperties > 0) return true;
	if (group == DuAEF.DuAE.LayerAttributes.MOTION_BLUR && layer.motionBlur) return true;
	if (group == DuAEF.DuAE.LayerAttributes.THREE_D && (layer.threeDLayer || layer instanceof LightLayer || layer instanceof CameraLayer)) return true;
	if (group == DuAEF.DuAE.LayerAttributes.GUIDE && layer.guideLayer) return true;

	return false;
}

/**
 * Gets the layers which are in the groups
 * @param {string[]} groups - Any combination of group names, DuAEF.DuAE.LayerTypes, DuAEF.DuAE.LayerAttributes
 * @param {boolean} invert - When true, gets the layers which are NOT in the groups
 * @return {Layer[]} The layers contained in the groups
 */
DuAEF.Dugr.getLayers = function (groups, invert)
{
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;
	if (comp.numLayers == 0) return;

	var layers = [];

	var testLayers = new Iterator(comp.layers);

	testLayers.do(function (layer)
	{
		var inGroup = false;
		for (var i = 0, num = groups.length; i < num; i++)
		{
			if (DuAEF.Dugr.isLayerInGroup(layer,groups[i]))
			{
				inGroup = true;
				break;
			}
		}

		if (!invert && inGroup) layers.push(layer);
		else if (invert && !inGroup) layers.push(layer);
	});
}

/**
* Checks if the name is valid for a new group
* @param {string} name - The new name to test
* @return {int} An error code<br />
* 1 - This name is ok<br />
* 0 - The name is less than three letters<br />
* -1 - Contains a vertical stroke<br />
*/
DuAEF.Dugr.validateGroupName = function (name)
{
	if (name.length < 4) return 0;
	if (name.indexOf('|') >= 0) return -1;
	return 1;
}

/**
* Gets the group existing in the current comp
*/
DuAEF.Dugr.getGroups = function ()
{
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;
	if (comp.numLayers == 0) return;

	var groups = [];

	//the regexp to find groups
	var re = /\|[^\|\n\r]+\| /g;

	var layers = new Iterator(comp.layers);
	layers.do(function(layer)
	{
		var newGroups = layer.comment.match(re);
		if (!groups) return;

		for (var j=0; j < newGroups.length; j++)
		{
			//remove the |
			var group = newGroups[j].substring(1,groups[j].length-2);
			//ignore reserved names
			if (group == 'shy' || group == 'sel' || group == 'vis' || group == 'bes' || group == 'dra' || group == 'wf' || group == 'lo') continue;
			//check if the group is already listed
			var exists = false;
			for (var g=0; g < groups.length; g++)
			{
				if (groups[g] == group)
				{
					exists = true;
					break;
				}
			}
			//adds it
			if (!exists) groups.push(group);
		}
	});

	return groups;
}

/**
* Activates the isolation
* @param {DuAEF.Dugr.IsolationModes} mode - The mode to use
* @param {string[]} groups - Any combination of group names, DuAEF.DuAE.LayerTypes, DuAEF.DuAE.LayerAttributes
*/
DuAEF.Dugr.isolate = function (mode, groups)
{
	//TODO Avoid exit, work on comments directly, to improve performance
	DuAEF.Dugr.exitIsolation();

	//TODO get methods from Dugr 3.0: isolate(), shyI(), soloI()
}

/**
* Deactivates the isolation
*/
DuAEF.Dugr.exitIsolation = function ()
{
	var comp = DuAEF.DuAE.Project.getActiveComp();
	if (!comp) return;

	if (!DuAEF.Dugr.removeDugrLayer()) return;

	comp.hideShyLayers = DuAEF.Dugr.hideShyLayers;

	for (var i = 1, num =  comp.numLayers; i <= num; i++)
	{
		var layer = comp.layer(i);

		var locked = layer.locked = layer.comment.indexOf('|lo| ') >= 0;
		layer.locked = false;

		layer.shy = layer.comment.indexOf('|shy| ') >= 0;
		layer.enabled = layer.comment.indexOf('|vis| ') >= 0;
		layer.selected = layer.comment.indexOf('|sel| ') >= 0;
		if (layer.comment.indexOf('|dra| ') >= 0) layer.quality = LayerQuality.DRAFT;
		else if (layer.comment.indexOf('|bes| ') >= 0) layer.quality = LayerQuality.BEST;
		else if (layer.comment.indexOf('|wf| ') >= 0) layer.quality = LayerQuality.WIREFRAME;
		else layer.quality = LayerQuality.DRAFT;

		layer.comment = layer.comment.replace('|shy| ','');
		layer.comment = layer.comment.replace('|vis| ','');
		layer.comment = layer.comment.replace('|sel| ','');
		layer.comment = layer.comment.replace('|bes| ','');
		layer.comment = layer.comment.replace('|dra| ','');
		layer.comment = layer.comment.replace('|wf| ','');
		layer.comment = layer.comment.replace('|lo| ','');

		layer.locked = locked;
	}
}
