/*
	DuPseudoEffectLib
  Library to manage pseudo effects
	Copyright (c) 2017-2019 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	This file is part of DuAEF.

	DuAEF is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuAEF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
	* Constructs a Pseudo Effect
	* @class Structure
	* @classdesc Describes a pseudo effect<br />
    * The indices of the properties in the effect are stored as their display names + type.<br />
    * <code>pseudoEffect.index["amplitude_Angle"]</code> is the index of an Angle property named "amplitude"
	* @param {DuBinaryFile} binaryFile - The ffx file
	* @param {string} [matchName=""] - The matchName
	* @param {string} [name=""] - The default name
	* @property {File} file - The ffx file
	* @property {string} matchName - The matchName
	* @property {string} name - The default name
	* @property {object} index - An associative array containing the indices of the properties.
	* @example
    * pseudoEffect.index["amplitude_Angle"] //returns the index of an Angle property named "amplitude"
	* //If the property is in a group, its name is also prefixed with the name of the group.
	* pseudoEffect.index["Group_amplitude_Angle"] //returns the index of the Angle property named "amplitude" in the group "Group"
    */
function PseudoEffect(binaryFile,matchName,name)
{
	if(typeof name == 'undefined') name = '';
	if(typeof matchName == 'undefined') matchName = '';

	this.file = DuAEF.DuBinary.toFile(binaryFile);
	this.matchName = matchName;
	if (name != '') DuAEF.DuScriptUI.uiStrings.push(name);
	this.name = tr(name);

	var xml = '';
	if (typeof binaryFile.xml != 'undefined') xml = binaryFile.xml;
	//get the information from the xml data
    if (xml != '')
    {
        var xmlData = new XML(xml);

		// all attributes using '@' don't pass the jsdoc parsing. Enclosing them in an eval(string) fixes this
		if (this.matchName == '') this.matchName = eval('xmlData.@matchname');	
		if (this.name == '')
		{
			name = eval('xmlData.@name');
			name = name.split("=").pop();
			DuAEF.DuScriptUI.uiStrings.push(name);
			this.name = tr(name);
		}

		//get the indices
		var currentIndex = -1;
		var index = {};

		//recursive function to get indices/names in pseudo effect
		function getIndices( xmlObj, prefix )
		{
			if (typeof prefix === 'undefined') prefix = '';

			var baseName = "";
			if (xmlObj.localName() != 'Effect') baseName = eval('xmlObj.@name.split( "=" ).pop()');
			var localName = xmlObj.localName();

			currentIndex++;

			if (xmlObj.children().length() > 0)
			{
				for (var i = 0, num = xmlObj.children().length(); i < num; i++)
				{
					getIndices( xmlObj.children()[i], baseName );
				}
			}
			else
			{
				var n = '';
				if (prefix != '') n += prefix + "_";
				n += baseName + "_" + localName;
				index[n] = currentIndex;
			}

			if (localName == 'Group') currentIndex++;	
		}

		getIndices(xmlData);
		this.index = index;
    }

}

/**
	* This method adds the pseudo effect to a layer
	* @param {Layer} layer - The layer
	* @param {string} [name=this.name] - A name for the effect
	* @return {PropertyGroup|null} The effect or null if there's no matchName
    */
PseudoEffect.prototype.apply = function(layer,name)
{
	if (this.matchName == '')
	{
		DuAEF.DuAE.Layer.applyPreset(layer,this.file);
		return null;
	}

	if (typeof name === 'undefined') name = this.name;

	return DuAEF.DuAE.Layer.addPseudoEffect(layer,this.file,this.matchName,name);
}

/**
    * Tools to manage pseudo effects.
    */
DuAEF.DuPseudoEffect = {};

/**
 * Converts a pseudo effect file (*.ffx) to a jsxinc file which can be included and used in any script.
 * @memberof DuAEF.DuPseudoEffect
 * @param {File} ffxFile - The binary file to convert
 * @param {File|string} [xmlFile] - The xml file or string representing the pseudo effect. If not provided, will search for an xml file with the same name.
 * @param {string} [category] - A Category for the file, will be used as a subfolder to extract files. Can have subcategories like "category/subcategory". Default: ""
 * @param {string} [outputFileName]  - The file name for the output. By default, same folder, same name with .jsxinc extension
 * @param {string} [varName] - The name of the variable used to store the javascript object. By default, the file name without extension.
 * @param {boolean} [generateHelpFile=true] - Generates a text file with the list of controls and their indices, useful to use the pseudo effect in a script.
 * @return {File} The jsxinc file created
 */
DuAEF.DuPseudoEffect.convertToIncludeFile = function(ffxFile,xmlFile,category,outputFileName,varName, generateHelpFile)
{
	outputFileName = def(outputFileName, ffxFile.absoluteURI + '.jsxinc');
	varName = def(varName, ffxFile.name.replace(/\..+/,''));
	generateHelpFile = def(generateHelpFile, true);

    varName = DuString.replace(varName,'%20','_');

    var xmlString = "";

    if (typeof xmlFile === 'undefined') xmlFile = new File( DuPath.switchExtension( ffxFile, 'xml' ) );

    if (typeof xmlFile === 'string') xmlString = xmlFile;
    else if (xmlFile.exists)
    {
        if (xmlFile.open("r", "TEXT"))
        {
            xmlString = xmlFile.read();
            xmlFile.close();
        }
    }


	var duBinary = DuAEF.DuBinary.toObj(ffxFile,category);
	var jsString = 'var ' + varName + ' = ';
	jsString += '{"binAsString":"' + duBinary.binAsString + '","fileName":"' + duBinary.fileName + '","category":"' + duBinary.category + '","xml":' + JSON.stringify( xmlString ) + '}';
	jsString += ';\r\n';
	jsString += varName + ';\r\n';


	var outputFile = new File(outputFileName);
	outputFile.encoding = 'UTF8';
	if (outputFile.open("w", "TEXT", "????"))
	{
		outputFile.write(jsString);
		outputFile.close();
	}

	if (generateHelpFile)
	{
		//load the pseudo effect
		pE = new PseudoEffect(eval(jsString));
		var helpString = "Pseudo Effect: " + pE.name + " | matchName: " + pE.matchName + "\n";
		for (key in pE.index)
		{
			if (pE.index.hasOwnProperty(key))
			{
				helpString += "index['" + key + "'] = " + pE.index[key] + "\n";
			}
		}
		
		var helpFile = new File( DuPath.switchExtension( ffxFile, 'txt' ) );
		helpFile.encoding = 'UTF8';
		if (helpFile.open("w", "TEXT", "????"))
		{
			helpFile.write(helpString);
			helpFile.close();
		}

	}

    return outputFile;
}
