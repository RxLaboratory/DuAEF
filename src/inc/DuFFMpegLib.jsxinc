/*
	DuFFMpeg
	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions
	https://rainboxprod.coop

	_Contributors:_
		Nicolas Dufresne - Lead developer

	_DuFFMpeg makes use of:_

		• FFMpeg
		http://ffmpeg.org

	This file is part of DuFFMpeg.

	DuFFMpeg is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	DuFFMpeg is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with DuFFMpeg. If not, see <http://www.gnu.org/licenses/>.
*/

//TODO Use DuProcessLibs

/**
 * Constructs a new FFMpeg encoder.
 * The constructor will try to find the ffmpeg binary in the same folder as DuFFMpeg, or an (ffmpeg) subfolder, or in the scripts folder of After Effects.
 * If ffmpeg is not in one of those, the property ffmpegPath will be an empty string, and it has to be set by the user.
 * @class DuFFMpeg
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	   [options=-stats]			- The options of the encoder.
 * @property {string}	  ffmpegPath		- The path to the FFMpeg binary.
 * @property {string}	   options			- The options of the encoder.
 * @property {FFMpegQueueItem[]} queue		- The render queue
 * @example
 * //Very simple transcoding
 * //create a new FFMpeg instance
 * var ffmpeg = new DuFFMpeg();
 * //input file. Note that you can use any path format you want, URI, fsName, or path, using either / or \
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 1.mp4');
 * //output to an audio wav file using PCM 32 bit float little-endian codec
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 1.wav');
 * //create the render queue item
 * var item = new DuFFMpegQueueItem(input,[output]);
 * //add the item to the render queue
 * ffmpeg.queue.push(item);
 *
 * ffmpeg.launch(); //and launch the process!
 * @example
 * //Transcoding two different files, and a few more options
 * //new FFMpeg instance, encoding will overwrite files, and statistics will be shown
 * var ffmpeg = new DuFFMpeg('-y -stats');
 * //input file
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 1.mp4');
 * //output to an audio wav file using PCM 32 bit float little-endian codec, forcing 48000Hz sampling and disabling video
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 1.wav','-ar 48000 -vn');
 * //create the render queue item
 * var item = new DuFFMpegQueueItem(input,[output]);
 * //add the item to the render queue
 * ffmpeg.queue.push(item);
 *
 * //another render queue item
 * var input = new DuFFMpegInputModule('C:/RAINBOX/Test video 2.mp4');
 * var output = new DuFFMpegOutputModule('pcm_f32le','C:/RAINBOX/Test audio 2.wav','-ar 48000 -vn');
 * var item = new DuFFMpegQueueItem(input,[output]);
 * ffmpeg.queue.push(item);
 *
 * //and launch the process! Both items will be transcoded.
 * ffmpeg.launch();
 */
function DuFFMpeg(options)
{
	if (typeof options === 'undefined') options = '-stats';

	this.ffmpegPath = '';

	//try to detect the ffmpeg path
	var ffmpegBinName = '';
	if (DuESF.win) ffmpegBinName = 'ffmpeg.exe';
	else ffmpegBinName = 'ffmpeg';
	//first, in the same dir
	var thisScriptFile = new File($.fileName);
	var ffmpegFile = new File(thisScriptFile.parent.absoluteURI + '/' + ffmpegBinName);
	//in an (ffmpeg) subfolder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(thisScriptFile.parent.absoluteURI + '/(ffmpeg)/' + ffmpegBinName);
	}
	//in AE Scripts folder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/' + ffmpegBinName);
	}
	//in AE Scripts/(ffmpeg) folder
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/(ffmpeg)/' + ffmpegBinName);
	}
	//in AE ScriptUI Panels
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/' + ffmpegBinName);
	}
	//in AE ScriptUI Panels/(ffmpeg)
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(Folder.appPackage.absoluteURI + '/Scripts/ScriptUI Panels/(ffmpeg)/' + ffmpegBinName);
	}
	//in the parent dir
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(thisScriptFile.parent.parent.absoluteURI + '/' + ffmpegBinName);
	}
	//in the parent dir (fmmpeg)
	if (!ffmpegFile.exists)
	{
		ffmpegFile = new File(thisScriptFile.parent.parent.absoluteURI + '/(ffmpeg)' + ffmpegBinName);
	}

	if (ffmpegFile.exists) this.ffmpegPath = ffmpegFile.fsName;

	this.options = options;
	this.queue = [];
}

/**
 * Launches encoding
 * @memberof DuFFMpeg
 */
DuFFMpeg.prototype.launch = function ()
{
	if (!DuFile.exists(this.ffmpegPath) || this.ffmpegPath == '') return;

	var cmd = '';

	var ffmpegCmd = '';

	if (DuESF.win) ffmpegCmd += '"' + this.ffmpegPath + '"';
	else
	{
	  var ffmpegFile = new File(this.ffmpegPath);
	  ffmpegCmd += '"' + ffmpegFile.parent.fsName + '"/./' + ffmpegFile.name;
	}

	if (DuESF.win) cmd += 'cmd.exe /c "';

	//add RenderItems
	for (var i = 0 ; i < this.queue.length ; i++)
	{
		if (i > 0) cmd += ' & ';
		cmd += ffmpegCmd + ' ' + this.options;
		var item = this.queue[i];
		cmd += ' ' + item.input.options;
		cmd += ' -i "' + item.input.inputPath + '"';
		//add outputs
		for (var j = 0 ; j < item.outputs.length ; j++)
		{
			var output = item.outputs[j];
			cmd += ' -c ' + output.codec;
			cmd += ' ' + output.options;
			cmd += ' "' + output.outputPath + '"';
		}
	}

	if (DuESF.win) cmd += '"';

	//launch!

	// mac hack, do not wait for ffmpeg as it freezes AE
	if (DuESF.mac) cmd = cmd + ' && ';

	system.callSystem(cmd);

	// mac hack, but let's wait anyway
	if (DuESF.mac)
	{
		//timeout
		var currentDate = new Date();
		var timeout = currentDate.getTime() + 30000;
		var checkTime = new Date();

		var cmd = 'ps -A | grep "[f]fmpeg"';

		//wait
		while(checkTime.getTime() < timeout)
		{
			var test = system.callSystem(cmd);
			if (test == '') break;
			$.sleep(300);
			checkTime = new Date();
		}
	}
}

/**
 * Constructs a new FFMpegInputModule module
 * @class DuFFMpegInputModule
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	inputPath		- The path to the input file.
 * @param {string}	[options]			- The options for the input file.
 * @property {string}	inputPath		- The path to the input file.
 * @property {string}	options			- The options for the input file. Default: ''
 */
function DuFFMpegInputModule(inputPath,options)
{
	if (!inputPath) throw "No input file set";
	if (inputPath == '') throw "No input file set";
	var inputFile = new File(inputPath);
	if (!inputFile.exists) throw "The input file does not exist";

	this.inputPath = inputFile.fsName;

	if (!options) options = '';
	this.options = options;
}

/**
 * Constructs a new FFMpegOutputModule module
 * @class DuFFMpegOutputModule
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {string}	codec			- The codec used for transcoding.
 * @param {string}	outputPath		- The path to the output file.
 * @param {string}	[options]			- The options for the output file (other than setting the codec).
 * @property {string}	codec			- The codec used for transcoding.
 * @property {string}	outputPath		- The path to the output file.
 * @property {string}	options			- The options for the output file (other than setting the codec).
 */
function DuFFMpegOutputModule(codec,outputPath,options)
{
	if (!codec) throw "No codec set";
	if (codec == '') throw "No codec set";

	this.codec = codec;

	//f (!outputPath) throw "No output file set";
	//if (outputPath == '') throw "No output file set";

	var outputFile = new File(outputPath);
	this.outputPath = outputFile.fsName;

	if (!options) options = '';
	this.options = options;
}

/**
 * Constructs a new FFMpegQueueItem
 * @class DuFFMpegQueueItem
 * @classdesc A class used to easily encode medias with ffmpeg
 * @param {FFMpegInputModule}		input	  - The input module.
 * @param {FFMpegOutputModule[]}	outputs	   - The output modules
 * @property {FFMpegInputModule}	input	  - The input module.
 * @property {FFMpegOutputModule[]}	outputs	   - The output modules
 */
function DuFFMpegQueueItem(input,outputs)
{
	if (!input) throw "No input set";

	this.input = input;

	if (!outputs) throw "No output set";
	if (outputs.length < 1) throw "Empty outputs";

	this.outputs = outputs;
}
